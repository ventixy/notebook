import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,a as i,e as s,d as h,w as e,r,o as g}from"./app-BPJY8eZI.js";const c={};function y(A,l){const d=r("RouteLink"),o=r("Tabs");return g(),p("div",null,[l[14]||(l[14]=t(`<h2 id="mysql体系架构" tabindex="-1"><a class="header-anchor" href="#mysql体系架构"><span>MySQL体系架构</span></a></h2><p>MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。</p><ul><li><p><strong>Connectors</strong>：与MySQL服务器建立连接。目前几乎支持所有主流的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接</p></li><li><p><strong>MySQL Server</strong>：服务层是MySQL的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优化器和缓存六个部分。</p></li><li><p><strong>Pluggable Storage Engines</strong>：存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是插件式的，服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异 。现在有很多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB。在绝大多数情况下，推荐使用InnoDB</p></li><li><p><strong>File System</strong>：该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件，数据文件，配置文件，pid 文件，socket 文件等。</p></li></ul><figure><img src="https://image.ventix.top/img02/mysql-architecture.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mysql-server" tabindex="-1"><a class="header-anchor" href="#mysql-server"><span>MySQL Server</span></a></h3><ul><li><p>连接池（Connection Pool）：负责存储和管理客户端与数据库的连接。</p></li><li><p>系统管理和控制工具（Management Services &amp; Utilities）：如备份恢复、安全管理、集群管理等</p></li><li><p>SQL接口（SQL Interface）：用于接受客户端发送的各种SQL命令，并且返回用户需要查询的结果。比如DML、DDL、存储过程、视图、触发器等。</p></li><li><p>解析器（Parser）：负责将请求的SQL解析生成一个&quot;解析树&quot;。然后根据一些MySQL规则进一步检查解析树是否合法。</p></li><li><p>查询优化器（Optimizer）：当“解析树”通过解析器语法检查后，将交由优化器将其转化成执行计划，然后与存储引擎交互。</p></li><li><p>缓存（Cache&amp;Buffer）： 缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，权限缓存，引擎缓存等。如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。</p></li></ul><h3 id="file-system" tabindex="-1"><a class="header-anchor" href="#file-system"><span>File System</span></a></h3><ul><li><p>pid 文件: pid 文件是 <code>mysqld</code> 应用程序在 Unix/Linux 环境下的一个进程文件，和许多其他 Unix/Linux 服务端程序一样，它存放着自己的进程 id</p></li><li><p>socket 文件: socket 文件也是在 Unix/Linux 环境下才有的，用户在 Unix/Linux 环境下客户端连接可以不通过<code>TCP/IP</code> 网络而直接使用 Unix Socket 来连接 MySQL。</p></li><li><p><strong>配置文件</strong>: 用于存放MySQL所有的配置信息文件，比如my.cnf、my.ini等。</p></li><li><p><strong>数据文件</strong></p><ul><li>db.opt 文件：记录这个库的默认使用的字符集和校验规则。</li><li>frm 文件：存储与表相关的元数据（meta）信息，包括表结构的定义信息等，每一张表都会有一个<code>frm</code> 文件。</li><li>MYD 文件：MyISAM 存储引擎专用，存放 MyISAM 表的数据（data)，每一张表都会有一个<code>.MYD</code> 文件。</li><li>MYI 文件：MyISAM 存储引擎专用，存放 MyISAM 表的索引相关信息，每一张 MyISAM 表对应一个 <code>.MYI</code> 文件。</li><li>ibd文件和 IBDATA 文件：存放 InnoDB 的数据文件（包括索引）。InnoDB 存储引擎有两种表空间方式：独享表空间和共享表空间。独享表空间使用 <code>.ibd</code> 文件来存放数据，且每一张InnoDB 表对应一个 <code>.ibd</code> 文件。共享表空间使用 <code>.ibdata</code> 文件，所有表共同使用一个（或多个，自行配置）<code>.ibdata</code> 文件。</li><li>ibdata1 文件：系统表空间数据文件，存储表元数据、Undo日志等 。</li><li><code>ib_logfile0</code>、<code>ib_logfile1</code> 文件：Redo log 日志文件。</li></ul></li><li><p><strong>日志文件</strong>：二进制日志（Binary Log）、慢查询日志（Slow query log）、通用查询日志（General query log）和错误日志（Error log）等。</p></li></ul><h2 id="innodb存储引擎" tabindex="-1"><a class="header-anchor" href="#innodb存储引擎"><span>Innodb存储引擎</span></a></h2><p>从MySQL 5.5版本开始默认使用InnoDB作为引擎，它擅长处理事务，具有自动崩溃恢复的特性，在日常开发中使用非常广泛。</p><h3 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h3><p>下面是官方的<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html" target="_blank" rel="noopener noreferrer">InnoDB引擎架构图(MySQL5.7)</a>，<a href="https://dev.mysql.com/doc/refman/8.4/en/innodb-architecture.html" target="_blank" rel="noopener noreferrer">MySQL8</a>在磁盘结构方面有所不同。</p><figure><img src="https://dev.mysql.com/doc/refman/5.7/en/images/innodb-architecture-5-7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Innodb存储结构主要分为内存结构和磁盘结构两大部分</p><ul><li><p>内存结构主要包括<code>Buffer Pool</code>、<code>Change Buffer</code>、<code>Adaptive Hash Index</code>和<code>Log Buffer</code></p></li><li><p>InnoDB磁盘主要包含<code>Tablespaces</code>，<code>InnoDB Data Dictionary</code>，<code>Doublewrite Buffer</code>、<code>Redo Log</code>和<code>Undo Logs</code></p></li></ul><h3 id="buffer-pool" tabindex="-1"><a class="header-anchor" href="#buffer-pool"><span>Buffer Pool</span></a></h3><p>Buffer Pool：缓冲池，简称BP。BP以<code>Page</code>页为单位，BP的底层采用链表数据结构管理Page。访问表记录和索引时会在Page页中缓存，以后使用可以减少磁盘IO操作，提升效率</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;innodb_buffer_pool_size&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 推荐设置为物理内存的 70% 到 80%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> innodb_buffer_pool_size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 256</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># MySQL5.7开始可以在线动态调整</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Page管理机制</p><p>缓冲池以Page页为单位，<mark>默认大小16K</mark>，底层采用链表数据结构管理Page。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%innodb_page_size%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看page页大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据状态，将Page分为三种类型:</p><ul><li>free page: 空闲page，未被使用。</li><li>clean page: 未被使用page，数据没有被修改过</li><li><mark>dirty page: 脏页</mark>，被使用page，数据被修改过，内存数据与磁盘的数据产生了不一致。</li></ul><p>针对上述三种page类型，InnoDB通过三种链表结构来维护和管理</p><ul><li>free list ：表示空闲缓冲区，管理free page</li><li>flush list：表示需要刷新到磁盘的缓冲区，管理dirty page，内部page按修改时间排序。</li><li><mark>lru list</mark>：表示正在使用的缓冲区，管理<code>clean page</code>和<code>dirty page</code>，缓冲区以<code>midpoint</code>为基点，前面链表称为new列表区，存放经常访问的数据，占63%；后面的链表称为old列表区，存放使用较少数据，占37%。 （LRU：least recently used algorithm）</li></ul><p>脏页即存在于flush链表，也在LRU链表中，但是两种互不影响，LRU链表负责管理page的可用性和释放，而flush链表负责管理脏页的刷盘操作。</p></div><p>缓冲池作为一个列表进行管理，使用了一种变体的 LRU 算法 --&gt;<a href="https://dev.mysql.com/doc/refman/8.4/en/innodb-buffer-pool.html" target="_blank" rel="noopener noreferrer">a variation of the LRU algorithm</a></p><figure><img src="https://image.ventix.top/img02/20220118130345103.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>加入元素时并不是从表头插入，而是从中间<code>midpoint</code>位置插入，如果数据很快被访问，那么page就会向new列表头部移动，如果数据没有被访问，会逐步向old尾部移动，等待淘汰。</p><p>每当有新的page数据读取到buffer pool时，InnoDb引擎会判断是否有空闲页，是否足够，如果有就将free page从free list列表删除，放入到LRU列表中。没有空闲页，就会根据LRU算法淘汰LRU链表默认的页，将内存空间释放分配给新的页。</p><h3 id="change-buffer" tabindex="-1"><a class="header-anchor" href="#change-buffer"><span>Change Buffer</span></a></h3><p>Change Buffer：写缓冲区。在进行DML操作时，如果BP没有其相应的Page数据，并不会立刻将磁盘页加载到缓冲池，而是在CB记录缓冲变更，等未来数据被读取时，再将数据合并恢复到BP中。</p><p>ChangeBuffer占用BufferPool空间，默认占<code>25%</code>，最大允许占<code>50%</code>，可以根据读写业务量来进行调整。参数<code>innodb_change_buffer_max_size</code>;</p><div class="hint-container warning"><p class="hint-container-title">写缓冲区为什么仅适用于非唯一普通索引页</p><p>如果索引具备唯一性，在进行修改时，InnoDB必须要做<code>唯一性校验</code>，因此必须查询磁盘，做一次IO操作。会直接将记录查询到BufferPool中，然后在缓冲池修改，不会在ChangeBuffer操作。</p></div><p>Adaptive Hash Index：自适应哈希索引，用于优化对BP数据的查询。InnoDB存储引擎会监控对表索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以称之为自适应。InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引。</p><h3 id="innodb文件存储结构" tabindex="-1"><a class="header-anchor" href="#innodb文件存储结构"><span>InnoDB文件存储结构</span></a></h3><h3 id="innodb文件存储格式" tabindex="-1"><a class="header-anchor" href="#innodb文件存储格式"><span>InnoDB文件存储格式</span></a></h3><h3 id="tablespaces" tabindex="-1"><a class="header-anchor" href="#tablespaces"><span>Tablespaces</span></a></h3><h2 id="select查询流程" tabindex="-1"><a class="header-anchor" href="#select查询流程"><span>Select查询流程</span></a></h2><p>Select执行流程: 一条SQL查询语句是如何执行的？</p><figure><img src="https://image.ventix.top/img02/20220115174918720.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询执行引擎负责执行 SQL 语句，查询执行引擎会根据 SQL 语句中表的存储引擎类型，以及对应的API接口与底层存储引擎缓存或者物理文件的交互，得到查询结果并返回给客户端。</p><p>若开启用查询缓存，这时会将SQL 语句和结果完整地保存到查询缓存（Cache&amp;Buffer）中，以后若有相同的 SQL 语句执行则直接返回结果。</p><ul><li>如果开启了查询缓存，先将查询结果做缓存操作</li><li>返回结果过多，采用增量模式返回</li></ul><h3 id="通讯机制与线程" tabindex="-1"><a class="header-anchor" href="#通讯机制与线程"><span>通讯机制与线程</span></a></h3><p>通过客户端/服务器通信协议与MySQL建立连接（Connectors&amp;Connection Pool）。MySQL 客户端与服务端的通信方式是 <mark>半双工</mark>。</p><div class="hint-container info"><p class="hint-container-title">通讯机制</p><ul><li>全双工：能同时发送和接收数据，例如平时打电话。</li><li>半双工：指的某一时刻，要么发送数据，要么接收数据，不能同时。例如早期对讲机</li><li>单工：只能发送数据或只能接收数据。例如单行道</li></ul></div><p>对于每一个 MySQL 的连接，时刻都有一个线程状态来标识这个连接正在做什么。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看用户正在运行的线程信息，root用户能查看所有线程，其他用户只能看自己的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> processlist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----+-----------------+-----------+------+---------+------+------------------------+------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                  | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----+-----------------+-----------+------+---------+------+------------------------+------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|  </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">event_scheduler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Daemon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |  </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">139</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Waiting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> empty</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|  </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   |    </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                   | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> processlist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">+----+-----------------+-----------+------+---------+------+------------------------+------------------+</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> warning</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (0.00 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>id：线程ID，可以使用 <code>kill xx;</code></li><li>user：启动这个线程的用户</li><li>Host：发送请求的客户端的IP和端口号</li><li>db：当前命令在哪个库执行</li><li>Command：该线程正在执行的操作命令 <ul><li>Create DB：正在创建库操作</li><li>Drop DB：正在删除库操作</li><li>Execute：正在执行一个PreparedStatement</li><li>Close Stmt：正在关闭一个PreparedStatement</li><li>Query：正在执行一个语句</li><li>Sleep：正在等待客户端发送语句</li><li>Quit：正在退出</li><li>Shutdown：正在关闭服务器</li></ul></li><li>Time：表示该线程处于当前状态的时间，单位是秒</li><li>State：线程状态 <ul><li>Updating：正在搜索匹配记录，进行修改</li><li>Sleeping：正在等待客户端发送新请求</li><li>Starting：正在执行请求处理</li><li>Checking table：正在检查数据表</li><li>Closing table : 正在将表中数据刷新到磁盘中</li><li>Locked：被其他查询锁住了记录</li><li>Sending Data：正在处理Select查询，同时将结果发送给客户端</li></ul></li><li>Info：一般记录线程执行的语句，默认显示前100个字符。想查看完整的使用<code>show full processlist;</code></li></ul><p>更多信息参照：<a href="https://dev.mysql.com/doc/refman/8.0/en/show-processlist.html" target="_blank" rel="noopener noreferrer">MySQL8 show-processlist</a></p><h3 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h3><p>如果开启了查询缓存且在查询缓存过程中查询到完全相同的SQL语句，则将查询结果直接返回给客户端；如果没有开启查询缓存或者没有查询到完全相同的 SQL 语句则会由解析器进行语法语义解析，并生成“解析树”。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%query_cache%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看查询缓存是否启用，空间大小，限制等</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Qcache%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看更详细的缓存参数，可用缓存空间，缓存块，缓存多少等</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GLOBAL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> query_cache_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEMAND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 不建议使用查询缓存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以在 MySQL 的配置文件（通常是 <code>my.cnf</code> 或 <code>my.ini</code>）中设置：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mysqld]  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">query_cache_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEMAND</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">MySQL缓存的作用和注意事项</p><ul><li>缓存Select查询的结果和SQL语句</li><li>执行Select查询时，先查询缓存，判断是否存在可用的记录集，要求是否完全相同（包括参数值），这样才会匹配缓存数据命中。</li><li>即使开启查询缓存，以下情形也不能缓存 <ul><li>查询语句使用<code>SQL_NO_CACHE</code></li><li>查询的结果大于 <code>query_cache_limit</code>设置</li><li>查询中有一些不确定的参数，比如<code>now()</code></li></ul></li></ul></div><p>注意，MySQL 8.0 版本直接将查询缓存的整块功能删掉了。</p><div class="hint-container warning"><p class="hint-container-title">为什么 MySQL8.0 版本中移除了查询缓存功能</p><p>查询缓存的初衷是通过缓存完整的 SQL 查询结果来加速相同查询的执行。但其设计存在以下问题：</p><h4 id="_1-缓存粒度过大" tabindex="-1"><a class="header-anchor" href="#_1-缓存粒度过大"><span>（1）缓存粒度过大</span></a></h4><ul><li>查询缓存存储的是<strong>完整的查询结果</strong>，对同一表的所有查询操作都没有区分更新粒度。</li><li>一旦表中的数据发生任何修改（包括 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code> 等操作），所有涉及该表的缓存结果都会失效，无论修改是否影响缓存结果。这种机制在<strong>写操作频繁</strong>的场景中使查询缓存几乎没有命中率。</li></ul><h4 id="_2-缓存命中率低" tabindex="-1"><a class="header-anchor" href="#_2-缓存命中率低"><span>（2）缓存命中率低</span></a></h4><ul><li>查询缓存只能命中完全相同的 SQL 查询（包括大小写、空格等细微差异）。</li><li>如果查询带有动态条件（如时间戳或随机数），几乎不可能命中缓存。</li></ul><h4 id="_3-更新和维护开销高" tabindex="-1"><a class="header-anchor" href="#_3-更新和维护开销高"><span>（3）更新和维护开销高</span></a></h4><ul><li>查询缓存不仅需要占用内存，且需要在每次表更新时对相关缓存条目进行清理，这会引入额外的锁开销。</li><li>在高并发写入场景中，频繁的缓存失效和清理操作会导致严重的性能瓶颈。且限制了其在多核 CPU 和分布式场景下的扩展性。</li></ul><p>移除查询缓存后，推荐使用 <strong>InnoDB 缓冲池</strong> 和 <strong>外部缓存系统（如 Redis）</strong> 来优化查询性能，以满足现代应用的需求。</p></div><h3 id="解析器和优化器" tabindex="-1"><a class="header-anchor" href="#解析器和优化器"><span>解析器和优化器</span></a></h3><p><strong>解析器（Parser）</strong> 将客户端发送的SQL进行语法解析，生成 <strong>&quot;解析树&quot;</strong>。 <mark>预处理器</mark>根据一些MySQL规则进一步检查“解析树”是否合法，例如这里将检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义，最后生成<mark>新的“解析树”</mark>。</p><p><strong>查询优化器（Optimizer）</strong> 根据“解析树”生成最优的执行计划。MySQL使用很多优化策略生成最优的执行计划，可以分为两类：静态优化（编译时优化）、动态优化（运行时优化）。</p><ul><li>等价变换策略 <ul><li>5=5 and a&gt;5 改成 a &gt; 5</li><li>a &lt; b and a=5 改成b&gt;5 and a=5</li><li>基于联合索引，调整条件位置等</li></ul></li><li>优化count、min、max等函数 <ul><li>InnoDB引擎min函数只需要找索引最左边</li><li>InnoDB引擎max函数只需要找索引最右边</li><li>MyISAM引擎count(*)，不需要计算，直接返回</li></ul></li><li>提前终止查询: 使用了limit查询，获取limit所需的数据，就不在继续遍历后面数据</li><li>in的优化: MySQL对in查询，会先进行排序，再采用二分法查找数据。比如where id in (2,1,3)，变成 in (1,2,3)</li></ul><h2 id="update流程与日志机制" tabindex="-1"><a class="header-anchor" href="#update流程与日志机制"><span>Update流程与日志机制</span></a></h2><h3 id="wal技术" tabindex="-1"><a class="header-anchor" href="#wal技术"><span>WAL技术</span></a></h3><p>缓冲池（Buffer Pool）: 是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据(若缓冲池没有数据，则从磁盘加载并缓存)，然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>如果缓存的内容更新好了，但磁盘的内容还是旧的，何时更新到磁盘呢？如何保证数据一致性呢？</p><div class="hint-container warning"><p class="hint-container-title">WAL（Write-Ahead Logging）</p><p><strong>WAL 技术：先写日志，再刷入磁盘</strong>。保证每个更新请求都是更新内存<code>Buffer Pool</code>，然后<mark>顺序写日志文件</mark>，同时还能保证各种异常情况下的数据一致性。</p><ul><li>先写日志：记录 <code>undo log</code> 和 <code>Redo Log</code>日志文件（顺序写） <ul><li>redo log称为重做日志，每当有操作时，在数据变更之前将操作写入redo log，这样当发生掉电之类的情况时系统可以在重启后继续操作。（事务的持久性）</li><li>undo log又称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。(事务的原子性)</li></ul></li><li>再刷入磁盘：将<code>Buffer Pool</code>中的脏页写入磁盘（随机写）</li></ul></div><p>为什么Mysql不能直接更新磁盘上的数据, 而设置这么一套复杂的机制来执行SQL了？</p><ul><li>InnoDB是以页为单位来进行磁盘IO的, 一个微小的更新就刷新一个完整的数据页到磁盘太浪费了</li><li>随机IO刷起来比较慢, Redo Log 的顺序写减少了随机 I/O，对传统机械硬盘性能提升显著。</li></ul><h3 id="update更新流程" tabindex="-1"><a class="header-anchor" href="#update更新流程"><span>Update更新流程</span></a></h3><p>更新语句不但需要先查询，且在更新执行流程中，<strong>日志的写入</strong>和<strong>两阶段提交机制</strong>至关重要，它们确保了事务的持久性和一致性。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><p><strong>加载数据页到缓冲池（Buffer Pool）：</strong> 根据更新条件查找目标记录。</p><ul><li>如果目标记录所在的数据页不在缓冲池中，从磁盘加载到缓冲池。</li><li>如果已经在缓冲池中，则直接操作。</li><li>目标记录所在的数据页被加锁（如行锁或间隙锁，具体取决于事务隔离级别）。</li></ul></li><li><p><strong>记录 Undo Log（用于回滚和 MVCC）：</strong> 在对记录进行更新之前，生成 Undo Log 并存储在<strong>回滚段</strong>中，记录被修改前的旧值。Undo Log 用于支持 <code>事务回滚（回退到原始状态）</code> 和 <code>多版本并发控制（MVCC）的一致性读</code>。</p></li><li><p><strong>更新缓冲池中的数据：</strong> 修改缓冲池中的目标数据页，将数据标记为“脏页”（Dirty Page）。 数据尚未同步到磁盘，只是更新了内存中的缓存。</p></li><li><p><strong>记录 Redo Log（日志缓冲区）：</strong> 将更新操作写入 <strong>Redo Log Buffer</strong>（内存中的日志缓冲区），以物理日志的形式记录“对哪些数据页进行了哪些更改”。Redo Log Buffer 不会立即写入磁盘，而是由以下规则触发写入：</p><ul><li>当事务进入 <strong>Prepare 阶段</strong>。</li><li>当 Redo Log Buffer 的使用量达到阈值（由 <code>innodb_log_buffer_size</code> 控制）。</li><li>每秒的后台刷新（默认由 <code>innodb_flush_log_at_trx_commit</code> 参数控制）。</li></ul></li><li><p><strong>Redo Log 的 Prepare 阶段：</strong> Redo Log Buffer 的内容被<strong>顺序写入磁盘（Redo Log 文件）</strong>，并标记为“Prepare”状态。 此阶段的关键点：</p><ul><li><strong>确保数据的持久性</strong>：一旦系统崩溃，Redo Log 中的记录可以用来恢复到 Prepare 阶段的状态。</li><li>事务尚未提交，对外仍不可见。</li></ul></li><li><p><strong>记录 Binlog（逻辑日志）：</strong> Server 层生成 Binlog 日志（逻辑日志），记录 SQL 语句的操作。 Binlog 被写入 Binlog Buffer（日志缓冲区），然后按照事务提交时的策略（<code>sync_binlog</code> 参数）决定是否同步到磁盘。</p><ul><li><code>sync_binlog=1</code>：每次事务提交时将 Binlog 从缓冲区刷到磁盘，确保持久性。</li><li><code>sync_binlog&gt;1</code>：延迟同步，可能丢失部分 Binlog。</li></ul></li><li><p><strong>Redo Log 的 Commit 阶段：</strong> 事务进入 Commit 阶段，Redo Log 文件中写入一个<strong>Commit 标记</strong>。Commit 标记表示事务提交完成，数据对外可见。Redo Log 的 Commit 标记同步到磁盘后，事务才算真正完成。</p></li><li><p><strong>数据最终写入磁盘（刷脏页）：</strong> 更新操作只修改缓冲池中的数据页，实际数据页的写入由后台线程完成（异步操作）。 脏页刷盘的触发条件：</p><ul><li>缓冲池使用率达到阈值（由 <code>innodb_max_dirty_pages_pct</code> 控制）。</li><li>Redo Log 的空间不足。</li><li>手动触发（如执行 <code>FLUSH</code> 操作）。</li></ul></li></ol><h3 id="两阶段提交-内部xa" tabindex="-1"><a class="header-anchor" href="#两阶段提交-内部xa"><span>两阶段提交(内部XA)</span></a></h3><p>两阶段提交（2PC）在 Redo Log 和 Binlog 的协调中起到核心作用，确保两者一致性。</p><ol><li><strong>Prepare 阶段：</strong> Redo Log 的 Prepare 状态在 Binlog 写入之前完成。 即使系统崩溃，只要有 Redo Log 的 Prepare 日志，数据仍可以恢复到一致性状态。</li></ol><div class="hint-container important"><p class="hint-container-title">XA事务--extra disk flush for transaction preparation</p><p>MySQL官方文档明确指出了在 XA 事务的两阶段提交过程中，prepare 阶段也会涉及到磁盘刷新操作。详见：<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_support_xa" target="_blank" rel="noopener noreferrer">innodb_support_xa</a></p><p>禁用 <code>innodb_support_xa</code> 可能会导致复制不安全，因此MySQL禁止了与二进制日志组提交相关的性能提升，这也是为什么从 MySQL 5.7.10 版本开始，这个功能始终是开启的，不允许再禁用。</p></div><ol start="2"><li><p><strong>Binlog 写入：</strong> Binlog 写入成功后，再进入 Redo Log 的 Commit 阶段。 确保 Binlog 和 Redo Log 的位置（LSN）一致。</p></li><li><p><strong>Commit 阶段：</strong> Redo Log 写入 Commit 标记，表示事务完成。 若系统崩溃后只找到 Prepare 状态的 Redo Log，事务会被回滚（保证一致性）。</p></li></ol><div class="hint-container info"><p class="hint-container-title">Redo Log -- 崩溃恢复（自动恢复机制）</p><p>MySQL 的恢复过程是完全自动的，发生在实例启动时（启动时崩溃恢复）：</p><ul><li>MySQL 检查 InnoDB 的事务日志（Redo Log）和 Server 层的 Binlog。</li><li>根据 Redo Log 的 <strong>Prepare</strong> 和 <strong>Commit</strong> 状态确定事务的完成情况。</li><li>未提交的事务会被回滚，已提交的事务会通过重放日志恢复。</li></ul><h4 id="_1-事务未完成-未提交" tabindex="-1"><a class="header-anchor" href="#_1-事务未完成-未提交"><span><strong>（1）事务未完成（未提交）：</strong></span></a></h4><p>如果事务在 <strong>Commit 阶段之前</strong>（Redo Log 还处于 <strong>Prepare 状态</strong>），MySQL 会自动回滚该事务：使用 <strong>Undo Log</strong> 回滚事务，将数据恢复到事务开始之前的状态。</p><h4 id="_2-事务已提交" tabindex="-1"><a class="header-anchor" href="#_2-事务已提交"><span><strong>（2）事务已提交：</strong></span></a></h4><p>如果事务已经完成 <strong>Commit 阶段</strong>（Redo Log 有 <strong>Commit 标记</strong>），但尚未将数据页刷回磁盘，MySQL 会通过 <strong>Redo Log</strong> 自动重做事务：通过读取 Redo Log，将事务对应的数据修改重新应用到数据页（即使数据页尚未写入磁盘）。</p><h4 id="_3-结合-binlog-和-redo-log-的一致性恢复" tabindex="-1"><a class="header-anchor" href="#_3-结合-binlog-和-redo-log-的一致性恢复"><span><strong>（3）结合 Binlog 和 Redo Log 的一致性恢复：</strong></span></a></h4><p>对于绝大多数场景，恢复过程是全自动的，但建议定期备份数据以应对极端情况。</p></div><p><strong>关键参数的提示和优化</strong></p><ol><li><p><strong><code>innodb_flush_log_at_trx_commit</code>：</strong> 控制 Redo Log 的刷盘策略：</p><ul><li><code>1</code>：每次事务提交时刷盘，提供最高的数据安全性。</li><li><code>0</code>：不实时刷盘，性能高但可能丢失数据。</li><li><code>2</code>：事务提交时写入 OS 缓冲区，定时刷盘。</li></ul></li><li><p><strong><code>sync_binlog</code>：</strong> 控制 Binlog 的刷盘策略：</p><ul><li><code>1</code>：每次事务提交时同步到磁盘，确保 Binlog 的持久性。</li><li>较大的值（如 <code>100</code>）可以提高性能，但可能丢失最近的事务日志。</li></ul></li><li><p><strong><code>innodb_log_buffer_size</code>：</strong> 增大日志缓冲区可以减少磁盘 I/O，但过大可能浪费内存。</p></li></ol><div class="hint-container warning"><p class="hint-container-title">总结</p><ul><li><strong>MySQL 自动恢复数据</strong>：当机器断电或崩溃时，MySQL 会根据 <strong>Redo Log</strong> 和 <strong>Binlog</strong> 自动恢复事务，确保数据一致性和持久性。</li><li><strong>两阶段提交保障一致性</strong>：通过两阶段提交机制，确保 Redo Log 和 Binlog 的一致性，无需手动介入。</li><li><strong>建议启用安全参数</strong>：如 <code>innodb_flush_log_at_trx_commit=1</code> 和 <code>sync_binlog=1</code>，以最大程度减少数据丢失风险。</li></ul></div><h3 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>Redo Log</span></a></h3><p>Redo Log 是物理增量日志，核心在于持久性、性能优化和崩溃恢复。</p><ul><li><strong>持久性保证（Durability）：</strong> 确保事务的修改在提交前已写入日志，即使系统崩溃也能恢复。</li><li><strong>崩溃恢复：</strong> 万一断电或者数据库挂了，在重启时根据redo日志中的记录就可以将数据自动恢复。</li></ul><div class="hint-container important"><p class="hint-container-title">Redo Log 文件</p><ul><li><strong>日志条目结构：</strong> 包括事务 ID、数据页编号、页偏移量、修改内容等信息。</li><li><strong>文件组成：</strong> Redo Log 由多个日志文件组成（如 <code>ib_logfile0</code>、<code>ib_logfile1</code>，默认为 2 个, 位于 MySQL 数据目录中），以环形方式写入</li></ul><figure><img src="https://image.ventix.top/img02/20220117040655928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>write pos（写入位置）表示当前日志写入的位置。随着事务执行，write pos 向前移动。</li><li>只有对应日志刷入数据文件（即数据页写入磁盘）后，checkpoint 才能推进。</li></ul><p>如果 write pos 追上了 checkpoint，说明环形日志空间已满，MySQL 暂时停止写入。此时应该推进 checkpoint，擦除已刷入磁盘的数据日志，释放更多空间。</p></div><p>从 MySQL 8.0 开始，Redo Log 文件有所变化：<code>/var/lib/mysql/&#39;#innodb_redo&#39;/&#39;#ib_redo13&#39;</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%innodb_log_group_home_dir%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./ 数据目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SHOW</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VARIABLES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LIKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;datadir&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  datadir  /var/lib/mysql/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="相关参数及作用" tabindex="-1"><a class="header-anchor" href="#相关参数及作用"><span><strong>相关参数及作用</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%innodb_log_file_size%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%innodb_log_files_in_group%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>参数</strong></th><th><strong>作用</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td><code>innodb_log_file_size</code></td><td>每个 Redo Log 文件的大小，影响日志循环频率和崩溃恢复时间</td><td>48MB</td></tr><tr><td><code>innodb_log_files_in_group</code></td><td>Redo Log 文件的数量，默认 2 个，组成环形日志组</td><td>2</td></tr><tr><td><code>innodb_log_buffer_size</code></td><td>Redo Log Buffer 的大小，较大的值减少刷盘频率（适合高事务量场景）</td><td>16MB</td></tr><tr><td><code>innodb_flush_log_at_trx_commit</code></td><td>控制事务提交时日志刷盘的策略</td><td>1</td></tr><tr><td><code>innodb_flush_method</code></td><td>控制日志和数据文件刷盘方式：如 <code>O_DIRECT</code>（跳过文件系统缓存）、<code>fsync</code>（默认）。</td><td><code>fsync</code></td></tr></tbody></table><p>Redo Log刷盘时机由<code>innodb_flush_log_at_trx_commit</code>参数控制，详见：<a href="https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit" target="_blank" rel="noopener noreferrer">innodb-parameters</a></p><p>这里的<mark>刷盘</mark>指的是<code>Redo Buffer -&gt; OS cache -&gt; flush cache to disk</code>，<code>fsync()</code> 的作用就是强制将内核缓冲区中的数据写入到磁盘</p><ul><li>1（default）: 每次事务提交都执行刷盘，最安全，性能最差的方式</li><li>0：每秒执行一次刷盘，可能丢失一秒内的事务数据</li><li>2：每次事务提交执行 <code>Redo Buffer -&gt; OS cache</code>，由后台Master线程每隔1秒调用<code>fsync()</code></li></ul><div class="hint-container tip"><p class="hint-container-title">刷盘机制相关的性能优化</p><ol><li><strong>参数调优：</strong><ul><li>增大 <code>innodb_log_file_size</code> 和 <code>innodb_log_buffer_size</code>，减少日志切换和刷盘频率。</li><li>根据业务需求调整 <code>innodb_flush_log_at_trx_commit</code>（如设置为 <code>2</code> 提升性能）。</li></ul></li><li><strong>硬件优化：</strong><ul><li>使用高速存储设备（如 NVMe SSD）提升刷盘速度。</li><li>为日志存储独立分区，避免与数据文件竞争 I/O。</li></ul></li><li><strong>批量事务：</strong> 合并多个小事务为一个大事务，降低日志写入频率。</li></ol></div><h3 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog"><span>Binlog</span></a></h3><p>Binary log（二进制日志），简称Binlog（MySQL Server自己的日志）。Binlog是记录所有数据库<mark>表结构变更</mark>以及<mark>表数据修改</mark>的<strong>二进制日志</strong>，不会记录SELECT和SHOW这类操作。Binlog日志是以<strong>事件形式</strong>记录，还包含语句所执行的消耗时间。开启Binlog日志有以下两个最重要的使用场景。</p><ul><li>主从复制：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到Binlog后实现数据恢复达到主从数据一致性。</li><li>数据恢复：通过<code>mysqlbinlog</code>工具来恢复数据。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> variables</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;log_bin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Binlog状态查看</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binary</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Binlog开启后可以查看有多少binlog文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL5.7 版本中Binlog默认是关闭的，8.0版本默认是开启的。开启Binlog需要修改<code>my.cnf</code>或<code>my.ini</code>配置文件，然后重启MySQL服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">log_bin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/var/lib/mysql/mysql-binlog</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">binlog-format</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ROW</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server-id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expire_logs_days</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 Binlog 后，默认可以在数据目录查看到具体的 Binlog 文件：<code>ls /var/lib/mysql/</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">topple@Ubuntu22:~$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /docker/mysql/mysql5.7/data/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">auto.cnf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         client-key.pem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ib_logfile1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql-bin.000001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql-binlog.000001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  private_key.pem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  sys</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ca-key.pem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       demo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ibdata1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      mysql-bin.000002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql-binlog.index</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   public_key.pem</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ca.pem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           ib_buffer_pool</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ibtmp1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       mysql-bin.000003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql.sock</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           server-cert.pem</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">client-cert.pem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ib_logfile0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     mysql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        mysql-bin.index</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   performance_schema</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   server-key.pem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发生以下任何事件时, binlog日志文件会重新生成：</p><ul><li>服务器启动或重新启动</li><li>服务器刷新日志，执行命令<code>flush logs</code></li><li>日志文件大小达到 <code>max_binlog_size</code> 值，默认值为 1GB</li></ul><div class="hint-container info"><p class="hint-container-title">binlog-format（Binlog文件格式）</p><p><code>binlog_format</code> 参数可以设置binlog日志的记录格式，详见：<a href="https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_binlog_format" target="_blank" rel="noopener noreferrer">binlog_format</a></p><ul><li>ROW（row-based replication, RBR）：日志中会记录每一行数据被修改的情况，然后在slave端对相同的数据进行修改。<br> 优点：能清楚记录每一个行数据的修改细节，能完全实现主从数据同步和数据的恢复。<br> 缺点：批量操作，会产生大量的日志，尤其是alter table会让日志暴涨。</li><li>STATMENT（statement-based replication, SBR）：每一条被修改数据的SQL都会记录到master的Binlog中，slave在复制的时候SQL进程会解析成和原来master端执行过的相同的SQL再次执行。简称SQL语句复制。<br> 优点：日志量小，减少磁盘IO，提升存储和恢复速度<br> 缺点：在某些情况下会导致主从数据不一致，比如last_insert_id()、now()等函数。</li><li>MIXED（mixed-based replication, MBR）：以上两种模式的混合使用，一般会使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择写入模式。</li></ul></div><p>该参数在MySQL5.7.7默认值为<code>STATEMENT</code>. MySQL5.7.7及以后默认值为 <code>ROW</code>. 8.0.34中被弃用，未来可能会移除，默认使用<code>ROW</code></p><div class="hint-container important"><p class="hint-container-title">sync_binlog（Binlog刷盘机制）</p><ul><li>0(default): 表示每次提交事务都只 write 到 <code>page cache</code>，由系统自行判断什么时候执行 <code>fsync</code> 写入磁盘。虽然性能得到提升，但是机器宕机，<code>page cache</code>里面的 binlog 会丢失。</li><li>1：表示每次提交事务都会执行 <code>fsync</code> 写入磁盘，这种方式最安全。</li><li>N(N&gt;1)：表示每次提交事务都 write 到<code>page cache</code>，但累积N个事务后才 <code>fsync</code> 写入磁盘，这种如果机器宕机会丢失N个事务的binlog。</li></ul></div>`,102)),i("p",null,[l[1]||(l[1]=s("关于MySQL的Binlog文件操作和数据恢复参照：")),h(d,{to:"/posts/db/mysql-binlog.html"},{default:e(()=>l[0]||(l[0]=[s("mysqlbinlog")])),_:1})]),l[15]||(l[15]=t('<h2 id="mysql日志管理" tabindex="-1"><a class="header-anchor" href="#mysql日志管理"><span>MySQL日志管理</span></a></h2><p>MySQL 中的日志是数据库管理和故障恢复的重要组成部分。包括二进制日志（Binary Log）、重做日志（Redo Log）、回滚日志（Undo Log）等。</p><ul><li><strong>二进制日志（Binary Log）</strong>：记录所有更改操作，用于数据恢复和主从复制。</li><li><strong>重做日志（Redo Log）</strong>：记录事务的更改，用于事务持久性和崩溃恢复。</li><li><strong>回滚日志（Undo Log）</strong>：记录事务开始时的数据快照，用于事务回滚和MVCC(多版本并发控制)</li><li><strong>错误日志（Error Log）</strong>：记录服务器的错误和警告信息。</li><li><strong>慢查询日志（Slow Query Log）</strong>：记录执行时间超过阈值的查询语句。</li><li><strong>查询日志（General Query Log）</strong>：记录所有客户端发送的查询语句。</li></ul>',3)),h(o,{id:"1254",data:[{id:"BinLog"},{id:"Redo Log"},{id:"Undo Log"},{id:"错误日志"},{id:"慢查询日志"},{id:"查询日志"}],active:2},{title0:e(({value:a,isActive:n})=>l[2]||(l[2]=[s("BinLog")])),title1:e(({value:a,isActive:n})=>l[3]||(l[3]=[s("Redo Log")])),title2:e(({value:a,isActive:n})=>l[4]||(l[4]=[s("Undo Log")])),title3:e(({value:a,isActive:n})=>l[5]||(l[5]=[s("错误日志")])),title4:e(({value:a,isActive:n})=>l[6]||(l[6]=[s("慢查询日志")])),title5:e(({value:a,isActive:n})=>l[7]||(l[7]=[s("查询日志")])),tab0:e(({value:a,isActive:n})=>l[8]||(l[8]=[i("p",null,[s("二进制日志记录了所有对数据库的更改操作，包括数据修改（如 "),i("code",null,"INSERT"),s("、"),i("code",null,"UPDATE"),s("、"),i("code",null,"DELETE"),s("）和结构修改（如 "),i("code",null,"CREATE"),s("、"),i("code",null,"ALTER"),s("）。这些日志以二进制格式存储，主要用于数据恢复、主从复制和审计。")],-1),i("p",null,[s("在 MySQL 配置文件（通常是 "),i("code",null,"my.cnf"),s(" 或 "),i("code",null,"my.ini"),s("）中启用二进制日志：")],-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"log_bin"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," /path/to/binlog/mysql-bin.log")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"server_id"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 1")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,[i("strong",null,"清除旧的二进制日志"),s("：")],-1),i("div",{class:"language-sql line-numbers-mode","data-highlighter":"shiki","data-ext":"sql","data-title":"sql",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"PURGE "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"BINARY"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," LOGS "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"TO"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'mysql-bin.000005'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"PURGE "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"BINARY"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," LOGS "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"BEFORE"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," '2023-10-01 00:00:00'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:e(({value:a,isActive:n})=>l[9]||(l[9]=[i("p",null,"重做日志是 InnoDB 存储引擎特有的日志，用于实现事务的持久性和崩溃恢复。每次事务提交时，InnoDB 会将事务的更改记录到重做日志中。如果数据库发生崩溃，可以通过重做日志恢复未完成的事务。",-1),i("p",null,"重做日志的配置参数包括日志文件的数量和大小：",-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"innodb_log_file_size"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 512M")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"innodb_log_files_in_group"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 2")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,[i("strong",null,"初始化或更改重做日志大小"),s("：需要先关闭 MySQL 服务，删除现有的重做日志文件，然后重新启动 MySQL 服务。")],-1),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"systemctl"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," stop"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," mysql")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"rm"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -f"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," /var/lib/mysql/ib_logfile"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"*")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"systemctl"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," start"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," mysql")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab2:e(({value:a,isActive:n})=>l[10]||(l[10]=[i("p",null,"回滚日志也是 InnoDB 存储引擎特有的日志，用于实现事务的回滚和多版本并发控制（MVCC）。每个事务开始时，InnoDB 会记录事务开始时的数据快照，以便在事务回滚或读取历史版本数据时使用。回滚日志的配置参数包括日志段的数量和大小：",-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"innodb_undo_tablespaces"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 2")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"innodb_undo_logs"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 128")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,[i("strong",null,"回滚日志的空间管理"),s("：长时间运行的事务可能会导致回滚日志空间占用过大，可以通过调整 "),i("code",null,"innodb_max_undo_log_size"),s(" 参数来控制最大回滚日志大小。")],-1),i("p",null,null,-1)])),tab3:e(({value:a,isActive:n})=>l[11]||(l[11]=[i("p",null,"错误日志记录了 MySQL 服务器的错误信息、警告信息和启动信息。这些信息对于诊断和解决数据库问题非常有用。",-1),i("p",null,"在 MySQL 配置文件中启用错误日志：",-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"log_error"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," /path/to/error.log")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("ul",null,[i("li",null,[i("strong",null,"查看错误日志"),s("："),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"cat"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," /path/to/error.log")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"show"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," variables"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," like"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," '%log_error%'")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])])],-1)])),tab4:e(({value:a,isActive:n})=>l[12]||(l[12]=[i("p",null,"慢查询日志记录了执行时间超过指定阈值的查询语句。这些日志有助于识别和优化性能瓶颈。",-1),i("p",null,"在 MySQL 配置文件中启用慢查询日志：",-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"slow_query_log"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 1")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"slow_query_log_file"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," /path/to/slow-query.log")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"long_query_time"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 2")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("ul",null,[i("li",null,[i("p",null,[i("strong",null,"查看慢查询日志"),s("：")]),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"show"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," variables"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," like"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," '%slow_query%'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";       "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 是否开启")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"show"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," variables"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," like"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," '%long_query_time%'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";  "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 时长")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"cat"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," /path/to/slow-query.log")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])]),i("li",null,[i("p",null,[i("strong",null,"动态启用或禁用慢查询日志"),s("：")]),i("div",{class:"language-sql line-numbers-mode","data-highlighter":"shiki","data-ext":"sql","data-title":"sql",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"SET"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," GLOBAL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," slow_query_log "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'ON'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"SET"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," GLOBAL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," slow_query_log "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'OFF'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])])])],-1)])),tab5:e(({value:a,isActive:n})=>l[13]||(l[13]=[i("p",null,"查询日志记录了所有客户端发送到服务器的查询语句。这些日志对于调试和审计非常有用。",-1),i("p",null,"在 MySQL 配置文件中启用查询日志：",-1),i("div",{class:"language-ini line-numbers-mode","data-highlighter":"shiki","data-ext":"ini","data-title":"ini",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"[mysqld]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"general_log"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," 1")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#C678DD"}},"general_log_file"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ="),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#98C379"}}," /path/to/general-query.log")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("ul",null,[i("li",null,[i("p",null,[i("strong",null,"查看查询日志"),s("：")]),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"cat"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," /path/to/general-query.log")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("p",null,[i("strong",null,"动态启用或禁用查询日志"),s("：")]),i("div",{class:"language-sql line-numbers-mode","data-highlighter":"shiki","data-ext":"sql","data-title":"sql",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"SET"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," GLOBAL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," general_log "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'ON'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"SET"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," GLOBAL"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," general_log "),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'OFF'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"show variables "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"like"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," '%general%'"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])])],-1)])),_:1})])}const m=k(c,[["render",y],["__file","Architecture.html.vue"]]),F=JSON.parse('{"path":"/java/database/db/Architecture.html","title":"MySQL体系架构","lang":"en-US","frontmatter":{"order":10,"title":"MySQL体系架构","description":"MySQL体系架构 MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。 Connectors：与MySQL服务器建立连接。目前几乎支持所有主流的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接 MySQL Server：服务层是MySQL的核心，主要包...","head":[["meta",{"property":"og:url","content":"https://x.app/java/database/db/Architecture.html"}],["meta",{"property":"og:site_name","content":"ventix"}],["meta",{"property":"og:title","content":"MySQL体系架构"}],["meta",{"property":"og:description","content":"MySQL体系架构 MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。 Connectors：与MySQL服务器建立连接。目前几乎支持所有主流的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接 MySQL Server：服务层是MySQL的核心，主要包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.ventix.top/img02/mysql-architecture.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-19T15:33:28.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-19T15:33:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL体系架构\\",\\"image\\":[\\"https://image.ventix.top/img02/mysql-architecture.png\\",\\"https://dev.mysql.com/doc/refman/5.7/en/images/innodb-architecture-5-7.png\\",\\"https://image.ventix.top/img02/20220118130345103.png\\",\\"https://image.ventix.top/img02/20220115174918720.png\\",\\"https://image.ventix.top/img02/20220117040655928.png\\"],\\"dateModified\\":\\"2025-01-19T15:33:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"MySQL体系架构","slug":"mysql体系架构","link":"#mysql体系架构","children":[{"level":3,"title":"MySQL Server","slug":"mysql-server","link":"#mysql-server","children":[]},{"level":3,"title":"File System","slug":"file-system","link":"#file-system","children":[]}]},{"level":2,"title":"Innodb存储引擎","slug":"innodb存储引擎","link":"#innodb存储引擎","children":[{"level":3,"title":"Architecture","slug":"architecture","link":"#architecture","children":[]},{"level":3,"title":"Buffer Pool","slug":"buffer-pool","link":"#buffer-pool","children":[]},{"level":3,"title":"Change Buffer","slug":"change-buffer","link":"#change-buffer","children":[]},{"level":3,"title":"InnoDB文件存储结构","slug":"innodb文件存储结构","link":"#innodb文件存储结构","children":[]},{"level":3,"title":"InnoDB文件存储格式","slug":"innodb文件存储格式","link":"#innodb文件存储格式","children":[]},{"level":3,"title":"Tablespaces","slug":"tablespaces","link":"#tablespaces","children":[]}]},{"level":2,"title":"Select查询流程","slug":"select查询流程","link":"#select查询流程","children":[{"level":3,"title":"通讯机制与线程","slug":"通讯机制与线程","link":"#通讯机制与线程","children":[]},{"level":3,"title":"查询缓存","slug":"查询缓存","link":"#查询缓存","children":[]},{"level":3,"title":"解析器和优化器","slug":"解析器和优化器","link":"#解析器和优化器","children":[]}]},{"level":2,"title":"Update流程与日志机制","slug":"update流程与日志机制","link":"#update流程与日志机制","children":[{"level":3,"title":"WAL技术","slug":"wal技术","link":"#wal技术","children":[]},{"level":3,"title":"Update更新流程","slug":"update更新流程","link":"#update更新流程","children":[]},{"level":3,"title":"两阶段提交(内部XA)","slug":"两阶段提交-内部xa","link":"#两阶段提交-内部xa","children":[]},{"level":3,"title":"Redo Log","slug":"redo-log","link":"#redo-log","children":[]},{"level":3,"title":"Binlog","slug":"binlog","link":"#binlog","children":[]}]},{"level":2,"title":"MySQL日志管理","slug":"mysql日志管理","link":"#mysql日志管理","children":[]}],"git":{"createdTime":1737300808000,"updatedTime":1737300808000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":27.43,"words":8229},"filePathRelative":"java/database/db/Architecture.md","localizedDate":"January 19, 2025","excerpt":"<h2>MySQL体系架构</h2>\\n<p>MySQL Server架构自顶向下大致可以分网络连接层、服务层、存储引擎层和系统文件层。</p>\\n<ul>\\n<li>\\n<p><strong>Connectors</strong>：与MySQL服务器建立连接。目前几乎支持所有主流的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接</p>\\n</li>\\n<li>\\n<p><strong>MySQL Server</strong>：服务层是MySQL的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优化器和缓存六个部分。</p>\\n</li>\\n<li>\\n<p><strong>Pluggable Storage Engines</strong>：存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是插件式的，服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异 。现在有很多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB。在绝大多数情况下，推荐使用InnoDB</p>\\n</li>\\n<li>\\n<p><strong>File System</strong>：该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件，数据文件，配置文件，pid 文件，socket 文件等。</p>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,F as data};
