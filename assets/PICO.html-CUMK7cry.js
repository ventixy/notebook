import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as t}from"./app-D4I8j1QX.js";const n={};function l(r,i){return t(),e("div",null,i[0]||(i[0]=[a(`<p>🍓Raspberry Pi Pico 简介 参照 Pico中文站：<a href="https://pico.org.cn/" target="_blank" rel="noopener noreferrer">https://pico.org.cn/</a></p><img src="https://pico.org.cn/images/pico-r3-pinout.svg"><p>英文文档地址：<a href="https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf" target="_blank" rel="noopener noreferrer">https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf</a></p><h2 id="🍓raspberry-pi-pico" tabindex="-1"><a class="header-anchor" href="#🍓raspberry-pi-pico"><span>🍓Raspberry Pi Pico</span></a></h2><ul><li>Thonny (经典开发方式，之前官方主推的方式，性能略差)</li><li>VS code : 性能强，速度快，配置简单，但是资料较少</li></ul><p>树莓派 Pico C SDK 入门：<a href="https://geekdaxue.co/read/jacky-qa5zo@vgqebl/gmn6zsgy9cmznxbf" target="_blank" rel="noopener noreferrer">https://geekdaxue.co/read/jacky-qa5zo@vgqebl/gmn6zsgy9cmznxbf</a></p><h3 id="thonny开发方式" tabindex="-1"><a class="header-anchor" href="#thonny开发方式"><span>Thonny开发方式</span></a></h3><p>🧰 所需工具</p><table><thead><tr><th>工具</th><th>用途</th><th>下载地址/说明</th></tr></thead><tbody><tr><td><strong>CMake</strong></td><td>项目构建系统</td><td><a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">CMake</a></td></tr><tr><td><strong>GNU Arm Toolchain</strong></td><td>编译 ARM Cortex-M0+ 代码</td><td><a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="noopener noreferrer">ARM GCC compiler</a></td></tr><tr><td><strong>Pico SDK</strong></td><td>RP2040 官方开发包</td><td><a href="https://github.com/raspberrypi/pico-sdk" target="_blank" rel="noopener noreferrer">pico-sdk github</a></td></tr><tr><td><strong>Thonny / UF2 拖拽 / OpenOCD</strong></td><td>烧录工具</td><td>拖动 <code>.uf2</code> 文件最简单</td></tr></tbody></table><p>环境变量：<code>PICO_SDK_PATH</code> 指向本地SDK路径（例如/home/pi/pico/pico-sdk或Windows的D:\\RP2040\\pico-sdk）</p><p>更多经典开发方式的内容参照：<a href="https://github.com/mobyw/pico-getting-started" target="_blank" rel="noopener noreferrer">https://github.com/mobyw/pico-getting-started</a></p><hr><h3 id="vs-code-插件" tabindex="-1"><a class="header-anchor" href="#vs-code-插件"><span>VS code 插件</span></a></h3><p>VSCode的Raspberry Pi Pico插件支持一键创建项目并自动配置工具链（包括CMake和pico-sdk）。</p><ul><li>安装插件：VS code 插件市场搜索 <code>Raspberry Pi Pico</code> ，安装完成后左侧工具栏出现 <code>Raspberry Pi Pico</code> 的图标，点击即用</li><li>创建项目：点击左侧工具栏的 <code>Raspberry Pi Pico</code> 图标，选择对应的项目和需求即可</li></ul><figure><img src="https://image.ventix.top/img02/20250410183356538.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首次创建项目安装插件时，工具链（如CMake、交叉编译器）和SDK会被下载到本地固定路径（用户目录下的 <code>.pico-sdk</code> 或自定义路径）。后续新建项目时，插件会直接引用本地已存在的文件，无需重复下载</p><div class="hint-container info"><p class="hint-container-title">安装驱动（Zadig）</p><p>Raspberry Pi Pico 驱动问题解决方案：使用 Zadig 工具安装正确的驱动程序：</p><ol><li><p>下载 Zadig 工具：<a href="https://zadig.akeo.ie/" target="_blank" rel="noopener noreferrer">https://zadig.akeo.ie/</a></p></li><li><p>确保您的 Pico 处于 BOOTSEL 模式（按住 BOOTSEL 按钮的同时连接 USB）</p></li><li><p>运行 Zadig 工具</p></li><li><p>在 Zadig 中：</p><ul><li>从设备列表中选择您的 RP2040 设备（可能显示为 &quot;RP2 Boot&quot; 或类似名称）</li><li>如果没有看到设备，请在 Options 菜单中选择 &quot;List All Devices&quot;</li><li>在驱动选项中选择 &quot;WinUSB&quot;</li><li>点击 &quot;Install Driver&quot; 或 &quot;Replace Driver&quot;</li></ul></li><li><p>安装完成后，断开并重新连接您的 Pico（保持在 BOOTSEL 模式）</p></li></ol></div><p>更多相关内容参照：<a href="https://www.raspberrypi.com/news/get-started-with-raspberry-pi-pico-series-and-vs-code/" target="_blank" rel="noopener noreferrer">Get started with Raspberry Pi Pico-series and VS Code</a></p><hr><h3 id="cmakelists-txt" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt"><span>CmakeLists.txt</span></a></h3><p><code>CMakeLists.txt</code> 是 <strong>CMake 构建系统的核心配置文件</strong>，用于定义如何编译、链接和生成 RP2040 Pico 的固件。它指定了：</p><ul><li>源代码文件</li><li>依赖库（如 Pico SDK）</li><li>编译选项</li><li>目标输出（UF2、ELF、BIN 等）</li></ul><hr><p><span style="color:#1E90FF;"><strong>1 CMake 基础配置</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能：指定 CMake 的最低版本要求（Pico SDK 需要 ≥3.12）。</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$ENV{PICO_SDK_PATH}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/external/pico_sdk_import.cmake)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能：导入 Pico SDK 的 CMake 配置。<br> 关键变量：<code>PICO_SDK_PATH</code> 是环境变量，需指向 Pico SDK 的安装路径（如 <code>~/pico-sdk</code>）。</p><hr><p><span style="color:#1E90FF;"><strong>2 项目定义（项目名称和支持的语言）</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_pico_project C CXX ASM)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能：定义项目名称和支持的语言（C、C++、汇编）。</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CMAKE_C_STANDARD 11)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CMAKE_CXX_STANDARD 17)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>功能：设置 C/C++ 语言标准。</p><hr><p><span style="color:#1E90FF;"><strong>3 初始化 Pico SDK</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pico_sdk_init()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>功能：初始化 Pico SDK，加载必要的工具链和编译选项。</p><hr><p><span style="color:#1E90FF;"><strong>4 添加可执行文件</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_pico_project</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    src/main.c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    src/my_code.c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>功能</strong>：定义可执行文件的名称和源代码文件列表。</li><li><strong>路径说明</strong>：通常源代码放在 <code>src/</code> 目录下。</li></ul><hr><p><span style="color:#1E90FF;"><strong>5 链接 Pico 库</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_pico_project</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    pico_stdlib</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    hardware_gpio</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    hardware_uart</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>功能</strong>：链接 Pico SDK 的库： <ul><li><code>pico_stdlib</code>：标准库（必需）。</li><li><code>hardware_*</code>：硬件驱动库（如 GPIO、UART、I2C 等）。</li></ul></li><li><strong>扩展</strong>：根据需求添加其他库（如 <code>pico_multicore</code> 用于多核编程）。</li></ul><hr><p><span style="color:#1E90FF;"><strong>6 生成 UF2 文件</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pico_add_extra_outputs(my_pico_project)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>功能</strong>：生成 <code>.uf2</code> 文件（用于拖拽烧录到 Pico）和 <code>.hex</code>/<code>.bin</code> 文件。</li></ul><hr><p><span style="color:#1E90FF;"><strong>7 其他常见配置</strong></span></p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启用 USB 输出（用于调试）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pico_enable_stdio_usb(my_pico_project 1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启用 UART 输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pico_enable_stdio_uart(my_pico_project 1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自定义编译选项</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_compile_definitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_pico_project PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    MY_CONFIG=1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>关键 CMake 函数详解</strong></p><table><thead><tr><th>函数/指令</th><th>作用</th></tr></thead><tbody><tr><td><code>pico_sdk_init()</code></td><td>初始化 Pico SDK，必须调用。</td></tr><tr><td><code>pico_add_extra_outputs</code></td><td>生成 UF2/BIN/HEX 文件。</td></tr><tr><td><code>pico_enable_stdio_*</code></td><td>启用调试输出（USB/UART）。</td></tr><tr><td><code>target_link_libraries</code></td><td>链接硬件库（如 <code>hardware_i2c</code>）。</td></tr><tr><td><code>target_include_directories</code></td><td>添加头文件搜索路径（如自定义库）。</td></tr></tbody></table><hr><div class="hint-container info"><p class="hint-container-title">常见问题</p><p><strong>Q1: 如何修改 UF2 文件名？</strong></p><ul><li>在 <code>project()</code> 中定义的名称会作为 UF2 文件名。</li></ul><p><strong>Q2: 如何添加汇编文件？</strong></p><ul><li>在 <code>add_executable</code> 中直接添加 <code>.S</code> 或 <code>.s</code> 文件：<div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_project src/startup.S)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>Q3: 如何减少代码大小？</strong></p><ul><li>链接时优化：<div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_project pico_stdlib -flto)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></div><hr><h2 id="📁pico模拟键鼠项目" tabindex="-1"><a class="header-anchor" href="#📁pico模拟键鼠项目"><span>📁Pico模拟键鼠项目</span></a></h2><p>目标：</p><blockquote><p>✅ <strong>使用 C++ 开发 RP2040 的 HID 键鼠模拟器</strong> （单个开发板模拟一个键盘或一个鼠标）<br> 需要做到和真实键鼠一样的报文发送, 兼顾防检测，人工鼠标轨迹等<br> ✅ <strong>最终由 Python 脚本实时控制模拟键鼠</strong><br> ✅ <strong>考虑动态控制 HID 报文，甚至修改 PID</strong></p></blockquote><details class="hint-container details"><summary>pico模拟键鼠项目</summary><p>当前项目是一个使用VSCode的Raspberry Pi Pico插件创建的项目，参照下面的信息完成项目：</p><p>注意：tusb_config.h 这个文件是必需的，因为它告诉 TinyUSB 库你的项目需要启用哪些 USB 功能（比如 CDC、HID）、设备的 VID/PID 是多少、有多少个接口等等。</p><p>实现目标：<br> 使用pico模拟一个仿真的键鼠设备（可配置VID/PID等信息），就键鼠方面使用一个接口模拟键盘，一个接口模拟相对鼠标，鼠标要在设备中实现贝塞尔曲线模拟人工轨迹。一个接口模拟相对鼠标，实现瞬间精准定位到指定坐标位置。并可以在同一台电脑上使用CDC进行控制键鼠，键盘等要具备全键信息。总之要尽可能模拟真实设备行为。</p><p>键鼠实现思路：<br> 我有一些简单的实现思路供你参考，可以看tinyusb是否维护了按键状态，如果没有，可以自己在固件维护一个按键状态信息和是否有变化的信息，以此来模拟真实键盘的实现，同时维护一个待发送缓冲区，启用一个线程/任务来按照真实键盘的频率扫描按键是否有变化来更新待发送缓冲区和是否有变化的信息。鼠标的实现同样参照真实鼠标的实现。</p><ul><li>相对鼠标</li><li>绝对鼠标</li></ul><p>示例代码要求：<br> 给出python进行控制的使用示例代码，在demo目录下实现: pico.py中实现控制主要的代码，test.py中实现使用示例代码</p></details><hr><p>📦 开源项目推荐（可借鉴）</p><ul><li><a href="https://github.com/hathach/tinyusb/tree/master/examples/device/hid_composite" target="_blank" rel="noopener noreferrer">tinyusb/hid_composite</a></li><li><a href="https://github.com/MHeironimus/ArduinoJoystickLibrary" target="_blank" rel="noopener noreferrer">rp2040-hid-joystick</a></li></ul><hr><p>🔥 实战部署流程（简化步骤）</p><table><thead><tr><th>步骤</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>1️⃣</td><td>克隆 Pico SDK 和 TinyUSB</td><td>并设置为 <code>git submodule</code></td></tr><tr><td>2️⃣</td><td>写好 <code>main.cpp</code> 和控制协议</td><td>参考我提供的框架</td></tr><tr><td>3️⃣</td><td>构建工程（用 CMake）</td><td>生成 <code>.uf2</code> 固件</td></tr><tr><td>4️⃣</td><td>将 RP2040 插入 BOOT 模式</td><td>按住 BOOTSEL 插电</td></tr><tr><td>5️⃣</td><td>拖动 <code>.uf2</code> 文件进 RP2040</td><td>烧录完成，模拟键鼠就工作了</td></tr><tr><td>6️⃣</td><td>用 Python 控制串口</td><td>实时模拟操作行为！</td></tr></tbody></table><hr><h2 id="🧪c-固件实现逻辑" tabindex="-1"><a class="header-anchor" href="#🧪c-固件实现逻辑"><span>🧪C++ 固件实现逻辑</span></a></h2><p>HID + CDC 初始化：</p><ul><li>使用 TinyUSB 同时注册两个接口： <ul><li>HID（报告设备为鼠标/键盘）</li><li>CDC（用于串口通信）</li></ul></li></ul><p>主循环：</p><ul><li>每次通过 CDC 接口接收一行字符串</li><li>解析为动作命令，如：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>KEY A DOWN</span></span>
<span class="line"><span>MOUSE MOVE 20 -10</span></span>
<span class="line"><span>CLICK LEFT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>动作执行：</p><ul><li>转换为 HID 报文发送（通过 <code>tud_hid_mouse_report()</code> 或 <code>tud_hid_keyboard_report()</code>）</li></ul><hr><h2 id="🧰python-控制端" tabindex="-1"><a class="header-anchor" href="#🧰python-控制端"><span>🧰Python 控制端</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> serial</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打开 RP2040 CDC 串口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ser </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> serial.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Serial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;COM5&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模拟按 A 键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;KEY A DOWN</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;KEY A UP</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模拟鼠标移动</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MOUSE MOVE 30 10</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模拟点击</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;CLICK LEFT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81)]))}const h=s(n,[["render",l],["__file","PICO.html.vue"]]),o=JSON.parse('{"path":"/python/Project/PICO.html","title":"PICO RP2040","lang":"en-US","frontmatter":{"order":2,"title":"PICO RP2040","description":"🍓Raspberry Pi Pico 简介 参照 Pico中文站：https://pico.org.cn/ 英文文档地址：https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf 🍓Raspberry Pi Pico Thonny (经典开发方式，之前官方主推的方式，...","head":[["meta",{"property":"og:url","content":"https://x.app/python/Project/PICO.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"PICO RP2040"}],["meta",{"property":"og:description","content":"🍓Raspberry Pi Pico 简介 参照 Pico中文站：https://pico.org.cn/ 英文文档地址：https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf 🍓Raspberry Pi Pico Thonny (经典开发方式，之前官方主推的方式，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.ventix.top/img02/20250410183356538.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:51:00.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:51:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PICO RP2040\\",\\"image\\":[\\"https://image.ventix.top/img02/20250410183356538.png\\"],\\"dateModified\\":\\"2025-04-17T03:51:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"🍓Raspberry Pi Pico","slug":"🍓raspberry-pi-pico","link":"#🍓raspberry-pi-pico","children":[{"level":3,"title":"Thonny开发方式","slug":"thonny开发方式","link":"#thonny开发方式","children":[]},{"level":3,"title":"VS code 插件","slug":"vs-code-插件","link":"#vs-code-插件","children":[]},{"level":3,"title":"CmakeLists.txt","slug":"cmakelists-txt","link":"#cmakelists-txt","children":[]}]},{"level":2,"title":"📁Pico模拟键鼠项目","slug":"📁pico模拟键鼠项目","link":"#📁pico模拟键鼠项目","children":[]},{"level":2,"title":"🧪C++ 固件实现逻辑","slug":"🧪c-固件实现逻辑","link":"#🧪c-固件实现逻辑","children":[]},{"level":2,"title":"🧰Python 控制端","slug":"🧰python-控制端","link":"#🧰python-控制端","children":[]}],"git":{"createdTime":1744861860000,"updatedTime":1744861860000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":6.42,"words":1925},"filePathRelative":"python/Project/PICO.md","localizedDate":"April 17, 2025","excerpt":"<p>🍓Raspberry Pi Pico 简介 参照 Pico中文站：<a href=\\"https://pico.org.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://pico.org.cn/</a></p>\\n<img src=\\"https://pico.org.cn/images/pico-r3-pinout.svg\\">\\n<p>英文文档地址：<a href=\\"https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf</a></p>","autoDesc":true}');export{h as comp,o as data};
