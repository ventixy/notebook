import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as r,o as p}from"./app-Bn4Nr-M4.js";const n={};function i(l,t){return p(),o("div",null,t[0]||(t[0]=[r('<p>模型上下文协议（Model Context Protocol，简称MCP）由Anthropic公司于2024年11月首次提出，旨在解决大型语言模型（LLM）与外部数据源和工具之间的交互问题。其核心目标是通过标准化接口，简化AI模型与外部系统的集成，从而提升AI应用的灵活性和扩展性。</p><p>MCP被比喻为AI领域的“USB-C接口”，类似于传统硬件设备通过统一接口连接不同设备的方式，MCP允许大型语言模型以标准化的方式访问外部数据源、工具和资源。这种标准化的设计不仅降低了开发者的集成成本，还提高了系统的通用性和互操作性。</p><h3 id="mcp的核心架构" tabindex="-1"><a class="header-anchor" href="#mcp的核心架构"><span>MCP的核心架构</span></a></h3><p>MCP采用客户端-服务器（Client-Server）架构，主要由三个核心组件组成：MCP主机（Host）、MCP客户端（Client）和MCP服务器（Server）。</p><ol><li><p><strong>MCP主机（Host）</strong><br> MCP主机是AI应用程序的运行环境，负责提供用户界面并协调模型与服务器之间的通信。它通常集成交互式工具和数据，以便与外部服务进行顺畅的通信。</p></li><li><p><strong>MCP客户端（Client）</strong><br> MCP客户端作为中介，负责向MCP服务器发送请求，并将响应传递给MCP主机。它支持动态访问控制和实时决策，确保安全性和高效性。</p></li><li><p><strong>MCP服务器（Server）</strong><br> MCP服务器是MCP协议的核心，负责处理来自客户端的请求，并根据请求调用外部数据源或工具。服务器支持多种协议（如HTTP、gRPC等），并提供标准化的API接口。</p></li></ol><hr><h3 id="mcp的工作原理" tabindex="-1"><a class="header-anchor" href="#mcp的工作原理"><span>MCP的工作原理</span></a></h3><p>MCP协议通过JSON-RPC格式的消息传递机制实现通信。消息类型包括请求（Request）、结果（Result）、错误（Error）和通知（Notification），这些消息通过安全的传输协议（如TLS）进行加密传输。</p><ol><li><p><strong>数据获取与处理</strong><br> 当AI模型需要外部数据时，MCP客户端会向MCP服务器发送请求，服务器根据请求调用相应的数据源或工具，并返回处理后的结果。例如，在文档摘要任务中，MCP服务器可以调用文本摘要API生成摘要内容。</p></li><li><p><strong>上下文感知与提示生成</strong><br> MCP协议支持上下文感知功能，允许AI模型根据历史交互记录生成更精准的提示（Prompts）。例如，推荐系统可以通过用户行为日志生成个性化的推荐内容。</p></li><li><p><strong>多任务协作与动态调用</strong><br> MCP协议支持多任务协作，允许AI代理在统一界面中调用多个工具完成复杂的多步骤任务。例如，在智能家居场景中，AI代理可以通过MCP服务器控制多个设备完成自动化任务。</p></li></ol>',9)]))}const C=e(n,[["render",i],["__file","mcp.html.vue"]]),s=JSON.parse('{"path":"/AI/mcp.html","title":"MCP","lang":"en-US","frontmatter":{"article":true,"date":"2025-02-21T00:00:00.000Z","category":["AI","MCP"],"tag":["AI","MCP"],"shortTitle":"MCP","title":"MCP","order":66,"description":"模型上下文协议（Model Context Protocol，简称MCP）由Anthropic公司于2024年11月首次提出，旨在解决大型语言模型（LLM）与外部数据源和工具之间的交互问题。其核心目标是通过标准化接口，简化AI模型与外部系统的集成，从而提升AI应用的灵活性和扩展性。 MCP被比喻为AI领域的“USB-C接口”，类似于传统硬件设备通过统一...","head":[["meta",{"property":"og:url","content":"https://x.app/AI/mcp.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"MCP"}],["meta",{"property":"og:description","content":"模型上下文协议（Model Context Protocol，简称MCP）由Anthropic公司于2024年11月首次提出，旨在解决大型语言模型（LLM）与外部数据源和工具之间的交互问题。其核心目标是通过标准化接口，简化AI模型与外部系统的集成，从而提升AI应用的灵活性和扩展性。 MCP被比喻为AI领域的“USB-C接口”，类似于传统硬件设备通过统一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-09T15:32:25.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:tag","content":"AI"}],["meta",{"property":"article:tag","content":"MCP"}],["meta",{"property":"article:published_time","content":"2025-02-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-09T15:32:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MCP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-09T15:32:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":3,"title":"MCP的核心架构","slug":"mcp的核心架构","link":"#mcp的核心架构","children":[]},{"level":3,"title":"MCP的工作原理","slug":"mcp的工作原理","link":"#mcp的工作原理","children":[]}],"git":{"createdTime":1745378601000,"updatedTime":1746804745000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":2}]},"readingTime":{"minutes":2.53,"words":759},"filePathRelative":"AI/mcp.md","localizedDate":"February 21, 2025","excerpt":"<p>模型上下文协议（Model Context Protocol，简称MCP）由Anthropic公司于2024年11月首次提出，旨在解决大型语言模型（LLM）与外部数据源和工具之间的交互问题。其核心目标是通过标准化接口，简化AI模型与外部系统的集成，从而提升AI应用的灵活性和扩展性。</p>\\n<p>MCP被比喻为AI领域的“USB-C接口”，类似于传统硬件设备通过统一接口连接不同设备的方式，MCP允许大型语言模型以标准化的方式访问外部数据源、工具和资源。这种标准化的设计不仅降低了开发者的集成成本，还提高了系统的通用性和互操作性。</p>\\n<h3>MCP的核心架构</h3>\\n<p>MCP采用客户端-服务器（Client-Server）架构，主要由三个核心组件组成：MCP主机（Host）、MCP客户端（Client）和MCP服务器（Server）。</p>","autoDesc":true}');export{C as comp,s as data};
