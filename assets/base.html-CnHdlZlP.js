import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as e,a as s,e as a,d as n,w as t,r as d,o as p}from"./app-JDah0YIi.js";const h={},g={start:"5"};function k(c,i){const l=d("RouteLink");return p(),o("div",null,[i[19]||(i[19]=e('<h2 id="java基础知识" tabindex="-1"><a class="header-anchor" href="#java基础知识"><span>Java基础知识</span></a></h2><ol><li>你认为 Java 的优势是什么？</li></ol><p>在过去Java因其 <strong>跨平台，垃圾回收，面向对象</strong> 等特点而流行起来，到现在形成了 <mark>成熟的生态</mark> ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。</p><ol start="2"><li>JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工具？</li></ol><p>JRE指的是Java运行环境，包含了 <strong>JVM</strong> 及 <strong>核心类库</strong> ，JDK可视为JRE的超集，它包含了JRE 以及其他用于开发和调试的工具</p><details class="hint-container details"><summary>JDK提供的主要工具</summary><ul><li>JDK 常见工具 <ul><li>javac:Java 编译器，负责将 Java 源代码编译成字节码(.class 文件)。</li><li>java:运行 Java 应用程序的命令，使用 JM 来解释并执行编译后的字节码文件。</li><li>javadoc:生成 API文档的工具，能够根据源代码中的注释生成 HTML 格式的文档。</li><li>jar:用于创建和管理 JAR 文件的工具，可以将多个.class 文件打包为单一文件，便于分发和管理</li><li>jdb:Java 调试工具，用于在命令行中调试 Java 应用程序，支持断点设置、变量查看等功能。</li></ul></li><li>性能监控和分析工具 <ul><li>jps:Java 进程工具，显示所有正在运行的 Java 进程，便于监控和诊</li><li><mark>jstack</mark>:生成线程堆栈信息的工具，常用于<strong>分析死锁和线程问题</strong>。</li><li><mark>jmap</mark>:内存映射工具，可以生成堆转储(heap dump)文件，便于<strong>内存泄漏分析和垃圾回收优化</strong>。</li><li><mark>jhat</mark>:堆分析工具，配合 jmap 使用，分析生成的堆转储文件，帮助开发者了解内存使用情况。</li><li>jstat:JVM 统计监控工具，实时监控垃圾回收、内存、类加载等信息，帮助开发者调优 JM 性能。</li><li>jconsole:图形化的 JM 监控工具，可以监控应用程序的内存、线程和类加载情况，常用于监控和调试。</li><li>jvisualvm:功能强大的性能分析工具，支持堆、线程、GC的详细监控，还提供内存分析和 CPU 性能分析。</li></ul></li><li>诊断工具 <ul><li>jinfo:用于查看和修改正在运行的 JVM 参数，便于动态调优和调整 JM 行为,</li><li>jstatd:远程 JVM 监控工具，可以通过网络远程监控 JVM 的状态，适合分布式系统中的性能监控。</li></ul></li></ul></details><h3 id="java数据类型" tabindex="-1"><a class="header-anchor" href="#java数据类型"><span>Java数据类型</span></a></h3><ol><li>Java 中的基本数据类型有哪些？</li></ol><p>8种基本数据类型: 整型（byte,short,int,long）, 浮点型(float,double), 字符型(char), 布尔型(boolean)</p>',9)),s("p",null,[i[1]||(i[1]=a("更多更详细的内容参照：")),n(l,{to:"/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"},{default:t(()=>i[0]||(i[0]=[a("Java基本数据类型")])),_:1})]),i[20]||(i[20]=e('<ol start="2"><li>Java 中包装类型和基本类型的区别是什么？</li></ol><p><code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>Character</code>, <code>Boolean</code></p><p>包装类型的本质是对象，适用于需要对象特性、支持 <code>null</code> 值、需要调用方法的场景</p><ol start="3"><li>什么是 Java 中的自动装箱和拆箱？</li></ol><ul><li><p>自动装箱（Autoboxing）: 将基本类型自动转换为其对应的包装类型的过程。<br> 当遇到将基本类型赋值给包装类型的情况时，编译器会自动调用 <code>Integer.valueOf(int)</code></p></li><li><p>拆箱（Unboxing）: 将包装类型自动转换为其对应的基本类型的过程。<br> 当编译器遇到将包装类型赋值给基本类型的情况时，会自动插入相应的解包方法调用。如：<code>Integer.intValue()</code></p></li></ul><ol start="4"><li>什么是 Java 的 Integer 缓存池？</li></ol><p><code>Integer</code> 类的内部实现中使用了一个静态数组来存储这些常用的小整数值(-128 到 127)，以减少对象的创建和垃圾回收的开销。</p><p><strong>注意事项</strong>：使用 <code>==</code> 比较 <code>Integer</code> 对象时需要注意缓存范围的影响，推荐使用 <code>equals</code> 方法进行值比较。</p>',8)),s("ol",g,[s("li",null,[i[3]||(i[3]=a("什么是 Java 的 BigDecimal？ 参照：")),n(l,{to:"/java/syntax/base/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93.html#_2-bigdecimal"},{default:t(()=>i[2]||(i[2]=[a("BigDecimal")])),_:1})])]),i[21]||(i[21]=e(`<p><code>BigDecimal</code>是Java中用于进行高精度浮点数运算的工具类，适用于金融和科学计算等需要高精度的场景。</p><div class="hint-container warning"><p class="hint-container-title">BigDecimal</p><p>BigDecimal是不可变类，所有的算术运算都会返回新的BigDecimal对象（安全但性能较差）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123.456&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 使用字符串初始化，推荐     </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 也可以使用静态方法 valueOf</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123.456</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用double初始化，可能丢失精度</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>常用算数方法：<code>add</code>, <code>subtract</code>, <code>multiply</code>, <code>divide</code></li><li>数值比较：<code>int res = bd3.compareTo(bd4)</code></li><li>转换为字符串： <ul><li><code>toString()</code> --可能会是科学记数法</li><li><code>toPlainString()</code> --始终提供完整的十进制字符串表示</li></ul></li></ul></div><h3 id="java字符串对象" tabindex="-1"><a class="header-anchor" href="#java字符串对象"><span>Java字符串对象</span></a></h3>`,3)),s("p",null,[i[5]||(i[5]=a("Java中处理字符串的主要类是String、StringBuilder和StringBuffer。 参考：")),n(l,{to:"/java/syntax/base/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E4%B8%89-%E5%AD%97%E7%AC%A6%E4%B8%B2-string"},{default:t(()=>i[4]||(i[4]=[a("Java字符串")])),_:1})]),i[22]||(i[22]=e('<div class="hint-container info"><p class="hint-container-title">String面试题</p><h4 id="使用-new-string-abc-语句在-java-中会创建多少个对象" tabindex="-1"><a class="header-anchor" href="#使用-new-string-abc-语句在-java-中会创建多少个对象"><span>使用 new String(&quot;abc&quot;) 语句在 Java 中会创建多少个对象？</span></a></h4><p>会创建1-2两个字符串，使用new关键字时，如果字符串常量池中不存在当前字符串，那就会在堆上创建两个字符串对象，其中一个会被保存到字符串常量池中。</p><p>如果字符串常量池中已经存在该字符串的引用，则只会在堆中创建一个</p><h4 id="为什么-jdk-9-中将-string-的-char-数组改为-byte-数组" tabindex="-1"><a class="header-anchor" href="#为什么-jdk-9-中将-string-的-char-数组改为-byte-数组"><span>为什么 JDK 9 中将 String 的 char 数组改为 byte 数组？</span></a></h4><p>为了节省内存空间，提升内存利用率。</p><ul><li>JDK9之前String是基于char[] 实现的，内部采用UTF-16编码，每个字符占用两字节。</li><li>JDK9中String采用byte[]数组来实现，并使用coder变量标识编码方式(UTF-16/Latin-1)， 当字符仅需一个字符的空间时，就可以减少内存占用</li></ul></div><p>Java 中 String、StringBuffer 和 StringBuilder 的区别是什么？</p><ul><li>String: 不可变，适合少量字符串操作。<br> String的本质就是一个不可变的字符数组： <code>private final char value[];</code></li><li>StringBuilder: 可变，但非线程安全，适合单线程环境中的高性能字符串处理</li><li>StringBuffer：可变，且线程安全，适合多线程环境中频繁修改字符串的场景</li></ul><div class="hint-container info"><p class="hint-container-title">Java 中的序列化和反序列化</p><ul><li>序列化: 将对象的状态信息转换为可以存储或传输的形式，要使一个对象可以被序列化，该对象的类必须实现 <code>Serializable</code> 接口。</li><li>反序列化: 将字节流恢复为对象的过程</li></ul><p>建议显式定义 <code>serialVersionUID</code>，以避免因类结构变化而导致的序列化失败。</p></div><p>为什么在 Java 中编写代码时会遇到乱码问题？</p><p>乱码是因为<strong>编解码时使用的字符集不一致</strong>导致的。</p><h3 id="java面向对象" tabindex="-1"><a class="header-anchor" href="#java面向对象"><span>Java面向对象</span></a></h3><p>Java 面向对象编程与面向过程编程的区别是什么？</p><ul><li><p><strong>面向对象编程</strong>：关注数据（对象）及其行为（方法），通过类和对象来组织代码。数据和操作数据的方法封装在一起，外部访问受限，增强数据安全性。支持继承和多态，可以通过继承扩展类的功能，多态允许子类方法覆盖父类方法。<strong>面向对象更符合人类的思维方式</strong>。</p></li><li><p><strong>面向过程编程</strong>：关注过程（函数）和数据，通过函数和数据结构来组织代码。数据和函数分离，数据暴露在外，容易被随意修改。</p></li></ul><div class="hint-container info"><p class="hint-container-title">封装继承多态</p><h4 id="什么是-java-的封装特性" tabindex="-1"><a class="header-anchor" href="#什么是-java-的封装特性"><span>什么是 Java 的封装特性？</span></a></h4><p>指将对象的 状态和行为（数据和方法）封装在内部，通过公开的接口与外部进行交互。封装的主要目的是隐藏内部的实现细节，只暴露必要的功能。且修改内部的具体实现外部也无法感知到 （数据保护，代码复用）</p><h4 id="什么是-java-中的继承机制-为什么-java-不支持多重继承" tabindex="-1"><a class="header-anchor" href="#什么是-java-中的继承机制-为什么-java-不支持多重继承"><span>什么是 Java 中的继承机制？为什么 Java 不支持多重继承？</span></a></h4><ul><li><p>子类继承父类的属性和方法，使得类之间形成层次结构，不仅代码得到重用，还可以进行扩展。继承是实现 多态，抽象和代码复用的关键。</p></li><li><p>多继承会产生菱形继承问题，例如：BC继承了A，D又继承了BC，假设D现在要调用A中的方法，但是B C都有不同的实现，此时就会出现歧义。</p></li></ul><p>既然多继承不行，为什么接口多实现可以？</p><p>Java8之前，接口是无法定义具体的方法实现的，必须由子类自己实现，并不会产生歧义。</p><p>Java8有了默认方法，但是强制规定如果多个接口内有相同的默认方法，子类必须重写该方法。</p><h4 id="什么是-java-的多态特性" tabindex="-1"><a class="header-anchor" href="#什么是-java-的多态特性"><span>什么是 Java 的多态特性？</span></a></h4><p>指同一个接口或者父类引用变量可以指向不同的对象实例，并根据实际指向的对象类型执行相应的方法。</p><p>它允许同一方法在不同的对象上表现出不同的行为。通过多态，程序可以灵活的处理不同类型的对象，降低代码耦合度。</p></div><p>Java 中的访问修饰符有哪些？</p><table><thead><tr><th>访问修饰符</th><th>访问范围</th><th>示例</th></tr></thead><tbody><tr><td><strong>private</strong></td><td>仅限于同一个类内部</td><td><code>private int privateVar;</code></td></tr><tr><td><strong>default</strong></td><td>同一个包内的类</td><td><code>int defaultVar;</code></td></tr><tr><td><strong>protected</strong></td><td>同一个包内的类以及不同包中的子类</td><td><code>protected int protectedVar;</code></td></tr><tr><td><strong>public</strong></td><td>所有类，不受包的限制</td><td><code>public int publicVar;</code></td></tr></tbody></table><h3 id="方法和参数传递" tabindex="-1"><a class="header-anchor" href="#方法和参数传递"><span>方法和参数传递</span></a></h3><ol><li>Java 中静态方法和实例方法的区别是什么？</li></ol><ul><li><strong>静态方法</strong>：属于类，通过类名调用，只能访问静态成员，不能被重写。</li><li><strong>实例方法</strong>：属于对象，通过对象调用，可以访问所有成员，可以被重写。</li></ul><ol start="2"><li>Java 方法重载和方法重写之间的区别是什么？</li></ol><ul><li><strong>方法重载</strong>：在同一类中，方法名相同但参数列表不同，可以在编译时根据参数类型和数量区分方法</li><li><strong>方法重写</strong>：在子类中，方法名、返回类型和参数列表都相同，用于实现多态，改变父类方法的行为</li></ul><ol start="3"><li>Java 中的参数传递是按值还是按引用？</li></ol><div class="hint-container tip"><p class="hint-container-title">值传递（pass by value）和引用传递（pass by reference）</p><p>在Java中，无论是基本类型还是引用类型的数据，参数传递都只有 <strong>值传递（pass by value）</strong></p><ul><li>传递基本类型的参数时，传递的是值的副本。不会影响到原本的值。</li><li>传递引用数据类型时，传递的是引用的副本，使得方法参数和原本的变量均指向同一对象，因此可以修改对象的属性，但是无法让原本的变量指向其他对象。</li></ul></div>',19)),s("p",null,[i[7]||(i[7]=a("更详细的内容参照：")),n(l,{to:"/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92"},{default:t(()=>i[6]||(i[6]=[a("Java参数传递")])),_:1})]),i[23]||(i[23]=e('<h3 id="接口和抽象类" tabindex="-1"><a class="header-anchor" href="#接口和抽象类"><span>接口和抽象类</span></a></h3><p>接口和抽象类有什么区别？</p><div class="hint-container info"><p class="hint-container-title">抽象类和接口</p><h4 id="普通类和抽象类有什么区别" tabindex="-1"><a class="header-anchor" href="#普通类和抽象类有什么区别"><span>普通类和抽象类有什么区别？</span></a></h4><ul><li><strong>普通类</strong>：可以直接实例化，提供具体的方法实现。</li><li><strong>抽象类</strong>：不能直接实例化，可以包含抽象方法（没有具体实现的方法），子类必须实现这些抽象方法。</li></ul><h4 id="抽象类和接口有什么区别" tabindex="-1"><a class="header-anchor" href="#抽象类和接口有什么区别"><span>抽象类和接口有什么区别？</span></a></h4><ul><li><strong>抽象类</strong>： 可以包含抽象方法和具体方法。 只能单继承。可以包含成员变量。</li><li><strong>接口</strong>： 只能包含抽象方法（Java 8 以后可以包含默认方法和静态方法）。 可以多实现。 成员变量默认是 <code>public static final</code>。</li></ul></div><h3 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝"><span>深浅拷贝</span></a></h3><p>Java 中的深拷贝和浅拷贝有什么区别？</p><ul><li><strong>浅拷贝</strong>：创建一个新对象，但只复制基本数据类型和引用类型的数据地址，原始对象和拷贝对象共享引用类型的内存地址。</li><li><strong>深拷贝</strong>：创建一个完全独立的新对象，复制所有数据，包括引用类型的数据，使得原始对象和拷贝对象互不影响。</li></ul><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类"><span>内部类</span></a></h3><p>什么是 Java 内部类？它有什么作用？</p><p><strong>定义</strong>：内部类是指在一个类的内部定义的类。</p><ol><li><strong>成员内部类（Member Inner Class）</strong>：定义在类的内部，但不在方法或代码块中。可以访问外部类的所有成员（包括私有成员）。</li><li><strong>局部内部类（Local Inner Class）</strong>： 定义在方法或代码块中。 只能在定义它的方法或代码块中使用。</li><li><strong>匿名内部类（Anonymous Inner Class）</strong>： 没有名字，通常用于创建单个对象。 经常用于事件监听器等场景。</li><li><strong>静态内部类（Static Nested Class）</strong>： 使用 <code>static</code> 关键字修饰。 不依赖于外部类的实例，可以直接通过外部类名访问。</li></ol><p>作用</p><ol><li><strong>逻辑封装</strong>：内部类可以访问外部类的私有成员，实现更紧密的封装。</li><li><strong>代码组织</strong>： 内部类可以将相关的类组织在一起，提高代码的可读性和可维护性。</li><li><strong>事件处理</strong>： 匿名内部类常用于事件监听器，简化事件处理代码。</li></ol><h3 id="object类中的方法" tabindex="-1"><a class="header-anchor" href="#object类中的方法"><span>Object类中的方法</span></a></h3><p>Java Object 类中有什么方法，有什么作用？</p><ol><li><p><strong><code>toString()</code></strong>：返回对象的字符串表示形式。默认返回对象的类名和哈希码</p></li><li><p><strong><code>hashCode()</code></strong>：基于对象的内存地址生成哈希码。</p></li><li><p><strong><code>equals(Object obj)</code></strong>：检查两个对象是否是同一个对象（即引用是否相同）。</p></li><li><p><strong><code>clone()</code></strong>：创建并返回对象的一个副本。默认是浅拷贝，需要实现 <code>Cloneable</code> 接口。通常会重写实现深拷贝</p></li><li><p><strong><code>finalize()</code></strong>：对象被垃圾回收前调用的方法。用于释放资源，但不建议依赖此方法进行资源管理，应使用 <code>try-with-resources</code> 等更可靠的机制。</p></li><li><p><strong><code>getClass()</code></strong>：返回对象的 <code>Class</code> 对象。</p></li><li><p><strong><code>wait()</code></strong>、<strong><code>notify()</code></strong>、<strong><code>notifyAll()</code></strong>：用于多线程编程中的同步控制。</p><ul><li><strong><code>wait()</code></strong>：使当前线程等待，释放对象锁。</li><li><strong><code>notify()</code></strong>：唤醒一个等待该对象锁的线程。</li><li><strong><code>notifyAll()</code></strong>：唤醒所有等待该对象锁的线程。</li></ul></li></ol><h3 id="equals-hashcode" tabindex="-1"><a class="header-anchor" href="#equals-hashcode"><span>equals/hashCode</span></a></h3><p>Java 中 hashCode 和 equals 方法是什么？它们与 == 操作符有什么区别？</p><ul><li><strong><code>hashCode</code> 方法</strong>：返回对象的哈希码，用于哈希表中的快速查找。</li><li><strong><code>equals</code> 方法</strong>：判断两个对象是否相等，通常需要重写以实现自定义的相等逻辑。</li><li><strong><code>==</code> 操作符</strong>：比较两个对象的引用是否相同，即是否指向同一个对象。</li></ul><p>Java 中的 hashCode 和 equals 方法之间有什么关系？</p><ul><li><strong>一致性</strong>：如果两个对象通过 <code>equals</code> 方法判断为相等，那么它们的 <code>hashCode</code> 方法返回的值必须相同。(这样可以确保在哈希表中，相等的对象会被放在同一个桶中)</li><li><strong>反向关系</strong>：如果两个对象的 <code>hashCode</code> 值不同，那么它们一定不相等。</li></ul><p>在哈希表（如 <code>HashMap</code>、<code>HashSet</code>）中，<code>hashCode</code> 用于快速定位桶的位置</p><h3 id="io和网络编程" tabindex="-1"><a class="header-anchor" href="#io和网络编程"><span>IO和网络编程</span></a></h3>',22)),s("ol",null,[i[12]||(i[12]=s("li",null,[s("p",null,[s("strong",null,"Java 的 I/O 流是什么？"),s("br"),a(" Java 的 I/O 流是一组用于处理输入和输出操作的类和接口，提供了读取和写入数据到不同源或目的地的功能。")])],-1)),s("li",null,[i[10]||(i[10]=s("p",null,[s("strong",null,"什么是 BIO、NIO、AIO？"),s("br"),a(" BIO（阻塞I/O）、NIO（非阻塞I/O）和 AIO（异步I/O）是 Java 中三种不同的 I/O 模型，分别代表了同步阻塞、同步非阻塞和异步非阻塞的 I/O 处理方式。")],-1)),i[11]||(i[11]=s("ul",null,[s("li",null,"BIO：线程在I/O操作期间被阻塞。"),s("li",null,"NIO：线程在发起 I/O 操作后不会被阻塞，但它需要轮询 Selector 来检查是否有 I/O 事件发生。"),s("li",null,"AIO：线程在发起 I/O 操作后不会被阻塞，并且操作系统会在操作完成时通知 Java 应用。通过 CompletionHandler 或 Future 来处理操作完成的通知。")],-1)),s("p",null,[i[9]||(i[9]=a("更多关于NIO的内容参考：")),n(l,{to:"/java/syntax/io/nio.html#nio%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"},{default:t(()=>i[8]||(i[8]=[a("Java NIO")])),_:1})])]),i[13]||(i[13]=s("li",null,[s("p",null,[s("strong",null,"什么是 Channel？"),s("br"),a(" Channel 是 NIO 中的一个核心概念，表示一个能够执行 I/O 操作的对象，如读取、写入、映射文件等，并且可以与 Buffer 交互以传输数据。")])],-1)),i[14]||(i[14]=s("li",null,[s("p",null,[s("strong",null,"什么是 Selector？"),s("br"),a(" Selector 是 NIO 中用于多路复用 I/O 操作的组件，允许单个线程管理多个 Channel，从而提高并发处理能力。")])],-1)),i[15]||(i[15]=s("li",null,[s("p",null,[s("strong",null,"什么是 Java 的网络编程？"),s("br"),a(" Java 的网络编程是指利用 Java 提供的 API 来开发能够在网络上进行通信的应用程序，包括创建客户端和服务器端程序，处理 TCP/UDP 协议等。")])],-1))]),i[24]||(i[24]=e('<h2 id="java高级特性" tabindex="-1"><a class="header-anchor" href="#java高级特性"><span>Java高级特性</span></a></h2><h3 id="注解和反射" tabindex="-1"><a class="header-anchor" href="#注解和反射"><span>注解和反射</span></a></h3><p><strong>注解</strong> 是一种元数据，用于提供程序元素（如类、方法、变量）的附加信息。注解本身不会直接影响程序的运行，但可以通过注解处理器在编译时或运行时读取这些注解并执行相应的操作。</p><ul><li><strong>编译时处理</strong>：使用注解处理器在编译时读取注解并生成代码或执行其他操作。</li><li><strong>运行时处理</strong>：使用反射机制在运行时读取注解并执行相应的操作。</li></ul><div class="hint-container info"><p class="hint-container-title">元注解和自定义注解</p><h4 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h4><ul><li><strong><code>@Retention</code></strong>：指定注解的保留策略（<code>SOURCE</code>、<code>CLASS</code>、<code>RUNTIME</code>）。</li><li><strong><code>@Target</code></strong>：指定注解可以应用的目标（如 <code>TYPE</code>、<code>METHOD</code>、<code>FIELD</code>）。</li><li><strong><code>@Documented</code></strong>：指定注解是否包含在 Javadoc 文档中。</li><li><strong><code>@Inherited</code></strong>：指定注解是否可以被子类继承。</li></ul><h4 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h4><ul><li>使用 <code>@interface</code> 关键字定义。</li><li>可以包含属性（方法），属性可以有默认值。</li></ul></div><p>应用场景</p><ul><li><strong>编译时检查</strong>：如 <code>@Override</code>、<code>@Deprecated</code>。</li><li><strong>代码生成</strong>：如 Lombok 注解生成 getter 和 setter 方法。</li><li><strong>配置元数据</strong>：如 Spring 的 <code>@Autowired</code>、<code>@Component</code>。</li><li><strong>运行时行为</strong>：如 JUnit 的 <code>@Test</code>、<code>@Before</code>。</li></ul><br><p>你使用过 Java 的反射机制吗？如何应用反射？</p><div class="hint-container info"><p class="hint-container-title">Java反射</p><p>Java反射机制是Java语言提供的一种能够在运行时分析类和对象的能力。它允许程序在运行时动态地获取类的信息（如类名、属性、方法等），创建对象，调用方法，改变属性值等。 这对于开发一些需要高度灵活性和元编程功能的应用非常有用，比如开发框架、ORM工具、AOP（面向切面编程）等</p><ol><li><p><strong>获取 <code>Class</code> 对象</strong>：</p><ul><li><strong><code>Class.forName(String className)</code></strong>：通过类名获取 <code>Class</code> 对象。</li><li><strong><code>Object.getClass()</code></strong>：通过对象获取 <code>Class</code> 对象。</li><li><strong><code>Class&lt;T&gt; c = T.class</code></strong>：通过类字面量获取 <code>Class</code> 对象。</li></ul></li><li><p><strong>创建对象</strong>：</p><ul><li><strong><code>Class.newInstance()</code></strong>：创建类的实例（Java 9 以后不推荐使用）。</li><li><strong><code>Constructor.newInstance(Object... initargs)</code></strong>：通过构造器创建类的实例。</li></ul></li><li><p><strong>获取和调用方法</strong>：</p><ul><li><strong><code>Class.getMethod(String name, Class... parameterTypes)</code></strong>：获取公共方法。</li><li><strong><code>Class.getDeclaredMethod(String name, Class... parameterTypes)</code></strong>：获取所有方法（包括私有方法）。</li><li><strong><code>Method.invoke(Object obj, Object... args)</code></strong>：调用方法。</li></ul></li><li><p><strong>获取和访问字段</strong>：</p><ul><li><strong><code>Class.getField(String name)</code></strong>：获取公共字段。</li><li><strong><code>Class.getDeclaredField(String name)</code></strong>：获取所有字段（包括私有字段）。</li><li><strong><code>Field.set(Object obj, Object value)</code></strong>：设置字段值。</li><li><strong><code>Field.get(Object obj)</code></strong>：获取字段值。</li></ul></li><li><p><strong>获取和访问构造器</strong>：</p><ul><li><strong><code>Class.getConstructor(Class... parameterTypes)</code></strong>：获取公共构造器。</li><li><strong><code>Class.getDeclaredConstructor(Class... parameterTypes)</code></strong>：获取所有构造器（包括私有构造器）。</li></ul></li><li><p><strong>设置访问权限</strong>：</p><ul><li><strong><code>AccessibleObject.setAccessible(boolean flag)</code></strong>：设置是否允许访问私有成员。</li></ul></li></ol></div><h3 id="java泛型" tabindex="-1"><a class="header-anchor" href="#java泛型"><span>Java泛型</span></a></h3><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p><ul><li><p>泛型的本质是参数化类型,也就是说所操作的数据类型被指定为一个参数。在使用/调用时传入具体的类型（类型实参）</p></li><li><p>Java采用 <mark>类型擦除(Type erasure generics)</mark> 的方式实现泛型，即这个泛型只存在源码中，经过编译之后全部泛型变成Object</p></li></ul><div class="hint-container info"><p class="hint-container-title">泛型通配/上下界定符</p><ul><li><p><code>？</code>：任意类型，如果没有明确，那么就是Object以及任意的Java类了</p></li><li><p>上界通配符 <code>&lt; ? extends E&gt;</code>：限制泛型可用类型, 表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p></li><li><p>下界通配符 <code>&lt; ? super E&gt;</code>：表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p></li></ul></div><h3 id="异常和错误" tabindex="-1"><a class="header-anchor" href="#异常和错误"><span>异常和错误</span></a></h3><figure><img src="https://image.ventix.top/java/image-20211009131219704.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>Java 中 Exception 和 Error 有什么区别？</strong></p><ul><li><code>Exception</code> 表示程序可以捕获和处理的异常情况，</li><li><code>Error</code> 表示严重的错误，通常是不可恢复的情况，如虚拟机故障，程序不应尝试处理。</li></ul></li><li><p><strong>Java 运行时异常和编译时异常之间的区别是什么？</strong></p><ul><li>运行时异常（unchecked exceptions）在运行期间发生且不必显式处理，</li><li>编译时异常（checked exceptions）必须在编译前通过 try-catch 或 throws 声明进行处理。</li></ul></li><li><p><strong>Java 中 final、finally 和 finalize 各有什么区别？</strong></p><ul><li><code>final</code> 关键字用于声明不可修改的变量、方法或类；</li><li><code>finally</code> 块总是会在 try-catch 结构后执行，确保清理代码被执行；</li><li><code>finalize</code> 方法是在对象垃圾回收前由 JVM 调用，用于资源清理，但已被标记为废弃。</li></ul></li></ol><p>在SpringBoot中，使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解来全局捕获和处理异常：</p><ol><li><strong>创建全局异常处理器类</strong>：用 <code>@ControllerAdvice</code> 注解的类。</li><li><strong>定义异常处理方法</strong>：在该类中用 <code>@ExceptionHandler</code> 注解的方法处理特定异常。</li><li><strong>返回自定义响应</strong>：在处理方法中返回适当的响应给客户端。</li></ol><h3 id="jdk8新特性" tabindex="-1"><a class="header-anchor" href="#jdk8新特性"><span>JDK8新特性</span></a></h3><p>JDK8 有哪些新特性？Java 的 Optional 类是什么？它有什么用？</p><div class="hint-container info"><p class="hint-container-title">JDK8 新特性</p><h4 id="jdk8-新特性" tabindex="-1"><a class="header-anchor" href="#jdk8-新特性"><span>JDK8 新特性</span></a></h4><ul><li><strong>Lambda 表达式</strong>：允许更简洁的代码来实现函数式编程。</li><li><strong>Stream API</strong>：提供了一种高效且易于使用的集合数据处理方式。</li><li><strong>默认方法和静态方法在接口中</strong>：接口可以包含带实现的方法(默认和静态方法)</li><li><strong>日期时间 API (JSR 310)</strong>：引入了新的日期和时间类，如 <code>LocalDate</code> 和 <code>LocalTime</code>，更加易用且线程安全。</li></ul><h4 id="java-的-optional-类" tabindex="-1"><a class="header-anchor" href="#java-的-optional-类"><span>Java 的 Optional 类</span></a></h4><ul><li><code>Optional&lt;T&gt;</code> 是一个容器类，代表一个值存在或不存在，而不是使用 null。</li><li>用于避免 NullPointerException，使代码更清晰地表达可能缺失的值，并提供了多种方法来优雅地处理这种情况。</li></ul></div><h3 id="lambda-stream" tabindex="-1"><a class="header-anchor" href="#lambda-stream"><span>Lambda&amp;Stream</span></a></h3>',23)),s("p",null,[n(l,{to:"/java/syntax/senior/Lambda.html#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F"},{default:t(()=>i[16]||(i[16]=[a("Lambda表达式")])),_:1}),i[18]||(i[18]=a(" 和 ")),n(l,{to:"/java/syntax/senior/Stream.html#%E4%BB%80%E4%B9%88%E6%98%AFstream"},{default:t(()=>i[17]||(i[17]=[a("Stream API")])),_:1})]),i[25]||(i[25]=e(`<p>如何实现类似 Java Stream API 功能的简要思路:</p><ul><li>链式调用: 每个中间操作（如 filter, map）都应该返回一个新的流对象</li><li>惰性求值：使用列表或队列保存一系列待执行的操作（Operation）</li><li>并行处理：通过多线程或 Fork/Join 框架实现并发执行，需要注意线程安全问题</li></ul><h3 id="spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制"><span>SPI机制</span></a></h3><p>什么是 Java 的 SPI（Service Provider Interface）机制？</p><p><strong>Java 的 SPI（Service Provider Interface）机制</strong> 是一种用于发现和加载服务提供者的框架，允许第三方实现或多种实现插件化。通过 SPI，开发者可以在运行时动态地选择和加载特定的服务实现，而无需在代码中硬编码具体的实现类。</p><p>SPI 机制是 Java 中实现模块化、可扩展系统的一种强大工具，广泛应用于各种框架和库中，如 JDBC 驱动程序、JAXP 解析器等。</p><details class="hint-container details"><summary>SPI机制</summary><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><ol><li><strong>定义接口</strong>：首先定义一个服务接口，该接口将由不同的服务提供者实现。</li><li><strong>配置文件</strong>：服务提供者需要在 JAR 文件的 <code>META-INF/services</code> 目录下创建一个以服务接口全限定名为名的文件，并在此文件中列出所有实现类的全限定名。</li><li><strong>加载服务</strong>：使用 <code>java.util.ServiceLoader</code> 来加载指定接口的所有可用实现。</li></ol><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h4><ul><li><strong>定义服务接口</strong>：创建一个接口，如 <code>com.example.spi.MyService</code>。</li><li><strong>实现服务接口</strong>：编写多个实现类，每个类都实现了上述接口。</li><li><strong>注册实现类</strong>：在 <code>META-INF/services/com.example.spi.MyService</code> 文件中列出所有实现类的全限定名。</li><li><strong>加载服务</strong>：通过 <code>ServiceLoader.load(MyService.class)</code> 加载并迭代所有实现类的实例。</li></ul><p>假设有一个 <code>Logger</code> 接口：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example.spi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个实现类 <code>ConsoleLogger</code> 和 <code>FileLogger</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example.impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.example.spi.Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConsoleLogger</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CONSOLE: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example.impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.example.spi.Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FileLogger</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 假设这里是写入文件的逻辑</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;FILE: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在 <code>META-INF/services/com.example.spi.Logger</code> 文件中列出这两个实现类：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>com.example.impl.ConsoleLogger</span></span>
<span class="line"><span>com.example.impl.FileLogger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，使用 <code>ServiceLoader</code> 来加载这些实现：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.example.spi.Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.ServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SpiTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ServiceLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Logger</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loaders</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Logger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> logger</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> loaders) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><strong>解耦合</strong>：服务使用者和服务提供者之间完全解耦，便于维护和扩展。</li><li><strong>灵活性</strong>：支持多实现的灵活加载，适用于插件式架构。</li><li><strong>易于测试</strong>：可以轻松替换不同实现进行单元测试。</li></ul>`,8))])}const A=r(h,[["render",k],["__file","base.html.vue"]]),B=JSON.parse('{"path":"/interview/java/base.html","title":"Java基础","lang":"en-US","frontmatter":{"order":1,"title":"Java基础","description":"Java基础知识 你认为 Java 的优势是什么？ 在过去Java因其 跨平台，垃圾回收，面向对象 等特点而流行起来，到现在形成了 成熟的生态 ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。 JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工具？ JRE指的是Java运行环境，包含了 JV...","head":[["meta",{"property":"og:url","content":"https://x.app/interview/java/base.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"Java基础知识 你认为 Java 的优势是什么？ 在过去Java因其 跨平台，垃圾回收，面向对象 等特点而流行起来，到现在形成了 成熟的生态 ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。 JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工具？ JRE指的是Java运行环境，包含了 JV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.ventix.top/java/image-20211009131219704.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"https://image.ventix.top/java/image-20211009131219704.png\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"Java基础知识","slug":"java基础知识","link":"#java基础知识","children":[{"level":3,"title":"Java数据类型","slug":"java数据类型","link":"#java数据类型","children":[]},{"level":3,"title":"Java字符串对象","slug":"java字符串对象","link":"#java字符串对象","children":[]},{"level":3,"title":"Java面向对象","slug":"java面向对象","link":"#java面向对象","children":[]},{"level":3,"title":"方法和参数传递","slug":"方法和参数传递","link":"#方法和参数传递","children":[]},{"level":3,"title":"接口和抽象类","slug":"接口和抽象类","link":"#接口和抽象类","children":[]},{"level":3,"title":"深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":3,"title":"内部类","slug":"内部类","link":"#内部类","children":[]},{"level":3,"title":"Object类中的方法","slug":"object类中的方法","link":"#object类中的方法","children":[]},{"level":3,"title":"equals/hashCode","slug":"equals-hashcode","link":"#equals-hashcode","children":[]},{"level":3,"title":"IO和网络编程","slug":"io和网络编程","link":"#io和网络编程","children":[]}]},{"level":2,"title":"Java高级特性","slug":"java高级特性","link":"#java高级特性","children":[{"level":3,"title":"注解和反射","slug":"注解和反射","link":"#注解和反射","children":[]},{"level":3,"title":"Java泛型","slug":"java泛型","link":"#java泛型","children":[]},{"level":3,"title":"异常和错误","slug":"异常和错误","link":"#异常和错误","children":[]},{"level":3,"title":"JDK8新特性","slug":"jdk8新特性","link":"#jdk8新特性","children":[]},{"level":3,"title":"Lambda&Stream","slug":"lambda-stream","link":"#lambda-stream","children":[]},{"level":3,"title":"SPI机制","slug":"spi机制","link":"#spi机制","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":20.65,"words":6195},"filePathRelative":"interview/java/base.md","localizedDate":"January 10, 2025","excerpt":"<h2>Java基础知识</h2>\\n<ol>\\n<li>你认为 Java 的优势是什么？</li>\\n</ol>\\n<p>在过去Java因其 <strong>跨平台，垃圾回收，面向对象</strong> 等特点而流行起来，到现在形成了 <mark>成熟的生态</mark> ，拥有完善的工具，框架和中间件，以及大量的专业人才，我觉得这才是Java现如今最大的优势和竞争力。</p>\\n<ol start=\\"2\\">\\n<li>JDK 和 JRE 有什么区别？你使用过哪些 JDK 提供的工具？</li>\\n</ol>\\n<p>JRE指的是Java运行环境，包含了 <strong>JVM</strong> 及 <strong>核心类库</strong> ，JDK可视为JRE的超集，它包含了JRE 以及其他用于开发和调试的工具</p>","autoDesc":true}');export{A as comp,B as data};
