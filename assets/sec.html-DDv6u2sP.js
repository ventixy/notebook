import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,e as h,w as e,r,o,a as i,d as s}from"./app-s_G_LNEx.js";const g={};function A(y,a){const k=r("Mermaid"),d=r("CodeTabs");return o(),c("div",null,[a[4]||(a[4]=t(`<h2 id="springsecurity快速入门" tabindex="-1"><a class="header-anchor" href="#springsecurity快速入门"><span>SpringSecurity快速入门</span></a></h2><p>Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块。下面将以SpringBoot来集成Spring Security为例</p><h3 id="引入spring-security" tabindex="-1"><a class="header-anchor" href="#引入spring-security"><span>引入Spring Security</span></a></h3><p>在Spring Boot项目，引入spring-boot-starter-security</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-security&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们创建一个HelloController，对外提供一个<code>/hello</code>服务：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建一个方法，用于处理请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 返回一个简单的欢迎信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello spring security&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接启动项目，访问<code>http://localhost:8080/hello</code>，页面会弹出一个HTTP Basic认证框</p><div class="hint-container warning"><p class="hint-container-title">SpringBoot1.x中开启Spring Security的配置</p><p>在Spring Boot 1.x版本中，可以通过在application.properties或application.yml中设置<code>security.basic.enabled</code>属性来启动或禁用Spring Security的基本认证.<br> 当Spring项目中引入了Spring Security依赖的时候，项目会默认开启如下配置：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">security:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">  basic:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    enabled: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意</mark> ：Spring Boot 2.0引入了Spring Security 5，并随之移除了<code>security.basic.enabled</code>这个配置属性。在Spring Security 5中，默认情况下，如果你引入了Spring Security的依赖项，基础的安全特性会自动启用。</p></div><h3 id="spring-security基本原理" tabindex="-1"><a class="header-anchor" href="#spring-security基本原理"><span>Spring Security基本原理</span></a></h3><p>Spring Security的核心设计基于一系列过滤器（Filter）组成的过滤器链（Filter Chain），这些过滤器共同协作处理HTTP请求，确保每个请求在访问受保护资源前都经过适当的安全检查。</p><ol><li><p><strong>初始化阶段</strong>：</p><ul><li>Spring Security 在应用启动时初始化，通过Spring的IoC容器管理其组件。核心是<code>SecurityFilterChain</code>，它由多个过滤器组成，这些过滤器负责不同的安全任务，如认证（Authentication）、授权（Authorization）、会话管理、异常处理等。</li><li><code>FilterChainProxy</code> 是所有过滤器的入口点，它根据请求URL匹配对应的过滤器链，并依次调用链中的过滤器。</li></ul></li><li><p><strong>过滤器链</strong>：</p><ul><li>过滤器链包括但不限于： <ul><li><code>SecurityContextPersistenceFilter</code>：维护安全上下文（Security Context）跨请求的持续性。</li><li><code>UsernamePasswordAuthenticationFilter</code>：处理表单登录请求。</li><li><code>DefaultLoginPageGeneratingFilter</code> 和 <code>DefaultLogoutPageGeneratingFilter</code>：分别生成默认登录和注销页面。</li><li><code>ExceptionTranslationFilter</code>：捕获并处理认证和授权异常。</li><li><code>FilterSecurityInterceptor</code>：执行访问决策，决定用户是否有权访问请求的资源。</li></ul></li></ul></li><li><p><strong>认证流程</strong>：</p><ul><li>用户发起请求，请求到达<code>FilterChainProxy</code>。</li><li>如果用户未认证，根据配置可能被重定向至登录页面。</li><li>用户提交认证信息，如用户名和密码。</li><li><code>UsernamePasswordAuthenticationFilter</code>处理这些信息，尝试认证用户。</li><li>成功认证后，会创建一个<code>Authentication</code>对象，并将其存储在安全上下文中。</li></ul></li><li><p><strong>授权流程</strong>：</p><ul><li>经过认证的请求继续通过过滤器链，到达<code>FilterSecurityInterceptor</code>。</li><li>此过滤器使用访问决策管理器（Access Decision Manager）来决定用户是否有权限访问请求的资源。</li><li>如果用户有权限，请求继续处理；否则，将抛出访问被拒的异常。</li></ul></li></ol>`,12)),h(k,{id:"mermaid-147",code:"eJxV0E1OwkAYBuA9p+gFuIIG5EfQhQt3ky4IIdBNMVBXxMQqgapRR6OWCo2WVDbGTggSYhvlMszfLaSdxsps32e+752ptypHDekwl5LWJwOwNybGgr4jhhZkeiZL6fSWlO3w0Smb6MxzGdIxNLdPIp5dpxhOQrID6PCT3Lwxb8lNj827xIfyHyIDFKIc4P1r7D1jeMf6M2oF+PuRO3NujwXNRdvygNzCle+KfLV0iI5Eno/yAsgca42aqinViqY0Vemg1azW2m1FrQtWiFixI+oSA+LLl7hxMWm8C8jgh7o+f7AYQv/XhChuXALYGOLA39yI0RebOgKXomVlIB6OezP68SSScjhmdEHsc27BEO0B7HYp7MVfmyDzNUH78SRydU8DW1yQU7+P2MXU"}),a[5]||(a[5]=t('<p>此图简化展示了Spring Security处理请求的基本流程，从客户端请求开始，经过认证、授权，直到最终处理请求或拒绝访问的过程。实际应用中，流程可能更加复杂，涉及更多的过滤器和安全配置细节。</p><h3 id="spring-security配置示例" tabindex="-1"><a class="header-anchor" href="#spring-security配置示例"><span>Spring Security配置示例</span></a></h3><h4 id="配置的入口点" tabindex="-1"><a class="header-anchor" href="#配置的入口点"><span>配置的入口点</span></a></h4><ul><li><p><strong>WebSecurityConfigurerAdapter</strong>：在Spring Security 5以前，一般通过扩展<code>WebSecurityConfigurerAdapter</code>类来自定义安全配置。但是从Spring Security 5.4.0开始，推荐使用更灵活的Lambda配置风格。</p></li><li><p><strong>SecurityFilterChain</strong>：从Spring Security 5.4.0开始，建议使用<code>SecurityFilterChain</code>的Bean来进行配置。这种方式更加灵活，更易于组合和重用。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Spring Security 6.1新特性</p><p>在SpringSecurity6版本中<code>@EnableGlobalMethodSecurity</code>被弃用，使用了新的注解 <code>@EnableMethodSecurity</code>。</p></div><h4 id="核心配置元素" tabindex="-1"><a class="header-anchor" href="#核心配置元素"><span>核心配置元素</span></a></h4><ul><li><p><strong>身份验证</strong>：通过<code>.authenticationManager()</code>配置全局的身份验证策略。可以使用内存中的用户、JDBC或LDAP来存储用户信息。</p></li><li><p><strong>授权</strong>：使用<code>.authorizeRequests()</code>来定义哪些URL需要被保护，以及它们的访问权限。可以为特定路径指定角色或权限。</p></li><li><p><strong>表单登录</strong>：<code>.formLogin()</code>提供了基于表单的登录支持，包括定制登录页面和默认的登录/登出处理。</p></li><li><p><strong>HTTP基本认证</strong>：<code>.httpBasic()</code>用于简单的API的无状态认证（建议仅在测试和学习环境使用）</p></li><li><p><strong>跨站请求伪造（CSRF）保护</strong>：默认启用，可以通过<code>.csrf().disable()</code>来禁用，但不推荐。</p></li></ul>',7)),h(d,{id:"204",data:[{id:"SpringSecurity6+配置"},{id:"老版本配置"}],active:0,"tab-id":"Spring Security config"},{title0:e(({value:n,isActive:l})=>a[0]||(a[0]=[s("SpringSecurity6+配置")])),title1:e(({value:n,isActive:l})=>a[1]||(a[1]=[s("老版本配置")])),tab0:e(({value:n,isActive:l})=>a[2]||(a[2]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"@"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Configuration")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"@"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"EnableWebSecurity")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"@"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"EnableMethodSecurity")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," class"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," SecurityConfig"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Autowired")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," JwtAuthenticationFilter"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," jwtAuthenticationFilter"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Autowired")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," SysUserDetailsService"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," sysUserDetailsService"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Autowired")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    private"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," SysAuthorizationManager"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," authorizationManager"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"    /**")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     * 配置过滤器链，对login接口放行")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     */")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Bean")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," SecurityFilterChain"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," filterChain"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"HttpSecurity"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}}," http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," throws"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Exception"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"csrf"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(csrf "),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," csrf"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"disable"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"());")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"        // 放行login接口")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"authorizeHttpRequests"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(auth "),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"->"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," auth"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"requestMatchers"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"/auth/**"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"permitAll"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"                ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"anyRequest"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"access"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(authorizationManager)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        );")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"        // 将过滤器添加到过滤器链中")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"formLogin"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"Customizer"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"withDefaults"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"());")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"rememberMe"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"Customizer"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"withDefaults"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"());")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"        // 将过滤器添加到 UsernamePasswordAuthenticationFilter 之前")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"addFilterBefore"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(jwtAuthenticationFilter, "),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"UsernamePasswordAuthenticationFilter"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"class"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"build"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"    /**")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     * AuthenticationManager：负责认证的")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     * DaoAuthenticationProvider：负责将 sysUserDetailsService、passwordEncoder融合起来送到AuthenticationManager中")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     * "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-light-font-style":"italic","--shiki-dark":"#C678DD","--shiki-dark-font-style":"italic"}},"@param"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"italic","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}}," passwordEncoder")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     * "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-light-font-style":"italic","--shiki-dark":"#C678DD","--shiki-dark-font-style":"italic"}},"@return")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"     */")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Bean")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," AuthenticationManager"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," authenticationManager"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"PasswordEncoder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}}," passwordEncoder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"        DaoAuthenticationProvider"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," provider"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}}," ="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," DaoAuthenticationProvider"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        provider"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"setUserDetailsService"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(sysUserDetailsService);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"        provider"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"setPasswordEncoder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(passwordEncoder);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"        // 将provider放置进 AuthenticationManager 中")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"        ProviderManager"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," providerManager"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}}," ="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," ProviderManager"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(provider);")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," providerManager;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Bean")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"    public"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," PasswordEncoder"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," passwordEncoder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"        return"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," BCryptPasswordEncoder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:e(({value:n,isActive:l})=>a[3]||(a[3]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"@"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Configuration")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"@"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"EnableWebSecurity")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," class"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," WebSecurityConfig"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," extends"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," WebSecurityConfigurerAdapter"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Override")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  protected"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," void"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," configure"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"HttpSecurity"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}}," http"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," throws"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Exception"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      http")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"authorizeRequests"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"antMatchers"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"/"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"/home"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"permitAll"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"anyRequest"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"authenticated"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"and"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"formLogin"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"loginPage"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"/login"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"permitAll"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"and"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"logout"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"permitAll"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  @"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#E5C07B"}},"Autowired")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"  public"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," void"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," configureGlobal"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"AuthenticationManagerBuilder"),i("span",{style:{"--shiki-light":"#383A42","--shiki-light-font-style":"inherit","--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic"}}," auth"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," throws"),i("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Exception"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      auth")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"          ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"inMemoryAuthentication"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"              ."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"withUser"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"admin"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"password"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"admin"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"roles"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"USER"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),a[6]||(a[6]=t(`<h2 id="spring-security核心组件" tabindex="-1"><a class="header-anchor" href="#spring-security核心组件"><span>Spring Security核心组件</span></a></h2><h3 id="securityfilterchain" tabindex="-1"><a class="header-anchor" href="#securityfilterchain"><span>SecurityFilterChain</span></a></h3><p>在Spring Security中，<code>SecurityFilterChain</code>是一个核心的概念，它是过滤器链的集合，用于处理传入的HTTP请求的安全性。<code>SecurityFilterChain</code>负责将多个安全过滤器串联起来形成一个处理流程，每个过滤器执行其特定的安全功能，如身份验证、授权、CSRF保护等。</p><p>当一个HTTP请求到达应用时，它会首先被Spring的<code>DispatcherServlet</code>捕获，然后根据配置的<code>SecurityFilterChain</code>，通过一系列的安全过滤器进行处理。这些过滤器以链式的方式组织，允许开发者在适当的点插入自定义的安全逻辑。</p><p>在Spring Security 5.4.0之前，安全配置通常是通过继承<code>WebSecurityConfigurerAdapter</code>类并重写其中的方法来完成的。这种方式虽然简单，但在一些场景下可能会遇到局限性，特别是在需要定义多个安全配置时。</p><p>相比之下，使用<code>SecurityFilterChain</code> Bean的配置方式提供了更高的灵活性和更容易的重用性。它允许直接操作<code>HttpSecurity</code>对象来构建安全过滤器链，使得配置更加直观和声明式。</p><h3 id="authenticationmanager" tabindex="-1"><a class="header-anchor" href="#authenticationmanager"><span>AuthenticationManager</span></a></h3><p>AuthenticationManager是Spring Security中的一个核心接口，它主要负责处理身份认证。接口定义相当简单，只包含一个认证方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Authentication</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> authenticate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Authentication</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring Security中，<code>AuthenticationManager</code>接受一个<code>Authentication</code>对象作为未认证的请求，然后尝试对其进行认证。如果认证成功，它将返回一个已认证的<code>Authentication</code>实例，包含用户的权限等信息；如果认证失败，则抛出<code>AuthenticationException</code>。</p><p><code>AuthenticationManager</code>可以有多个实现，但最常用的是<code>ProviderManager</code>，它维护一个列表的<code>AuthenticationProvider</code>实例。每一个<code>AuthenticationProvider</code>也是一个身份认证的策略。当一个认证请求到来时：</p><ul><li><code>ProviderManager</code>将请求传递给每一个<code>AuthenticationProvider</code>。</li><li>每一个<code>AuthenticationProvider</code>尝试认证，并返回一个已认证的<code>Authentication</code>对象。</li><li>如果所有的<code>AuthenticationProvider</code>都不能认证请求，那么将抛出一个<code>AuthenticationException</code>。</li></ul><h3 id="userdetailsservice" tabindex="-1"><a class="header-anchor" href="#userdetailsservice"><span>UserDetailsService</span></a></h3><p><code>UserDetailsService</code>是Spring Security中的一个核心接口，它用于按用户名检索用户的详细信息。具体来说，它只定义了一个方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserDetails</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username) throws UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当用户尝试登录时，认证过程需要获取用户的详细信息进行比对，<code>UserDetailsService</code>的任务就是提供这些详细信息。</p><p><code>UserDetailsService</code>的<code>loadUserByUsername</code>方法接收一个用户名作为参数，返回一个<code>UserDetails</code>对象。<code>UserDetails</code>是另一个核心接口，它封装了用户的信息，如用户名、密码、权限等。</p><p>在实际应用中，开发者需要实现<code>UserDetailsService</code>接口，以提供访问应用特定存储（如数据库、LDAP等）的逻辑，从而获取<code>UserDetails</code>。Spring Security的认证管理器（<code>AuthenticationManager</code>）使用这个服务来获得用户信息并执行认证。</p><h4 id="userdetailsservice的使用" tabindex="-1"><a class="header-anchor" href="#userdetailsservice的使用"><span>UserDetailsService的使用</span></a></h4><p>实现<code>UserDetailsService</code>通常涉及创建一个新的类，实现<code>UserDetailsService</code>接口，并提供<code>loadUserByUsername</code>方法的具体实现。以下是一个简单的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyUserDetailsService</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetailsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">orElseThrow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;User not found with username: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> username));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> org.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">security</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userdetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="userdetailsservice注意事项" tabindex="-1"><a class="header-anchor" href="#userdetailsservice注意事项"><span>UserDetailsService注意事项</span></a></h4><p>(1). <strong>异常处理</strong>：如果<code>loadUserByUsername</code>未能找到用户，它应该抛出一个<code>UsernameNotFoundException</code>。</p><p>(2). <strong>密码加密</strong>：在验证用户时，Spring Security会比较提交的密码和<code>UserDetails</code>中存储的密码。为了安全，存储的密码应该是加密过的，开发者需要配置一个密码编码器（如<code>BCryptPasswordEncoder</code>）。</p><p>(3). <strong>权限和角色</strong>：<code>UserDetails</code>应该包含用户的权限（通常以角色的形式）。这对应用的安全访问控制至关重要。在返回的<code>UserDetails</code>中，可以设置用户的角色或权限。</p><p>(4). <strong>定制<code>UserDetails</code></strong>：可以通过实现自定义的<code>UserDetails</code>类来扩展用户信息。这对于存储应用特定的用户信息很有用。</p><h3 id="userdetails" tabindex="-1"><a class="header-anchor" href="#userdetails"><span>UserDetails</span></a></h3><p><code>UserDetails</code> 是 Spring Security 中的一个核心接口，用于封装认证主体的详细信息。任何需要身份验证的实体都可以实现此接口来提供必要的信息。</p><p>UserDetails 提供了以下关键信息：</p><p>（1）<strong>用户名</strong>：通过 <code>getUsername</code> 方法获取，通常是用户登录时用的标识信息。<br> （2）<strong>密码</strong>：通过 <code>getPassword</code> 方法获取，通常是用于认证过程中比对的加密后的密码。<br> （3）<strong>权限</strong>：通过 <code>getAuthorities</code> 方法获取，返回一个 <code>GrantedAuthority</code> 对象的集合，表示用户所拥有的权限和角色。<br> （4）<strong>账户状态</strong>：通过以下几个布尔值方法获取，用于表明用户的账户状态。</p><ul><li><code>isAccountNonExpired()</code>：账户是否未过期。</li><li><code>isAccountNonLocked()</code>：账户是否未被锁定。</li><li><code>isCredentialsNonExpired()</code>：凭证（密码）是否未过期。</li><li><code>isEnabled()</code>：账户是否启用。</li></ul><h4 id="实现-userdetails-接口" tabindex="-1"><a class="header-anchor" href="#实现-userdetails-接口"><span>实现 UserDetails 接口</span></a></h4><p>Spring Security 提供了一个具体的 <code>UserDetails</code> 实现，即 <code>org.springframework.security.core.userdetails.User</code> 类。在大多数情况下，可以直接使用或扩展此类而不必从头开始实现 <code>UserDetails</code> 接口。</p><p>为了满足特定需求，您可以创建一个实现 <code>UserDetails</code> 的自定义类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomUserDetails</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 用户实体中的其他字段。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 返回用户密码。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 返回用户名或邮箱等标识。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现其他的方法...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 加入自定义字段及方法，例如用户ID、姓名等。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="grantedauthority" tabindex="-1"><a class="header-anchor" href="#grantedauthority"><span>GrantedAuthority</span></a></h3><p><code>GrantedAuthority</code>是Spring Security框架中的一个核心接口，用于表示用户所拥有的权限或者角色。在认证过程中，一旦用户成功验证了他们的凭证（如用户名和密码），系统就会创建一个<code>Authentication</code>对象，该对象中包含了关于已认证用户的详细信息，其中包括一组<code>GrantedAuthority</code>对象。这一组<code>GrantedAuthority</code>代表了用户被授予的所有权限，用于后续的授权决策。</p><h4 id="核心特点" tabindex="-1"><a class="header-anchor" href="#核心特点"><span>核心特点：</span></a></h4><ul><li><p><strong>权限表示</strong>：每个<code>GrantedAuthority</code>实例都代表一个权限或角色，例如&quot;ROLE_USER&quot;、&quot;ROLE_ADMIN&quot;等。在Spring Security中，角色通常以&quot;ROLE_&quot;为前缀，以便区分普通权限。</p></li><li><p><strong>集合形式</strong>：<code>Authentication</code>接口的<code>getAuthorities()</code>方法返回的是<code>Collection&lt;GrantedAuthority&gt;</code>类型，表明一个用户可以拥有多个权限或角色。</p></li><li><p><strong>简单实现</strong>：最常见的<code>GrantedAuthority</code>实现类是<code>SimpleGrantedAuthority</code>，它仅包含一个权限字符串，没有额外的逻辑或状态。</p></li><li><p><strong>授权决策</strong>：在进行访问控制时，Spring Security会检查用户拥有的<code>GrantedAuthority</code>是否满足资源访问所需的权限。例如，使用<code>@PreAuthorize(&quot;hasRole(&#39;ROLE_ADMIN&#39;)&quot;)</code>注解的方法会检查用户是否具有&quot;ROLE_ADMIN&quot;权限。</p></li></ul><h3 id="passwordencoder" tabindex="-1"><a class="header-anchor" href="#passwordencoder"><span><strong>PasswordEncoder</strong></span></a></h3><p><code>PasswordEncoder</code> 是 Spring Security 提供的用于密码加密的接口，它是 Spring Security 认证过程中非常关键的部分。在存储或验证用户密码时，使用 <code>PasswordEncoder</code> 可以确保以安全的方式处理密码。</p><p><code>PasswordEncoder</code> 接口定义了主要的两个方法：</p><ul><li><p><strong>encode(CharSequence rawPassword)</strong>：接收一个原始密码并返回加密后的密码字符串。这个方法在用户注册或更改密码时被用来加密新密码。</p></li><li><p><strong>matches(CharSequence rawPassword, String encodedPassword)</strong>：比较原始密码与加密后的密码是否匹配。在用户登录时，用来验证用户输入的密码与数据库中存储的加密密码是否符合。</p></li></ul><h4 id="常用实现" tabindex="-1"><a class="header-anchor" href="#常用实现"><span>常用实现</span></a></h4><p>Spring Security 提供了多种 <code>PasswordEncoder</code> 的实现，其中 <code>BCryptPasswordEncoder</code> 是其中一种广泛使用的实现，它使用 BCrypt 强哈希函数来加密密码。</p><p>其他实现如 <code>NoOpPasswordEncoder</code>（不进行加密，不推荐使用）、<code>Pbkdf2PasswordEncoder</code>、<code>SCryptPasswordEncoder</code> 等，根据需求选择合适的加密方式。</p><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h4><h4 id="配置-passwordencoder-bean" tabindex="-1"><a class="header-anchor" href="#配置-passwordencoder-bean"><span>配置 PasswordEncoder Bean</span></a></h4><p>首先，需要在 Spring Security 配置中定义一个 <code>PasswordEncoder</code> 的 Bean，通常选择使用 <code>BCryptPasswordEncoder</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.context.annotation.Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.security.crypto.password.PasswordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PasswordEncoder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> passwordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BCryptPasswordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加密密码" tabindex="-1"><a class="header-anchor" href="#加密密码"><span>加密密码</span></a></h4><p>当用户注册或更改密码时，使用 <code>PasswordEncoder</code> 加密密码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PasswordEncoder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> passwordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> registerUser</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> rawPassword) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> encodedPassword </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> passwordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rawPassword);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 将加密后的密码存储到数据库中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="验证密码" tabindex="-1"><a class="header-anchor" href="#验证密码"><span>验证密码</span></a></h4><p>用户登录时，比较输入的密码与数据库中加密的密码是否匹配：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> login</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> rawPassword) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 从数据库获取用户信息，包括加密的密码</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> passwordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rawPassword, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 密码匹配，登录成功</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 登录失败</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ol><li><p>当使用 <code>BCryptPasswordEncoder</code> 时，每次加密的结果都会不同，这是因为它在内部生成了一个随机盐（Salt）。但即便如此，<code>matches</code> 方法仍能正确验证原始密码与加密密码是否匹配。</p></li><li><p>强烈建议不要使用 <code>NoOpPasswordEncoder</code>，因为它不会对密码进行加密，这会大大降低应用的安全性。</p></li><li><p>实现自定义的 <code>PasswordEncoder</code> 时，务必确保它的加密算法足够强大，能够抵御对密码的猜测与破解攻击。</p></li></ol><p>通过这些方式，<code>PasswordEncoder</code> 提供了一种灵活且安全的机制来处理用户密码的存储与验证，是构建安全应用的重要基石。</p><div class="hint-container info"><p class="hint-container-title">BCryptPasswordEncoder工作原理</p><p><code>BCryptPasswordEncoder</code> 使用的是散列技术，它将密码转换成一个固定长度的串（称为散列或哈希），这个过程是不可逆的</p><h3 id="盐-salt-的角色" tabindex="-1"><a class="header-anchor" href="#盐-salt-的角色"><span>盐（Salt）的角色</span></a></h3><p>盐（Salt）是一个随机生成的数据片段，它在密码加密过程中与原始密码一起混合，目的是增加密码加密形式的随机性，从而保护密码不被通过彩虹表等方式破解。</p><h3 id="bcryptpasswordencoder-工作流程" tabindex="-1"><a class="header-anchor" href="#bcryptpasswordencoder-工作流程"><span>BCryptPasswordEncoder 工作流程</span></a></h3><ol><li><p><strong>加密时</strong>：当 <code>encode</code> 方法被调用时，<code>BCryptPasswordEncoder</code> 内部会生成一个新的随机盐。然后，它将盐和原始密码结合，并执行加密算法。算法的结果是一个包含盐的加密密码。这就意味着，即使多次使用同一个原始密码，由于盐的随机性，每次生成的加密密码都是唯一的。</p></li><li><p><strong>匹配时</strong>：<code>matches</code> 方法接收一个原始密码和一个已加密的密码。加密密码字符串的结构设计成包含了用于该特定密码加密的盐。因此，当进行匹配时，<code>BCryptPasswordEncoder</code> 提取出存储在加密密码中的盐，并使用它来对提供的原始密码进行加密。如果原始密码正确，即使它是用不同的盐加密的，这种再次加密的结果应该与存储的加密密码相同。</p></li></ol><h3 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节"><span>实现细节</span></a></h3><p>BCrypt 加密算法的输出格式通常遵循以下结构：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$2a$strength$salt$encryptedpassword</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>$2a$</code> 是算法的版本。</li><li><code>strength</code> 是一个表示算法计算复杂度的数字（比如 10, 12 等），这个数字越高，计算所需的时间越长。</li><li><code>salt</code> 是算法使用的盐。</li><li><code>encryptedpassword</code> 是盐和密码经过算法计算得到的哈希值。</li></ul><p>由于加密字符串内含有生成它的盐，所以 <code>matches</code> 方法可以在不知道原始盐的情况下验证密码。</p><p>这种设计巧妙地解决了需要保留盐值以供以后密码验证的问题。盐值无需单独存储，因为它已经是加密密码字符串的一部分，这也就简化了系统的设计和实现。</p></div><h2 id="spring-security权限管理" tabindex="-1"><a class="header-anchor" href="#spring-security权限管理"><span>Spring Security权限管理</span></a></h2><h3 id="enablemethodsecurity" tabindex="-1"><a class="header-anchor" href="#enablemethodsecurity"><span>@EnableMethodSecurity</span></a></h3><ul><li><strong>作用</strong>：此注解用于开启Spring Security的方法安全支持，允许你在方法级别上控制访问权限。它替代了早期版本中的@EnableGlobalMethodSecurity。</li><li><strong>特性</strong>：支持注解驱动的权限检查，如<code>@PreAuthorize</code>, <code>@PostAuthorize</code>, <code>@PreFilter</code>, <code>@PostFilter</code>等，并且默认启用了SpEL表达式。</li><li><strong>使用示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableMethodSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 配置类的其他部分</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="preauthorize-postauthorize" tabindex="-1"><a class="header-anchor" href="#preauthorize-postauthorize"><span>@PreAuthorize, @PostAuthorize</span></a></h3><ul><li><strong>@PreAuthorize</strong>：在方法执行前进行权限检查。如果权限检查失败，则方法不会被执行。</li><li><strong>@PostAuthorize</strong>：在方法执行后进行权限检查。这可以用来根据方法的返回值决定是否允许访问。</li><li><strong>使用示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasRole(&#39;ADMIN&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> adminOnlyMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 仅管理员可访问</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;returnObject.username == authentication.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUserDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 返回用户详情，但只有当请求的用户与登录用户相同时才允许</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hasauthority-hasrole" tabindex="-1"><a class="header-anchor" href="#hasauthority-hasrole"><span>hasAuthority, hasRole</span></a></h3><ul><li><strong>hasAuthority</strong>: 用于检查用户是否拥有指定的权限（权限通常指细粒度的权限标识，如&quot;read:article&quot;）。</li><li><strong>hasRole</strong>: 用于检查用户是否拥有指定的角色（角色是权限的集合，如&quot;ROLE_ADMIN&quot;）。注意，使用<code>hasRole</code>时，实际上需要指定以&quot;ROLE_&quot;为前缀的角色名，除非你自定义了角色前缀。</li><li><strong>示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasAuthority(&#39;read:article&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Article</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> readArticles</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 具有读文章权限的用户可访问</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasRole(&#39;ADMIN&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> adminTask</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 管理员角色可访问</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-security-spel" tabindex="-1"><a class="header-anchor" href="#spring-security-spel"><span>Spring Security SpEL</span></a></h3><p>Spring Security SpEL 是基于标准的Spring Expression Language (SpEL) 的一个特化应用，主要服务于Spring Security框架中的安全需求。</p><ul><li><strong>简介</strong>：Spring Expression Language (SpEL) 是Spring框架提供的强大表达式语言，用于在运行时查询和操作对象图。在Spring Security中，SpEL被广泛用于进行复杂的权限判断。</li><li><strong>基本语法</strong>：SpEL 支持各种操作符，如逻辑运算符(<code>and</code>, <code>or</code>, <code>!</code>)、关系运算符(<code>==</code>, <code>&lt;</code>, <code>&gt;</code>等)、函数调用等。</li><li><strong>示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@myBean.method(authentication) and hasRole(&#39;USER&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> someMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 示例中调用了自定义bean的方法并结合角色检查</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">实际项目中的使用建议与注意事项</p><ol><li><strong>最小权限原则</strong>：为每个角色或用户分配刚好足够的权限来完成其工作，避免过度授权。</li><li><strong>使用具体权限而非泛用角色</strong>：尽量使用<code>hasAuthority</code>指定具体权限，这样可以实现更细粒度的权限控制。</li><li><strong>安全性与性能考量</strong>：虽然方法级别的安全控制提供了灵活性，但也可能影响性能，特别是在复杂表达式或大量数据过滤的情况下。</li><li><strong>测试</strong>：确保充分测试所有安全相关的逻辑，包括边缘情况和异常处理，以防止安全漏洞。</li><li><strong>文档化权限设计</strong>：清晰记录每个角色和权限的定义，便于维护和审计。</li><li><strong>自定义需求</strong>：Spring Security高度可配置，如果标准注解不满足需求，可以通过自定义访问决策管理器等扩展点来实现更复杂的安全策略。</li></ol></div>`,75))])}const F=p(g,[["render",A],["__file","sec.html.vue"]]),v=JSON.parse('{"path":"/java/frame/spring/sec.html","title":"Spring Security","lang":"en-US","frontmatter":{"order":80,"title":"Spring Security","description":"SpringSecurity快速入门 Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块。下面将以SpringBoot来集成Spring Security为例 引入Spring Security 在Spring Boot项目，引入spring-boot-starter-security 接下来我们创建一个He...","head":[["meta",{"property":"og:url","content":"https://x.app/java/frame/spring/sec.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"Spring Security"}],["meta",{"property":"og:description","content":"SpringSecurity快速入门 Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块。下面将以SpringBoot来集成Spring Security为例 引入Spring Security 在Spring Boot项目，引入spring-boot-starter-security 接下来我们创建一个He..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Security\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"SpringSecurity快速入门","slug":"springsecurity快速入门","link":"#springsecurity快速入门","children":[{"level":3,"title":"引入Spring Security","slug":"引入spring-security","link":"#引入spring-security","children":[]},{"level":3,"title":"Spring Security基本原理","slug":"spring-security基本原理","link":"#spring-security基本原理","children":[]},{"level":3,"title":"Spring Security配置示例","slug":"spring-security配置示例","link":"#spring-security配置示例","children":[]}]},{"level":2,"title":"Spring Security核心组件","slug":"spring-security核心组件","link":"#spring-security核心组件","children":[{"level":3,"title":"SecurityFilterChain","slug":"securityfilterchain","link":"#securityfilterchain","children":[]},{"level":3,"title":"AuthenticationManager","slug":"authenticationmanager","link":"#authenticationmanager","children":[]},{"level":3,"title":"UserDetailsService","slug":"userdetailsservice","link":"#userdetailsservice","children":[]},{"level":3,"title":"UserDetails","slug":"userdetails","link":"#userdetails","children":[]},{"level":3,"title":"GrantedAuthority","slug":"grantedauthority","link":"#grantedauthority","children":[]},{"level":3,"title":"PasswordEncoder","slug":"passwordencoder","link":"#passwordencoder","children":[]}]},{"level":2,"title":"Spring Security权限管理","slug":"spring-security权限管理","link":"#spring-security权限管理","children":[{"level":3,"title":"@EnableMethodSecurity","slug":"enablemethodsecurity","link":"#enablemethodsecurity","children":[]},{"level":3,"title":"@PreAuthorize, @PostAuthorize","slug":"preauthorize-postauthorize","link":"#preauthorize-postauthorize","children":[]},{"level":3,"title":"hasAuthority, hasRole","slug":"hasauthority-hasrole","link":"#hasauthority-hasrole","children":[]},{"level":3,"title":"Spring Security SpEL","slug":"spring-security-spel","link":"#spring-security-spel","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":16.72,"words":5016},"filePathRelative":"java/frame/spring/sec.md","localizedDate":"January 10, 2025","excerpt":"<h2>SpringSecurity快速入门</h2>\\n<p>Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块。下面将以SpringBoot来集成Spring Security为例</p>\\n<h3>引入Spring Security</h3>\\n<p>在Spring Boot项目，引入spring-boot-starter-security</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"xml\\" data-title=\\"xml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">        &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;org.springframework.boot&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;spring-boot-starter-security&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">        &lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{F as comp,v as data};
