import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as t,d as o,w as l,r as g,o as k,e,a as i}from"./app-CnSGisYC.js";const p={};function c(u,s){const r=g("Tabs");return k(),d("div",null,[s[12]||(s[12]=t(`<h2 id="jvm核心基础" tabindex="-1"><a class="header-anchor" href="#jvm核心基础"><span>JVM核心基础</span></a></h2><h3 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h3><ol><li><strong>Bootstrap 类加载器</strong>：负责加载核心的 Java 类库（如 <code>java.lang.*</code>）。</li><li><strong>Extension 类加载器</strong>：负责加载扩展库（如 <code>javax.*</code>）。</li><li><strong>Application 类加载器</strong>： 负责加载应用程序类路径（<code>CLASSPATH</code>）下的类。</li><li><strong>自定义类加载器</strong>： 用户自定义的类加载器，扩展类加载机制。 继承 <code>java.lang.ClassLoader</code> 类并重写 <code>findClass</code> 和 <code>loadClass</code> 方法。</li></ol><div class="hint-container tip"><p class="hint-container-title">JVM类加载过程</p><ol><li><strong>加载（Loading）</strong>： 读取字节码文件。 创建 <code>Class</code> 对象。 将 <code>Class</code> 对象与类加载器关联。</li><li><strong>链接（Linking）</strong>： <ul><li><strong>验证（Verification）</strong>：确保字节码文件符合 JVM 规范。</li><li><strong>准备（Preparation）</strong>：为类的静态变量分配内存并设置默认值。</li><li><strong>解析（Resolution）</strong>：将符号引用解析为直接引用。</li></ul></li><li><strong>初始化（Initialization）</strong>： 执行静态初始化块和静态变量的赋值操作。<br> 使用，卸载</li></ol></div><h3 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制"><span>双亲委派机制</span></a></h3><p>当一个类加载器收到类加载请求时，首先委托给父类加载器去加载。递归向上，直到最顶层的 Bootstrap 类加载器。如果父类加载器无法加载（即在其加载路径中找不到指定的类），子类加载器才会尝试自己加载。 <strong>双亲委派模型的好处</strong>：</p><ol><li><strong>安全性</strong>：防止核心类库被篡改。</li><li><strong>避免类的重复加载</strong>：确保一个类在 JVM 中只有一个加载实例。</li><li><strong>模块化</strong>：不同类加载器负责不同的类加载任务，职责明确。</li></ol><h3 id="运行时数据区" tabindex="-1"><a class="header-anchor" href="#运行时数据区"><span>运行时数据区</span></a></h3><div class="hint-container info"><p class="hint-container-title">JVM内存划分</p><ul><li><p>程序计数器：线程私有，用于记录当前线程所执行的字节码指令的位置。</p></li><li><p>Java虚拟机栈：线程私有，用于存储局部变量、操作数栈、动态链接和方法出口等信息，每个方法被调用时都会创建一个新的栈帧。</p></li><li><p>本地方法栈：线程私有，与Java虚拟机栈类似，但用于支持Native方法的调用。</p></li><li><p>Java堆：线程共享，用于存储所有实例对象和数组。这是垃圾收集器管理的主要区域。</p></li><li><p>方法区：线程共享，存储已加载的类信息、常量、静态变量、即时编译后的代码等数据。</p></li><li><p>直接内存：可以通过<code>java.nio.ByteBuffer</code>的<code>allocateDirect()</code>方法来分配和使用</p></li></ul></div><p>方法区只是一个规范，其实现方式在jdk1.7及之前为永久代，jdk1.8则为元空间（MetaSpace），且元空间存在于本地内存（Native Memory）</p><ul><li>永久代中的 interned Strings(字符串常量池）和 class static variables(类静态变量) 转移到了Java heap （JDK1.7）</li></ul><div class="hint-container tip"><p class="hint-container-title">Java8为什么要将永久代替换成Metaspace ?</p><ul><li>字符串存在永久代中，容易出现性能问题和内存溢出</li><li>类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出</li><li>永久代会为GC带来不必要的复杂度，并且回收效率偏低。</li></ul></div><h3 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出"><span>内存溢出</span></a></h3><p><strong>JVM 方法区是否会出现内存溢出?</strong><br> 是的，JVM 方法区（或元空间）可能会出现内存溢出，通常是因为类加载过多或元数据过多。可以通过调整 <code>-XX:MaxMetaspaceSize</code> 参数来限制方法区的大小。</p><p><strong>JVM 有那几种情况会产生 OOM（内存溢出）？</strong></p><ul><li>堆内存溢出（<code>java.lang.OutOfMemoryError: Java heap space</code>）</li><li>栈内存溢出（<code>java.lang.StackOverflowError</code>）</li><li>方法区内存溢出（<code>java.lang.OutOfMemoryError: Metaspace</code>）</li><li>直接内存溢出（<code>java.lang.OutOfMemoryError: Direct buffer memory</code>）</li></ul><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h3><p><strong>Q17: Java 中的强引用、软引用、弱引用和虚引用分别是什么？</strong></p><ul><li><strong>强引用</strong>：普通的对象引用，如 <code>Object obj = new Object()</code>。只要强引用存在，垃圾回收器就不会回收对象。</li><li><strong>软引用</strong>：通过 <code>SoftReference</code> 创建，用于实现内存敏感的缓存。当内存不足时，垃圾回收器会回收软引用指向的对象。</li><li><strong>弱引用</strong>：通过 <code>WeakReference</code> 创建，用于实现弱引用关联的数据结构。弱引用指向的对象在下一次垃圾回收时一定会被回收。</li><li><strong>虚引用</strong>：通过 <code>PhantomReference</code> 创建，主要用于对象销毁时的回调通知。虚引用指向的对象在垃圾回收时会被放入引用队列，但不会被回收。</li></ul><h2 id="jvm垃圾回收" tabindex="-1"><a class="header-anchor" href="#jvm垃圾回收"><span>JVM垃圾回收</span></a></h2><h3 id="可达性分析" tabindex="-1"><a class="header-anchor" href="#可达性分析"><span>可达性分析</span></a></h3><p>可达性分析算法会从 <mark>根对象集</mark> 开始，这组根对象集通常包括：</p><ul><li>所有活动线程的栈帧中的局部变量。</li><li>方法区（即永久代或元空间）中的静态变量。</li><li>方法区中的某些常量引用。</li><li>本地方法栈中JNI（Java Native Interface）的引用。</li></ul><p>沿着对象之间的引用链进行深度优先或广度优先搜索，标记所有能从根对象直接或间接引用到的对象。未被标记的对象被视为不可达，可以被垃圾回收器回收。</p><details class="hint-container details"><summary>三色标记算法</summary><p>三色标记算法是可达性分析的一种具体实现方法，通过将对象分为白色、灰色和黑色三种状态来追踪对象的可达性。</p><ul><li>白色（White）：表示尚未访问的对象。初始状态下，所有对象都是白色的。</li><li>灰色（Gray）：表示已被访问但其引用的对象尚未全部访问的对象。灰色对象是当前正在处理的对象。</li><li>黑色（Black）：表示已被访问且其引用的对象也已全部访问的对象。黑色对象及其引用的对象都是可达的。</li></ul><p>过程：</p><ul><li>初始标记：从根对象开始，将所有根对象标记为灰色。</li><li>并发标记：从灰色对象开始，递归地访问其引用的对象。将访问到的白色对象标记为灰色，将当前处理的灰色对象标记为黑色。</li><li>重新标记：校正并发标记阶段可能出现的引用变化，确保所有可达对象都被正确标记。</li><li>并发清除：清除所有仍为白色的对象。</li></ul></details><h3 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h3><p>常见的垃圾回收算法包括标记-清除算法、复制算法、标记-整理算法和分代收集算法。</p><ul><li><p>标记-清除算法: 标记存活对象，清除未标记的垃圾对象。存在内存碎片化和效率问题</p></li><li><p>标记-复制算法：将可用内存分为两个相等的部分，每次只使用其中一个部分。当这部分的内存用完时，垃圾回收器会检查这部分内存中的对象，将存活的对象复制到另一部分的内存中。解决了内存碎片化问题，但内存利用率只有50%，如果存活对象过多，复制成本会很高。</p></li><li><p>标记-整理算法：在标记-清除的基础上，将存活对象复制到内存区域的一端，从而整理内存空间，消除碎片。但仍需要遍历整个堆，对象移动可能会导致额外的开销，尤其是当存活对象很多时。</p></li><li><p>分代收集算法：基于“代际假说”。将将堆分为年轻代和老年代，年轻代使用复制算法，而老年代通常使用标记-清除 或 标记-整理算法。</p></li></ul><p>Parallel Scavenge 使用标记-复制算法，Parallel Old 使用标记-整理算法。</p><h3 id="堆内存划分" tabindex="-1"><a class="header-anchor" href="#堆内存划分"><span>堆内存划分</span></a></h3><p>分代收集（Generational Collection） 基于“代际假说”：新创建的对象倾向于较快地变成垃圾，而存活时间长的对象则倾向于继续存活。</p><p>在JDK 1.8及之前的版本中，堆内存被划分为几个主要的区域（从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆可以细分为）：</p><ul><li>年轻代（Young Generation）</li><li>老年代（Old Generation）</li><li>永久代（Permanent Generation）</li></ul><p>从JDK 1.8开始，永久代被元空间（Metaspace）取代，元空间使用的是本机内存而不是堆内存。因此，堆内存划分变为：年轻代（Young Generation）和老年代（Old Generation）</p><figure><img src="https://image.ventix.top/java/image-20220216221349177.png" alt="堆内存划分" tabindex="0" loading="lazy"><figcaption>堆内存划分</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Heap</p><h4 id="年轻代-young-generation" tabindex="-1"><a class="header-anchor" href="#年轻代-young-generation"><span><strong>年轻代（Young Generation）</strong>：</span></a></h4><p>年轻代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁。年轻代分 成1个 <strong>Eden Space</strong> 和2个 <strong>Suvivor Space</strong>（from 和to）</p><ul><li><strong>Eden Space</strong>：这是年轻代中最大的部分，新创建的对象首先在这里分配。</li><li><strong>Survivor Spaces</strong>：分为两个相等大小的部分，S0和S1（在HotSpot JVM中，分别叫做From和To空间）。每次Minor GC后，存活的对象会被移动到另一个空的Survivor空间中，或者如果对象足够大或存活时间足够长，则直接进入老年代。</li></ul><h4 id="老年代-old-generation-tenured-generation" tabindex="-1"><a class="header-anchor" href="#老年代-old-generation-tenured-generation"><span><strong>老年代（Old Generation / Tenured Generation）</strong>：</span></a></h4><p>老年代用于存储长期存活的对象，或者在年轻代中无法容纳的大对象（Large Objects）。内存大小相对会比较大，垃圾回收也相对没有那么频繁。</p><h4 id="永久代-permanent-generation-元空间-metaspace" tabindex="-1"><a class="header-anchor" href="#永久代-permanent-generation-元空间-metaspace"><span><strong>永久代（Permanent Generation）/ 元空间（Metaspace）</strong>：</span></a></h4><p>用于存储类的元数据、静态变量、常量池等信息。在JDK 1.8中，永久代被元空间（Metaspace）取代。</p></div><p><strong>为什么 Java 新生代被划分为 S0、S1 和 Eden 区？</strong><br> 新生代被划分为 Eden 区和两个 Survivor 区（S0 和 S1），这样可以在 Minor GC 时使用复制算法，将存活对象从 Eden 区复制到一个 Survivor 区，另一个 Survivor 区作为备用，这样可以高效地回收短生命周期的对象。</p><h3 id="垃圾回收方式" tabindex="-1"><a class="header-anchor" href="#垃圾回收方式"><span>垃圾回收方式</span></a></h3><div class="hint-container info"><p class="hint-container-title">常见垃圾回收方式</p><h4 id="部分收集器-partial-gc" tabindex="-1"><a class="header-anchor" href="#部分收集器-partial-gc"><span>部分收集器（Partial GC）</span></a></h4><ul><li><p><strong>Minor GC / Young GC</strong>：这是年轻代（Young Generation）的垃圾回收过程，主要发生在Eden区。当Eden区满时，Minor GC会被触发，将存活的对象移动到Survivor区或晋升到老年代。Minor GC通常频率较高，停顿时间较短。</p></li><li><p><strong>Major GC / Old GC</strong>：针对老年代（Old Generation）进行垃圾回收，通常是因为老年代空间不足。</p></li></ul><h4 id="整堆收集器-full-gc" tabindex="-1"><a class="header-anchor" href="#整堆收集器-full-gc"><span>整堆收集器（Full GC）</span></a></h4><p>整堆收集器对整个堆内存进行垃圾回收，包括年轻代、老年代以及永久代（PermGen）或元空间（Metaspace）。Full GC通常在以下情况发生：</p><ul><li>当老年代空间不足，且之前的Minor GC未能释放足够的空间时。</li><li>当永久代或元空间空间不足。</li><li>显式调用<code>System.gc()</code>时，尽管这并不保证立即执行Full GC，且通常不推荐这样做。</li></ul><h4 id="mixed-gc" tabindex="-1"><a class="header-anchor" href="#mixed-gc"><span>Mixed GC</span></a></h4><p>Mixed GC是一个比较新的概念，主要出现在现代的垃圾回收器如G1（Garbage First）中。它是一种混合了年轻代和老年代回收的策略，在清理年轻代的同时，也会清理一部分老年代区域，这种策略有助于减少Full GC的发生，降低停顿时间。</p></div><p><strong>JVM 新生代垃圾回收如何避免全堆扫描？</strong><br> 新生代垃圾回收通过使用卡表（Card Table）和记忆集（Remembered Set）来跟踪跨代引用，从而避免全堆扫描。卡表记录了老年代对象对新生代对象的引用，记忆集记录了跨代引用的变化。</p><h3 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器"><span>垃圾回收器</span></a></h3><ol><li><p><strong>Serial</strong>(Serial &amp; Serial Old)：单线程垃圾回收器，适用于单核处理器和小内存应用，简单高效。</p></li><li><p><strong>ParNew</strong>: 多线程版本的 Serial 垃圾回收器，专门用于新生代的垃圾回收，与 CMS 收集器配合使用，提高并发性能。</p></li><li><p><strong>CMS（Concurrent Mark Sweep）</strong>：并发标记清除垃圾回收器，旨在减少停顿时间，适用于对响应时间有较高要求的应用。</p></li><li><p><strong>Parallel Scavenge（PS）</strong>：多线程垃圾回收器，专注于最大化吞吐量，适用于多核处理器和高性能要求的应用。</p></li><li><p><strong>Parallel Old</strong>：多线程垃圾回收器，专门用于老年代的垃圾回收，与 Parallel Scavenge 配合使用，优化吞吐量。</p></li><li><p><strong>G1（Garbage First）</strong>：分区垃圾回收器，通过预测和优化垃圾回收时间，平衡吞吐量和停顿时间，适用于大内存应用。</p></li><li><p><strong>ZGC（Z Garbage Collector）</strong>：低延迟垃圾回收器，设计目标是实现毫秒级的停顿时间，适用于需要极高响应速度的应用。</p></li><li><p><strong>Shenandoah</strong>：低延迟垃圾回收器，通过并发标记和并发移动对象来减少停顿时间，适用于需要低延迟和高吞吐量的应用。</p></li><li><p><strong>Epsilon</strong>：无操作垃圾回收器，不进行实际的垃圾回收，适用于测试和基准测试，帮助评估应用的内存使用情况。</p></li></ol><h2 id="性能调优与工具" tabindex="-1"><a class="header-anchor" href="#性能调优与工具"><span>性能调优与工具</span></a></h2><p>JVM 垃圾回收调优的主要目标是减少停顿时间、提高吞吐量和降低内存占用。具体目标包括减少 Full GC 的频率、优化新生代和老年代的比例、调整垃圾收集器的参数等。</p><p>使用监控工具（如 Prometheus + Grafana、VisualVM、JConsole 等）持续监控内存使用情况，可以及时发现潜在问题。</p><h3 id="内存泄漏分析" tabindex="-1"><a class="header-anchor" href="#内存泄漏分析"><span>内存泄漏分析</span></a></h3><p>进行内存泄漏分析的方法包括：</p><div class="hint-container info"><p class="hint-container-title">内存泄漏分析过程</p><ol><li>生成堆转储文件（Heap Dump）</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 或者使用jps, 找到 Java 进程的 PID</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jmap</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -dump:live,format=b,file=/path/to/heapdump.hprof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># jcmd &lt;pid&gt; GC.heap_dump /path/to/heapdump.hprof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发生OOM时自动生成 dump 文件 / 自动执行特定脚本或命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:HeapDumpPath=/path/to/dumps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your-application.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:OnError=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sh /path/to/your/script.sh&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your-application.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意生成dump文件可能会很大，耗时较长，且可能会包含用户数据等敏感信息</p><ol start="2"><li>分析堆转储文件（Heap Dump）</li></ol><p>使用 Memory Analyzer Tool (MAT) / VisualVM 查看内存占用和对象数量和使用情况</p><ol start="3"><li><p>定位问题：查看 MAT 自动生成的内存泄漏报告，重点关注潜在的泄漏对象。使用 OQL 查询特定对象，例如查找所有未被释放的连接对象<br> 分析对象引用</p></li><li><p>解决问题：代码审查 + 优化配置 + 测试验证</p></li></ol><ul><li>确保对象在不再需要时被及时释放。避免不必要的全局变量和静态变量，防止对象长时间持有。</li><li>根据应用的特点调整垃圾回收器和堆内存大小。</li><li>进行压力测试，模拟高负载场景，验证内存使用情况。</li></ul></div><h3 id="频繁fullgc" tabindex="-1"><a class="header-anchor" href="#频繁fullgc"><span>频繁FullGC</span></a></h3><p>首先要先明白什么情况下会触发Full GC:</p><ul><li>老年代空间不足: 当老年代的空间不足以容纳从年轻代晋升的对象时，会触发 Full GC <ul><li>大对象直接进入老年代</li><li>当年轻代的空间不足以容纳新创建的对象时，会触发 Minor GC。如果 Minor GC 后仍有大量对象需要晋升到老年代，而老年代空间不足，则会触发 Full GC。</li></ul></li><li>永久代（Metaspace）空间不足</li><li>系统显式请求: 调用 System.gc() 方法可能会触发 Full GC</li></ul><div class="hint-container tip"><p class="hint-container-title">问题排查示例</p><ol><li><p>通过 JVM 提供的工具（如 <code>jstat, jmap, jvisualvm</code>）或第三方监控工具（如 <code>Prometheus + Grafana, GCeasy</code> 等）来收集和分析垃圾回收的日志。<br> 重点关注 Full GC 的频率、持续时间和堆内存使用情况。观察是否有明显的 Full GC 频率增加的趋势，以及每次 Full GC 后老年代（Old Generation）的内存占用是否显著下降。</p></li><li><p>问题定位: 生成并分析堆转储文件（heap dump），找出哪些对象占据了过多的内存空间，是否存在内存泄漏。</p></li><li><p>检查并优化代码：注意是否有不当的对象生命周期管理、大对象分配或缓存滥用等问题。</p></li></ol><ul><li>减少不必要的对象创建。</li><li>使用合适的数据结构和算法，避免过度消耗内存。</li><li>对象复用，而不是频繁地创建新实例。</li><li>及时释放不再使用的资源，如关闭流、断开数据库连接等。</li></ul><ol start="4"><li>重复测试，持续监控</li></ol></div><p>代码中可能会出现的问题及解决方案：</p><ul><li><mark>HashMap缓存未及时清理</mark> : 实现缓存淘汰策略，如 LRU（最近最少使用）、TTL（生存时间），并通过定时任务定期清理过期数据。</li><li><mark>循环内连续创建了多个大对象</mark> : 尽量减少大对象的创建频率，考虑使用对象池模式来重用已存在的对象，或者将大对象拆分为更小的部分逐步处理。</li><li><mark>使用长生命周期引用（如静态集合）</mark> : 为类添加方法来移除不再需要的对象，确保它们可以被正确回收</li></ul><p>其他通用解决方案：</p><ul><li><p>调整堆内存大小或调整新生代和老年代的比例: 如果堆内存不足，可以适当增大堆内存。</p></li><li><p>优化对象的大小，减少大对象的创建，或者增加老年代的内存大小。</p></li><li><p>增加 Metaspace 的大小, 或者减少类的加载数量</p></li><li><p>避免在代码中显式调用 System.gc()，除非有特殊需求。</p></li><li><p>选择合适的垃圾回收器</p></li></ul><h3 id="jvm配置参数" tabindex="-1"><a class="header-anchor" href="#jvm配置参数"><span>JVM配置参数</span></a></h3><p>JVM 配置参数种类繁多，涵盖了内存管理、垃圾回收、性能优化等多个方面。以下是一些常用的 JVM 配置参数：</p>`,58)),o(r,{id:"703",data:[{id:"堆内存"},{id:"永久代/元空间"},{id:"垃圾回收"},{id:"性能优化"},{id:"日志和调试"},{id:"其他配置"}],active:0},{title0:l(({value:a,isActive:n})=>s[0]||(s[0]=[e("堆内存")])),title1:l(({value:a,isActive:n})=>s[1]||(s[1]=[e("永久代/元空间")])),title2:l(({value:a,isActive:n})=>s[2]||(s[2]=[e("垃圾回收")])),title3:l(({value:a,isActive:n})=>s[3]||(s[3]=[e("性能优化")])),title4:l(({value:a,isActive:n})=>s[4]||(s[4]=[e("日志和调试")])),title5:l(({value:a,isActive:n})=>s[5]||(s[5]=[e("其他配置")])),tab0:l(({value:a,isActive:n})=>s[6]||(s[6]=[i("ul",null,[i("li",null,[i("strong",null,"-Xms"),e("：初始堆内存大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-Xms512m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-Xmx"),e("：最大堆内存大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-Xmx2g")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:NewRatio"),e("：新生代与老年代的比例（默认为 2，即新生代占堆内存的 1/3）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:NewRatio"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=3")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:NewSize"),e("：初始新生代大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:NewSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=256m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:MaxNewSize"),e("：最大新生代大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxNewSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=512m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:SurvivorRatio"),e("：Eden 区与 Survivor 区的比例（默认为 8，即 Eden 占新生代的 8/10）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:SurvivorRatio"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=8")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"堆外内存",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#堆外内存"},[i("span",null,"堆外内存")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:MaxDirectMemorySize"),e("：最大堆外内存大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxDirectMemorySize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=256m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),tab1:l(({value:a,isActive:n})=>s[7]||(s[7]=[i("ul",null,[i("li",null,[i("strong",null,"-XX:PermSize"),e("（JDK 7 及之前）：初始永久代大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:PermSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=64m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:MaxPermSize"),e("（JDK 7 及之前）：最大永久代大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxPermSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=256m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:MaxMetaspaceSize"),e("（JDK 8 及之后）：最大 Metaspace 大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxMetaspaceSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=256m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:MetaspaceSize"),e("（JDK 8 及之后）：初始 Metaspace 大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MetaspaceSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=64m")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),tab2:l(({value:a,isActive:n})=>s[8]||(s[8]=[i("h4",{id:"选择垃圾回收器",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#选择垃圾回收器"},[i("span",null,"选择垃圾回收器")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:+UseSerialGC"),e("：使用 Serial 垃圾回收器。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseSerialGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseParallelGC"),e("：使用 Parallel 垃圾回收器。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseParallelGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseParallelOldGC"),e("：使用 Parallel Old 垃圾回收器。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseParallelOldGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseConcMarkSweepGC"),e("：使用 CMS 垃圾回收器。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseConcMarkSweepGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseG1GC"),e("：使用 G1 垃圾回收器。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseG1GC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseZGC"),e("：使用 ZGC 垃圾回收器（JDK 11 及之后）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseZGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseShenandoahGC"),e("：使用 Shenandoah 垃圾回收器（JDK 12 及之后）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseShenandoahGC")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"垃圾回收参数",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#垃圾回收参数"},[i("span",null,"垃圾回收参数")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:MaxGCPauseMillis"),e("：最大垃圾回收停顿时间目标。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxGCPauseMillis"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=200")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:G1HeapRegionSize"),e("：G1 垃圾回收器的区域大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:G1HeapRegionSize"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=4M")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:InitiatingHeapOccupancyPercent"),e("：G1 垃圾回收器的初始堆占用百分比。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:InitiatingHeapOccupancyPercent"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=70")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseCMSInitiatingOccupancyOnly"),e("：CMS 垃圾回收器的初始堆占用百分比。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseCMSInitiatingOccupancyOnly"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -XX:CMSInitiatingOccupancyFraction=70")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseCMSCompactAtFullCollection"),e("：CMS 垃圾回收器在 Full GC 时进行内存压缩。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseCMSCompactAtFullCollection")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),tab3:l(({value:a,isActive:n})=>s[9]||(s[9]=[i("h4",{id:"jit-编译器",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#jit-编译器"},[i("span",null,"JIT 编译器")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:+TieredCompilation"),e("：启用分层编译。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+TieredCompilation")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:TieredStopAtLevel=1"),e("：分层编译停止在第 1 层。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:TieredStopAtLevel"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=1")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseCompressedOops"),e("：启用压缩指针（适用于 64 位 JVM）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseCompressedOops")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"堆栈大小",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#堆栈大小"},[i("span",null,"堆栈大小")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-Xss"),e("：每个线程的堆栈大小。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-Xss512k")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"其他性能参数",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#其他性能参数"},[i("span",null,"其他性能参数")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:+AggressiveOpts"),e("：启用 aggressive 优化选项。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+AggressiveOpts")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+OptimizeStringConcat"),e("：优化字符串拼接。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+OptimizeStringConcat")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+UseStringDeduplication"),e("：启用字符串去重。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+UseStringDeduplication")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),tab4:l(({value:a,isActive:n})=>s[10]||(s[10]=[i("h4",{id:"gc-日志",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#gc-日志"},[i("span",null,"GC 日志")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-Xlog:gc"),e(":file=gc.log:time,uptime,pid,tid,level:filecount=10,filesize=10M**：启用详细的 GC 日志。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-Xlog:gc*:file"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=gc.log:time,uptime,pid,tid,level:filecount=10,filesize=10M")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"堆转储",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#堆转储"},[i("span",null,"堆转储")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:+HeapDumpOnOutOfMemoryError"),e("：在发生 OutOfMemoryError 时生成堆转储文件。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+HeapDumpOnOutOfMemoryError"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -XX:HeapDumpPath=/path/to/heapdump.hprof")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"调试信息",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#调试信息"},[i("span",null,"调试信息")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:+PrintGCDetails"),e("：打印详细的 GC 信息。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+PrintGCDetails")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+PrintGCTimeStamps"),e("：打印 GC 时间戳。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+PrintGCTimeStamps")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:+PrintGCDateStamps"),e("：打印 GC 日期时间戳。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:+PrintGCDateStamps")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),tab5:l(({value:a,isActive:n})=>s[11]||(s[11]=[i("h4",{id:"并发线程数",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#并发线程数"},[i("span",null,"并发线程数")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:ParallelGCThreads"),e("：并行垃圾回收线程数。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:ParallelGCThreads"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=4")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:ConcGCThreads"),e("：并发垃圾回收线程数。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:ConcGCThreads"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=2")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1),i("h4",{id:"垃圾回收器特定参数",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#垃圾回收器特定参数"},[i("span",null,"垃圾回收器特定参数")])],-1),i("ul",null,[i("li",null,[i("strong",null,"-XX:MaxTenuringThreshold"),e("：最大晋升阈值（适用于 Parallel 和 CMS 垃圾回收器）。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:MaxTenuringThreshold"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=15")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:G1NewSizePercent"),e("：G1 新生代初始大小百分比。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:G1NewSizePercent"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=5")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])]),i("li",null,[i("strong",null,"-XX:G1MaxNewSizePercent"),e("：G1 新生代最大大小百分比。"),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"-XX:G1MaxNewSizePercent"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"=60")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])])])],-1)])),_:1}),s[13]||(s[13]=t("<p><strong>Q16: 什么是 Java 中的 JIT（Just-In-Time）?</strong></p><ul><li><strong>答案</strong>：JIT 编译器是 JVM 的一部分，用于在运行时将字节码编译成本地机器码，提高执行效率。JIT 编译器会选择热点代码进行编译，减少解释执行的开销。</li></ul><p><strong>Q17: 什么是 Java 的 AOT（Ahead-Of-Time）？</strong></p><ul><li><strong>答案</strong>：AOT 编译器在编译时将 Java 字节码编译成本地机器码，生成可执行文件。AOT 编译可以在启动时减少加载时间，适用于需要快速启动的应用程序。</li></ul><p><strong>Q18: 你了解 Java 的逃逸分析吗？</strong></p><ul><li><strong>答案</strong>：逃逸分析是 JVM 的一种优化技术，用于确定对象的作用域。如果一个对象在方法内部创建并且没有逃逸出该方法，JVM 可以将该对象分配在栈上而不是堆上，减少垃圾回收的压力。</li></ul><p><strong>Q26: 什么是 Java 中的 PLAB？</strong></p><ul><li><strong>答案</strong>：PLAB（Promotion LAB）是 G1 垃圾收集器中的一个概念，用于在 Minor GC 时将新生代的对象提升到老年代。PLAB 是一个局部的内存缓冲区，每个线程都有自己的 PLAB，用于减少多线程环境下的同步开销。</li></ul>",8))])}const v=h(p,[["render",c],["__file","jvm.html.vue"]]),F=JSON.parse('{"path":"/interview/java/jvm.html","title":"Java虚拟机","lang":"en-US","frontmatter":{"order":30,"title":"Java虚拟机","description":"JVM核心基础 类加载机制 Bootstrap 类加载器：负责加载核心的 Java 类库（如 java.lang.*）。 Extension 类加载器：负责加载扩展库（如 javax.*）。 Application 类加载器： 负责加载应用程序类路径（CLASSPATH）下的类。 自定义类加载器： 用户自定义的类加载器，扩展类加载机制。 继承 java...","head":[["meta",{"property":"og:url","content":"https://x.app/interview/java/jvm.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"Java虚拟机"}],["meta",{"property":"og:description","content":"JVM核心基础 类加载机制 Bootstrap 类加载器：负责加载核心的 Java 类库（如 java.lang.*）。 Extension 类加载器：负责加载扩展库（如 javax.*）。 Application 类加载器： 负责加载应用程序类路径（CLASSPATH）下的类。 自定义类加载器： 用户自定义的类加载器，扩展类加载机制。 继承 java..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.ventix.top/java/image-20220216221349177.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java虚拟机\\",\\"image\\":[\\"https://image.ventix.top/java/image-20220216221349177.png\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"JVM核心基础","slug":"jvm核心基础","link":"#jvm核心基础","children":[{"level":3,"title":"类加载机制","slug":"类加载机制","link":"#类加载机制","children":[]},{"level":3,"title":"双亲委派机制","slug":"双亲委派机制","link":"#双亲委派机制","children":[]},{"level":3,"title":"运行时数据区","slug":"运行时数据区","link":"#运行时数据区","children":[]},{"level":3,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]}]},{"level":2,"title":"JVM垃圾回收","slug":"jvm垃圾回收","link":"#jvm垃圾回收","children":[{"level":3,"title":"可达性分析","slug":"可达性分析","link":"#可达性分析","children":[]},{"level":3,"title":"垃圾回收算法","slug":"垃圾回收算法","link":"#垃圾回收算法","children":[]},{"level":3,"title":"堆内存划分","slug":"堆内存划分","link":"#堆内存划分","children":[]},{"level":3,"title":"垃圾回收方式","slug":"垃圾回收方式","link":"#垃圾回收方式","children":[]},{"level":3,"title":"垃圾回收器","slug":"垃圾回收器","link":"#垃圾回收器","children":[]}]},{"level":2,"title":"性能调优与工具","slug":"性能调优与工具","link":"#性能调优与工具","children":[{"level":3,"title":"内存泄漏分析","slug":"内存泄漏分析","link":"#内存泄漏分析","children":[]},{"level":3,"title":"频繁FullGC","slug":"频繁fullgc","link":"#频繁fullgc","children":[]},{"level":3,"title":"JVM配置参数","slug":"jvm配置参数","link":"#jvm配置参数","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":18.02,"words":5405},"filePathRelative":"interview/java/jvm.md","localizedDate":"January 10, 2025","excerpt":"<h2>JVM核心基础</h2>\\n<h3>类加载机制</h3>\\n<ol>\\n<li><strong>Bootstrap 类加载器</strong>：负责加载核心的 Java 类库（如 <code>java.lang.*</code>）。</li>\\n<li><strong>Extension 类加载器</strong>：负责加载扩展库（如 <code>javax.*</code>）。</li>\\n<li><strong>Application 类加载器</strong>： 负责加载应用程序类路径（<code>CLASSPATH</code>）下的类。</li>\\n<li><strong>自定义类加载器</strong>： 用户自定义的类加载器，扩展类加载机制。 继承 <code>java.lang.ClassLoader</code> 类并重写 <code>findClass</code> 和 <code>loadClass</code> 方法。</li>\\n</ol>","autoDesc":true}');export{v as comp,F as data};
