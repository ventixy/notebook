import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-CEu6_qkY.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="数据库设计理论" tabindex="-1"><a class="header-anchor" href="#数据库设计理论"><span>数据库设计理论</span></a></h2><h3 id="数据完整性" tabindex="-1"><a class="header-anchor" href="#数据完整性"><span>数据完整性</span></a></h3><p>数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据）</p><div class="hint-container info"><p class="hint-container-title">数据完整性</p><ul><li><p><strong>数据库的完整性</strong>：保证存放到数据库中的数据是有效的 =&gt; 即在创建表时给表中添加约束</p></li><li><p><strong>实体完整性</strong>：标识每一行数据不重复。确保每个表中的每一行都是唯一的。通常通过设置主键来实现，主键字段不允许为空且必须唯一。</p><ul><li><p>实体：即表中的一行(一条记录)代表一个实体（entity）</p></li><li><p>约束类型：<em>主键约束（primary key）</em>、 <em>唯一约束 (unique)</em> 、 <em>自动增长列 (auto_increment)</em></p></li></ul><br></li><li><p><strong>域完整性</strong>：限制此单元格的数据正确。即确保列中的数据符合预定义的数据类型和约束条件。例如，年龄字段应该只能包含正整数。</p><ul><li>域完整性约束：数据类型 、非空约束（not null）、 默认值约束(default）</li></ul><br></li><li><p><strong>引用完整性（参照完整性）</strong>：指外键，外键必须指向另一个表中的主键或唯一键。</p><ul><li>外键约束：FOREIGN KEY</li></ul></li></ul></div><p>常见约束：</p><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>null / not null</td><td>字段是否可以为空</td></tr><tr><td>default</td><td>如果一个字段没有值，则使用默认值</td></tr><tr><td>auto_increment</td><td>字段值从1开始，每次递增1，不会重复</td></tr><tr><td>primary key</td><td>定义列为主键</td></tr><tr><td>unique</td><td>唯一键：不能重复，但可以为空</td></tr><tr><td>comment</td><td>注释信息</td></tr></tbody></table><br><p>语法示例（以MySQL为例）：</p><p><strong>主键约束（primary key）</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 语句中，通过 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 关键字来指定主键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据类型</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [默认值]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 或者是在定义完所有字段之后指定主键：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[CONSTRAINT &lt;约束名&gt;]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [字段名]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在创建表时设置联合主键（所谓的联合主键，就是这个主键是由一张表中多个字段组成的）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [字段1，字段2，…,字段n]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在修改表时添加主键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 删除主键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>唯一约束 (unique)</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在创建表时设置唯一约束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据类型</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UNIQUE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 在修改表时添加唯一约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CONSTRAINT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">唯一约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UNIQUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">列名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 删除唯一约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">唯一约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>自动增长列 (auto_increment)</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 给字段添加 AUTO_INCREMENT 属性来实现主键自增长</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">字段名 数据类型 AUTO_INCREMENT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. 指定自增字段初始值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tb_student2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ID)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)AUTO_INCREMENT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认情况下，AUTO_INCREMENT 的初始值是 1，每新增一条记录，字段值自动加 1。</li><li>一个表中只能有一个字段使用 AUTO_INCREMENT 约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）</li><li>AUTO_INCREMENT 约束的字段必须具备 NOT NULL 属性。</li><li>AUTO_INCREMENT 约束的字段只能是整数类型（TINYINT、SMALLINT、INT、BIGINT 等）。</li><li>AUTO_INCREMENT 约束字段的最大值受该字段的数据类型约束，如果达到上限，AUTO_INCREMENT 就会失效。</li></ul><br><p><strong>外键约束（foreign key）</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[CONSTRAINT &lt;外键名&gt;]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段名 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[，字段名2，…]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">主表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 主键列1 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[，主键列2，…]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 例：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">constraint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fk_score_sid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreign key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">references</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student(id) );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 删除外键约束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">表名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">外键约束名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用外键会影响效率：在插入子行的数据的时候，会去父表中查询。在删除父表中的数据的时候，会去子表中查询数据是否被使用。</p><p>在工作中，一般很少使用外键。外键虽然可以保证我们数据的正确性，但是会比较大程度上的影响效率。</p><br><h3 id="三大范式" tabindex="-1"><a class="header-anchor" href="#三大范式"><span>三大范式</span></a></h3><p>范式是数据库设计中用来减少数据冗余和提高数据一致性的标准。以下是三个最重要的范式：</p><ol><li><strong>第一范式（1NF）</strong>：确保每个表中的每个列都包含原子（不可再分）值。这意味着每个单元格只能包含一个值，不能包含列表或集合。</li><li><strong>第二范式（2NF）</strong>：在满足第一范式的基础上，消除非主键列对部分主键的依赖。也就是说，所有非主键列必须完全依赖于整个主键。</li><li><strong>第三范式（3NF）</strong>：在满足第二范式的基础上，消除非主键列之间的传递依赖。也就是说，非主键列之间不应存在依赖关系。</li></ol><div class="hint-container info"><p class="hint-container-title">三大范式详解</p><ul><li><p><strong>第一范式</strong>：指每一列保持 <span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>原子性</strong></span>（每一列都是不可分割的基本数据，同一列中不能有多个值）每一个属性不可再分</p><ul><li><p>所谓第一范式（1NF)是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。</p></li><li><p>在任何一个关系型数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计时都必须满足第一范式(1NF)。不满足1NF的数据库就不是关系数据库。满足1NF的表必须要有主键且每个属性不可再分</p></li></ul><br></li><li><p><strong>第二范式</strong>：确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。即指记录的<strong>唯一性</strong>。要求数据库表中的每个实例或行必须可以被唯一地区分。</p><p>第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上 一个列，以存储各个实例的唯一标识。这个唯一属性列被称为主关键字或主键、主码。</p><br></li><li><p><strong>第三范式</strong>：属性不依赖于其它非主属性 [ 消除传递依赖 ]。即<strong>非主键列之间不应存在依赖关系</strong><br> （注：关系实质上是一张二维表，其中每一行是一个元组，每一列是一个属性 ）</p><ul><li><p>满足 第三范式（3NF）必须先满足第二范式（2NF）。</p></li><li><p>第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。 即指字段不要冗余。</p></li></ul></li></ul></div><p>【示例】不符合第三范式的表结构：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Students</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    StudentID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 学生的唯一标识符（主键）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    StudentName </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 学生姓名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DepartmentID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 学生所在系的唯一标识符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DepartmentName </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 学生所在系的名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个表结构中，DepartmentName 依赖于 DepartmentID，而不是直接依赖于主键 StudentID。这意味着 DepartmentName 的值是由 DepartmentID 决定的，而不是由 StudentID 决定的。这种依赖关系导致了数据冗余和潜在的不一致性。</p><div class="hint-container tip"><p class="hint-container-title">在实际的工作中，要不要去冗余字段呢？</p><p>适当的字段冗余可以帮助我们提高查询的效率，但是会影响到增删改的效率。是否冗余字段需要看具体的业务场景，假如在某个业务场景中：</p><ul><li><p>查询的需求远大于增删改的需求，我们可以考虑适当的去冗余数据；</p></li><li><p>假如增删改的需求比查询的需求比重要高，那么这个时候就不应该冗余数据。</p></li></ul><p>冗余字段的设计：<mark>反范式化设计</mark></p></div><h3 id="多表设计原则" tabindex="-1"><a class="header-anchor" href="#多表设计原则"><span>多表设计原则</span></a></h3><p>多表设计是数据库设计中的一个重要方面，通过合理地拆分数据表来减少数据冗余和提高查询效率。</p><div class="hint-container tip"><p class="hint-container-title">设计原则</p><ol><li><strong>规范化</strong>：遵循范式规则，减少数据冗余，提高数据一致性。</li><li><strong>性能优化</strong>：合理设计索引，优化查询性能。</li><li><strong>安全性</strong>：确保数据的安全性和隐私保护，使用适当的权限控制。</li><li><strong>可扩展性</strong>：设计时考虑未来的扩展需求，确保系统的灵活性和可维护性。</li></ol></div><p>常见的多表设计模式包括：</p><ol><li><p><strong>一对多关系</strong>：一个表中的记录可以与另一个表中的多个记录相关联。例如，一个订单可以包含多个订单项。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Orders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    OrderID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CustomerID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    OrderDate </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DATE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OrderItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ItemID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    OrderID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ProductID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Quantity </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (OrderID) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Orders(OrderID)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多对多关系</strong>：两个表中的记录可以相互关联。通常通过一个中间表来实现。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Students</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    StudentID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    Name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Courses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CourseID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CourseName </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Enrollments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    EnrollmentID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    StudentID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CourseID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (StudentID) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Students(StudentID),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (CourseID) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Courses(CourseID)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>一对一关系</strong>：一个表中的记录与另一个表中的一个记录相关联。通常通过共享主键来实现。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employees</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    EmployeeID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FirstName </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LastName </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Salaries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    EmployeeID </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Salary </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DECIMAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FOREIGN KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (EmployeeID) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REFERENCES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Employees(EmployeeID)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="事务transaction" tabindex="-1"><a class="header-anchor" href="#事务transaction"><span>事务Transaction</span></a></h2><p><strong>事务（Transaction）</strong>：是由一系列对数据库中数据进⾏访问（查询）与更新（增删改）的操作所组成的⼀个程序执行逻辑单元。这些操作，要么都成功，要么都不成功。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 事务相关命令：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 开始，还可以使用下列语法：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;               </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 提交：使得当前的修改确认</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 回滚：使得当前的修改被放弃</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务的acid特性" tabindex="-1"><a class="header-anchor" href="#事务的acid特性"><span>事务的ACID特性</span></a></h3><p>事务具有四个重要特征：原子性（Atomicity），一致性（Consistency），隔离性（Isolation），持久性（Durability）。简称<strong>ACID特性</strong></p><div class="hint-container info"><p class="hint-container-title">事务的ACID特性</p><h4 id="原子性-atomicity" tabindex="-1"><a class="header-anchor" href="#原子性-atomicity"><span>原子性（Atomicity）</span></a></h4><ul><li><p>事务是一个不可分割的最小工作单位，事务中的所有操作要么全部完成，要么全部不执行。事务执⾏过程中如果出错， 会回滚到事务开始前的状态，所有的操作就像没有发⽣一样。</p></li><li><p>作用：保证事务的完整性，防止部分操作成功而部分操作失败导致的数据不一致。</p></li></ul><h4 id="一致性-consistency" tabindex="-1"><a class="header-anchor" href="#一致性-consistency"><span>⼀致性（Consistency）</span></a></h4><ul><li><p>一个事务在执⾏之前和执行之后，数据库都必须处于⼀致性状态。即事务必须是数据库从一个一致性状态到另外一个一致性状态。<br><em>比如：如果从A账户转账到B账户，不可能因为A账户扣了钱，⽽B账户没有加钱（两个账号的总金额要保持一致状态）</em></p></li><li><p>作用：确保数据库从一个一致状态转换到另一个一致状态，即使事务失败也不会破坏数据库的一致性。</p></li></ul><h4 id="隔离性-isolation" tabindex="-1"><a class="header-anchor" href="#隔离性-isolation"><span>隔离性（Isolation）</span></a></h4><ul><li><p><mark>事务的执行是独立的，不受其他事务的干扰</mark>。一个事务的中间状态对其他事务是不可见的。</p></li><li><p>在并发环境中，并发的事务是互相隔离的。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间。 ⼀个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务是不能互相干扰的。</p></li><li><p>在事务中，有隔离级别的定义，不同的隔离级别有不同的影响的程度。</p></li><li><p>作用：防止多个事务并发执行时产生的相互干扰，确保事务的执行结果是正确的。</p></li></ul><h4 id="持久性-durability" tabindex="-1"><a class="header-anchor" href="#持久性-durability"><span>持久性（Durability）</span></a></h4><ul><li><p>一旦事务提交，其对数据库的改变是永久的，即使系统发生故障也不会丢失。</p></li><li><p>作用：确保事务的结果能够持久保存，不会因为系统崩溃或其他问题而丢失。</p></li></ul></div><h3 id="事务的并发问题" tabindex="-1"><a class="header-anchor" href="#事务的并发问题"><span>事务的并发问题</span></a></h3><p>在不同的隔离级别下，多个事务并发执行时可能会产生一些问题，如：脏读，不可重复读，幻读</p><div class="hint-container caution"><p class="hint-container-title">事务的并发问题</p><h4 id="脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#脏读-dirty-read"><span>脏读（Dirty Read）</span></a></h4><ul><li><p><strong>一个事务读取到了另外一个事务还没提交的数据</strong>。例：事务A读取了事务B更新但未提交的数据（脏数据） <em>脏数据</em>：是指事务对缓冲池中行记录的修改，还没有被提交（commit）</p></li><li><p>脏读发生的条件是需要事务的隔离级别为 <code>READ UNCOMMITTED</code></p></li></ul><h4 id="不可重复读-nonrepeatable-read" tabindex="-1"><a class="header-anchor" href="#不可重复读-nonrepeatable-read"><span>不可重复读（Nonrepeatable Read）</span></a></h4><ul><li><p><strong>一个事务在两次读取同一数据时，由于另一个事务在这两次读取之间修改了数据，导致两次读取的结果不同</strong>。</p></li><li><p><em>不可重复读和脏读的区别</em> 是：脏读是读到未提交的数据，而不可重复读读到的却是已经提交的数据</p></li></ul><p>有时候，不可重复读的问题是可以接受的，因为其读到的是已经提交的数据，本身并不会带来很大的问题</p><h4 id="幻读-phantom-read" tabindex="-1"><a class="header-anchor" href="#幻读-phantom-read"><span>幻读（Phantom Read）</span></a></h4><p><strong>在一个事务内，读取数据记录条数前后不一致</strong>。详细来说：一个事务在两次查询相同范围的数据时，由于另一个事务在这两次查询之间插入了新的数据，导致第二次查询的结果集包含了第一次查询没有的数据。</p><blockquote><p>例如：</p><ol><li>事务 A ： <code>select * from student where age &gt; 10</code>，假设查到了 10 行数据；</li><li>然后事务 B 往里面加入了一批数据 （或者删除了一些数据）</li><li>事务 A 再查的用条件查询语句查询的时候，发现查到了15条</li></ol></blockquote></div><h3 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别"><span>事务的隔离级别</span></a></h3><p>为了处理并发问题，SQL标准定义了四种隔离级别，每种级别提供了不同程度的隔离性：</p><div class="hint-container info"><p class="hint-container-title">事务的隔离级别</p><h4 id="❑-read-uncommitted-读未提交" tabindex="-1"><a class="header-anchor" href="#❑-read-uncommitted-读未提交"><span>❑ Read Uncommitted（读未提交）</span></a></h4><p>最低/最不安全的隔离级别(唯一能读到脏数据的隔离级别) 有脏读、不可重复读、虚幻读的问题</p><h4 id="❑-read-committed-读已提交" tabindex="-1"><a class="header-anchor" href="#❑-read-committed-读已提交"><span>❑ Read Committed（读已提交）</span></a></h4><p>只能读取已经提交的数据、解决了脏读问题，但是仍存在可重复读问题和幻读</p><h4 id="❑-repeatable-read-可重复读" tabindex="-1"><a class="header-anchor" href="#❑-repeatable-read-可重复读"><span>❑ Repeatable Read（可重复读）</span></a></h4><p>标准SQL的定义下仍可能存在幻读问题，但MySQL下没有幻读问题</p><h4 id="❑-serializable-顺序读-可串行化-序列化" tabindex="-1"><a class="header-anchor" href="#❑-serializable-顺序读-可串行化-序列化"><span>❑ Serializable（顺序读 / 可串行化 / 序列化）</span></a></h4><p>最严格的事务隔离级别、事务只能一个接一个地处理，不能并发(有效率问题)</p></div><p>不同事务隔离级别下的不同的问题总结：</p><table><thead><tr><th>事务隔离级别 \\ 并发问题</th><th style="text-align:center;">脏读(Dirty Read)</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">（虚）幻读</th></tr></thead><tbody><tr><td>read uncommitted（读未提交）</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>read committed（读已提交）</td><td style="text-align:center;">X</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>repeatable read（可重复读）</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X(在MySQL下没有)</td></tr><tr><td>serializable（序列化）</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">X</td></tr></tbody></table><p>MySQL中InnoDB存储引擎默认支持的隔离级别是 <code>REPEATABLE READ</code>，但是与标准SQL不同的是，InnoDB存储引擎在<code>REPEATABLE READ</code>事务隔离级别下，通过<strong>Next-Key Lock</strong> 有效地防止了幻读问题</p><div class="hint-container tip"><p class="hint-container-title">关于MySQL默认隔离级别的介绍</p><ul><li><p><code>InnoDB</code> offers all four transaction isolation levels described by the SQL:1992 standard:<br><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-uncommitted" target="_blank" rel="noopener noreferrer"><code>READ UNCOMMITTED</code></a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_read-committed" target="_blank" rel="noopener noreferrer"><code>READ COMMITTED</code></a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read" target="_blank" rel="noopener noreferrer"><code>REPEATABLE READ</code></a>, and <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_serializable" target="_blank" rel="noopener noreferrer"><code>SERIALIZABLE</code></a>.</p></li><li><p>The default isolation level for <code>InnoDB</code> is <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read" target="_blank" rel="noopener noreferrer"><code>REPEATABLE READ</code></a>.</p></li></ul></div><details class="hint-container details"><summary>Next-Key Lock锁算法 / MVCC / Gap Locking</summary><p><code>Next-Key Lock</code> 锁算法是指结合了行锁和间隙锁（Gap Locking）的一种锁策略，主要用于防止幻读问题。</p><h4 id="多版本并发控制-mvcc" tabindex="-1"><a class="header-anchor" href="#多版本并发控制-mvcc"><span>多版本并发控制（MVCC）</span></a></h4><p>多版本并发控制（MVCC）是一种并发控制机制，允许多个事务在同一时间访问同一数据的不同版本，而不需要阻塞其他事务。具体来说：</p><ul><li><strong>版本链</strong>：每个数据行可以有多个版本，每个版本带有时间戳或事务ID。</li><li><strong>读取不阻塞写入</strong>：事务读取数据时，看到的是事务开始时的数据快照，不会阻塞其他事务的写操作。</li><li><strong>写入不阻塞读取</strong>：事务写入数据时，不会阻塞其他事务的读操作。</li></ul><p><mark>多版本并发控制（MVCC） 是 InnoDB 用来实现 <code>Repeatable Read</code> 隔离级别的一种机制(也即是用来提高并发性能的一种机制)</mark></p><h4 id="间隙锁-gap-locking" tabindex="-1"><a class="header-anchor" href="#间隙锁-gap-locking"><span>间隙锁（Gap Locking）</span></a></h4><p>间隙锁是一种锁定机制，用于锁定数据行之间的间隙，防止其他事务在这些间隙中插入新的数据。具体来说：</p><ul><li><strong>锁定间隙</strong>：不仅锁定实际的数据行，还锁定数据行之间的空隙。</li><li><strong>防止幻读</strong>：通过锁定间隙，防止其他事务在这些间隙中插入新的数据，从而防止幻读问题。</li></ul><h4 id="next-key-lock" tabindex="-1"><a class="header-anchor" href="#next-key-lock"><span>Next-Key Lock</span></a></h4><p><code>Next-Key Lock</code> 是一种结合了行锁和间隙锁的锁策略，主要用于解决幻读问题。具体来说：</p><ul><li><strong>行锁</strong>：锁定实际的数据行。</li><li><strong>间隙锁</strong>：锁定数据行之间的间隙。</li><li><strong>范围锁</strong>：锁定一个范围内的所有数据行和间隙。</li></ul><p><code>Next-Key Lock</code> 锁住的不仅仅是单个数据行，还包括该行前面的间隙。因此，它实际上是一个范围锁，可以防止其他事务在该范围内插入新的数据。</p><p><strong>示例</strong>：假设有一个索引包含以下数据行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>10, 20, 30, 40</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在一个 <code>Repeatable Read</code> 隔离级别下，如果一个事务执行了以下查询：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 40</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个查询会使用 <code>Next-Key Lock</code> 锁住以下范围：</p><ul><li>从 10 到 20 的间隙</li><li>数据行 20</li><li>从 20 到 30 的间隙</li><li>数据行 30</li><li>从 30 到 40 的间隙</li></ul><p>这样，其他事务就无法在这些间隙中插入新的数据，从而防止了幻读问题。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ul><li><strong>MVCC</strong>：允许多个事务在同一时间访问同一数据的不同版本，提高并发性能。</li><li><strong>间隙锁</strong>：锁定数据行之间的间隙，防止其他事务在这些间隙中插入新的数据。</li><li><strong>Next-Key Lock</strong>：结合了行锁和间隙锁，锁定一个范围内的所有数据行和间隙，防止幻读问题。</li></ul></details>`,53)]))}const r=s(t,[["render",e],["__file","database.html.vue"]]),d=JSON.parse('{"path":"/java/database/db/database.html","title":"数据库理论","lang":"en-US","frontmatter":{"order":1,"title":"数据库理论","description":"数据库设计理论 数据完整性 数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据） 数据完整性 数据库的完整性：保证存放到数据库中的数据是有效的 => 即在创建表时给表中添加约束 实体完整性：标识每一行数据不重复。确保每个表中的每一行都是唯一的。通常通过设置主键来实现，主键字段不允许为空且必须唯一。 实体：即表中的一行...","head":[["meta",{"property":"og:url","content":"https://x.app/java/database/db/database.html"}],["meta",{"property":"og:site_name","content":"Home"}],["meta",{"property":"og:title","content":"数据库理论"}],["meta",{"property":"og:description","content":"数据库设计理论 数据完整性 数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据） 数据完整性 数据库的完整性：保证存放到数据库中的数据是有效的 => 即在创建表时给表中添加约束 实体完整性：标识每一行数据不重复。确保每个表中的每一行都是唯一的。通常通过设置主键来实现，主键字段不允许为空且必须唯一。 实体：即表中的一行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库理论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"数据库设计理论","slug":"数据库设计理论","link":"#数据库设计理论","children":[{"level":3,"title":"数据完整性","slug":"数据完整性","link":"#数据完整性","children":[]},{"level":3,"title":"三大范式","slug":"三大范式","link":"#三大范式","children":[]},{"level":3,"title":"多表设计原则","slug":"多表设计原则","link":"#多表设计原则","children":[]}]},{"level":2,"title":"事务Transaction","slug":"事务transaction","link":"#事务transaction","children":[{"level":3,"title":"事务的ACID特性","slug":"事务的acid特性","link":"#事务的acid特性","children":[]},{"level":3,"title":"事务的并发问题","slug":"事务的并发问题","link":"#事务的并发问题","children":[]},{"level":3,"title":"事务的隔离级别","slug":"事务的隔离级别","link":"#事务的隔离级别","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":15.23,"words":4569},"filePathRelative":"java/database/db/database.md","localizedDate":"January 10, 2025","excerpt":"<h2>数据库设计理论</h2>\\n<h3>数据完整性</h3>\\n<p>数据完整性是数据库制定的了一些规范，是为了防止用户错误的输入（防止数据库出现错误的数据）</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">数据完整性</p>\\n<ul>\\n<li>\\n<p><strong>数据库的完整性</strong>：保证存放到数据库中的数据是有效的 =&gt; 即在创建表时给表中添加约束</p>\\n</li>\\n<li>\\n<p><strong>实体完整性</strong>：标识每一行数据不重复。确保每个表中的每一行都是唯一的。通常通过设置主键来实现，主键字段不允许为空且必须唯一。</p>\\n<ul>\\n<li>\\n<p>实体：即表中的一行(一条记录)代表一个实体（entity）</p>\\n</li>\\n<li>\\n<p>约束类型：<em>主键约束（primary key）</em>、 <em>唯一约束 (unique)</em> 、 <em>自动增长列 (auto_increment)</em></p>\\n</li>\\n</ul>\\n<br>\\n</li>\\n<li>\\n<p><strong>域完整性</strong>：限制此单元格的数据正确。即确保列中的数据符合预定义的数据类型和约束条件。例如，年龄字段应该只能包含正整数。</p>\\n<ul>\\n<li>域完整性约束：数据类型 、非空约束（not null）、 默认值约束(default）</li>\\n</ul>\\n<br>\\n</li>\\n<li>\\n<p><strong>引用完整性（参照完整性）</strong>：指外键，外键必须指向另一个表中的主键或唯一键。</p>\\n<ul>\\n<li>外键约束：FOREIGN KEY</li>\\n</ul>\\n</li>\\n</ul>\\n</div>","autoDesc":true}');export{r as comp,d as data};
