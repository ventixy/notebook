import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as t,a as s,d as r,w as n,r as d,o as c,e as i}from"./app-JDah0YIi.js";const g={},o={class:"hint-container info"};function B(A,a){const h=d("Tabs");return c(),k("div",null,[a[5]||(a[5]=t(`<p>常用构建工具 (Build Tools)：</p><ol><li><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener noreferrer"><strong>Webpack</strong></a> - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。</p></li><li><p><a href="https://cn.rollupjs.org/" target="_blank" rel="noopener noreferrer"><strong>Rollup</strong></a> - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。</p></li><li><p><a href="https://parceljs.org/docs/" target="_blank" rel="noopener noreferrer"><strong>Parcel</strong></a> - 零配置的打包工具，开箱即用，自动处理各种资源类型。</p></li><li><p><a href="http://gulpjs.com" target="_blank" rel="noopener noreferrer"><strong>Gulp</strong></a> - 基于流的自动化任务运行器，通过可读性强的代码处理文件，如压缩、合并、编译等。</p></li><li><p><a href="https://gruntjs.com" target="_blank" rel="noopener noreferrer"><strong>Grunt</strong></a> - 另一款成熟的任务自动化工具，通过配置文件定义各种任务。</p></li></ol><div class="hint-container info"><p class="hint-container-title">使用建议</p><ul><li><p><strong>小型项目或快速原型</strong>：<strong>Parcel</strong> 是一个很好的选择，它的零配置特性和快速启动能力可以让你迅速搭建并运行项目，无需花费大量时间在配置构建工具上。</p></li><li><p><strong>中型项目</strong>：<strong>Webpack</strong> 或 <strong>Rollup</strong> 可能更适合。如果你的项目依赖关系复杂，需要代码拆分和优化，Webpack 提供了丰富的配置选项和强大的生态支持。而对于库的开发或者对最终包体积有严格要求的项目，<strong>Rollup</strong> 的“树摇”能力将非常有用。</p></li><li><p><strong>大型项目</strong>：<strong>Webpack</strong> 通常是首选，尤其是在需要高度定制化的构建流程、优化资源加载策略或实现复杂的代码拆分时。它的灵活性和扩展性能够满足大型应用的复杂需求。</p></li><li><p><strong>特定需求或习惯</strong>：<strong>Gulp</strong> 和 <strong>Grunt</strong> 仍然有其应用场景，特别是对于那些已经习惯了这些工具的团队，或是项目中特定任务需要高度定制化处理时。Gulp 的流式处理特别适合处理大量文件转换任务。</p></li></ul></div><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>Webpack</span></a></h2><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener noreferrer"><strong>Webpack</strong></a>：起初作为一个模块打包器，Webpack 专为解决JavaScript模块化问题而生，特别是在需要处理大量依赖和模块的复杂应用中。</p><p>随着时间发展，Webpack 成为了现代前端项目标配，支持代码拆分、加载器和插件系统，极大地增强了前端构建的灵活性和性能。虽然学习曲线较陡峭，但它提供的功能和优化策略对于构建大型SPA（单页应用）至关重要。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Webpack 最初于2012年首次发布, 2014年开始在前端社区普遍使用，当时的主要亮点是其独特的代码分割和懒加载功能。</p><p>随着React, Angular, Vue等现代前端框架的兴起，Webpack也被广泛采用作为模块打包器。到现在，Webpack依然是主流的前端构建工具之一。</p></div><p>Webpack配置文件通常是项目的根目录下一个名为 <code>webpack.config.js</code> 的文件，该文件是一个Node.js模块，返回一个配置对象，Webpack根据这个对象进行打包构建：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 入口文件，路径相对于本文件所在的位置，可以直接使用模块名称，模块解析方式跟 Node.js 一样</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./app/index.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 输出配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 输出文件，路径相对于本文件所在的位置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dist&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;bundle.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模块加载器配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 对于.js文件使用babel-loader进行转码，presets定义语法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        exclude</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /node_modules/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;babel-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            presets</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 插件配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [], </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 开发服务器配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  devServer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 解析模块请求的选项</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}, </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 优化配置，如模块拆分、压缩等</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  optimization</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是webpack的基础配置，webpack的配置非常灵活，可以根据具体需求配置各种loader和plugin，实现各种功能，如处理CSS，处理图片，处理字体文件等。</p><h2 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup"><span>Rollup</span></a></h2><p><a href="https://cn.rollupjs.org/" target="_blank" rel="noopener noreferrer"><strong>Rollup</strong></a>：相比Webpack，Rollup 更专注于ES模块的打包，尤其是库的打包。</p><p>Rollup强调代码的“树摇”（tree shaking），即只打包实际用到的代码，从而生成更小的输出文件。Rollup 适合那些不需要复杂的运行时加载逻辑，追求极致体积优化的项目。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Webpack 最初于2012年首次发布, 2014年开始在前端社区普遍使用，当时的主要亮点是其独特的代码分割和懒加载功能。</p><p>随着React, Angular, Vue等现代前端框架的兴起，Webpack也被广泛采用作为模块打包器。到现在，Webpack依然是主流的前端构建工具之一。</p></div><h2 id="parcel" tabindex="-1"><a class="header-anchor" href="#parcel"><span>Parcel</span></a></h2><p><a href="https://parceljs.org/docs/" target="_blank" rel="noopener noreferrer"><strong>Parcel</strong></a>：作为新一代的打包工具，Parcel 强调零配置，即开即用。它自动处理各种资源，包括代码转换、优化和热更新，极大地简化了开发者的工作。</p><p>Parcel 内置了对热门技术的支持，如React、Vue等，且具有较快的打包速度，非常适合快速原型开发或小型到中型项目。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Rollup 最初于2015年左右推出, 2016年开始热度渐盛。其专注于ES模块打包，产出结果更加精简，尤其对库和组件的打包十分友好。未来几年，随着ES模块的广泛应用，Rollup的使用会更加理想。</p></div><h2 id="gulp" tabindex="-1"><a class="header-anchor" href="#gulp"><span>Gulp</span></a></h2><p><a href="http://gulpjs.com" target="_blank" rel="noopener noreferrer"><strong>Gulp</strong></a>：Gulp 几乎与Grunt同期出现，它主打的是基于流的处理方式，提高了构建速度和效率。</p><p>Gulp 利用Node.js的流技术，使得文件在处理过程中无需频繁地写入磁盘，这对于大型项目而言是一个显著的性能提升。Gulp 的配置更加简洁，鼓励代码重用，受到许多开发者的喜爱。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Gulp 最初于2013年发布，2014年开始广泛被使用，提供了一种新颖的基于流的代码处理方式，用户可以通过编写简洁的代码定义任务并处理文件。但随着 webpack 等工具的流行，Gulp 的使用频率有所下降。</p></div><h2 id="grunt" tabindex="-1"><a class="header-anchor" href="#grunt"><span>Grunt</span></a></h2><p><a href="https://gruntjs.com" target="_blank" rel="noopener noreferrer"><strong>Grunt</strong></a>：作为早期的自动化构建工具，Grunt 凭借其强大的插件生态和易用性，在前端社区迅速流行起来。</p><p>Grunt采用配置优先的方式，通过定义任务和加载插件来自动化各种构建任务。但随着时间的推移，其基于文件的操作方式和相对较低的执行效率成为了一些大型项目中的瓶颈。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Grunt 最初于2012年发布，并在2013-2015年期间被大量使用，是最早的一批前端自动化构建工具。然而，由于配置较为繁琐，随着新一代构建工具（如webpack）的出现，Grunt 的使用率大大降低。</p></div><h2 id="babel编译器" tabindex="-1"><a class="header-anchor" href="#babel编译器"><span>Babel编译器</span></a></h2><p>Babel的官方网站是：<a href="https://babeljs.io" target="_blank" rel="noopener noreferrer">https://babeljs.io</a></p><p>Babel是一个广泛使用的JavaScript编译器，它使开发者能够使用最新的ECMAScript特性（如ES6、ES7等）编写代码，并将其转换为向后兼容的JavaScript版本，以便在当前的浏览器和环境中执行。这使得开发者能够在不牺牲老旧环境兼容性的前提下，利用新的语言特性和API。</p><ul><li><strong>语法转换</strong>：将ES6及以后版本的JavaScript语法转换为ES5或更低版本的语法。</li><li><strong>源代码转换</strong>：通过插件系统，Babel可以不仅仅是语法转换，还能进行源代码的其他类型转换，例如添加polyfills以支持新的全局对象和方法。</li><li><strong>预设(presets)</strong>：一组预配置的插件集合，方便快速启用对特定JavaScript版本的支持，如<code>@babel/preset-env</code>用于转换到目标环境支持的JS版本。</li><li><strong>插件(plugins)</strong>：用于添加特定功能或转换，例如转换箭头函数、模板字符串等。</li></ul><p>首先，需要在项目中安装Babel及其相关依赖。如果你使用npm，可以这样做：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @babel/core</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @babel/cli</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @babel/preset-env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，创建一个Babel配置文件（通常是<code>babel.config.json</code>或<code>.babelrc.json</code>）在项目根目录下，来指定转换规则：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;presets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;targets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;browsers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&gt; 1%, last 2 versions, not dead&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>@babel/preset-env</code>会根据你指定的目标环境自动选择需要的转换。</p><p>使用Babel CLI转换单个文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> babel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.js</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --out-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,37)),s("div",o,[a[4]||(a[4]=t(`<p class="hint-container-title">在Webpack中集成Babel</p><p>首先，你需要安装Babel相关的依赖包，这通常包括<code>@babel/core</code>（Babel的核心）、<code>babel-loader</code>（让Babel与webpack协同工作的加载器）以及至少一个预设（preset），比如<code>@babel/preset-env</code>，用于转换你的ES6+代码到兼容的ES5版本。在你的项目根目录下，运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> babel-loader</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @babel/core</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @babel/preset-env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，你需要在webpack的配置文件（通常是<code>webpack.config.js</code>）中添加对<code>babel-loader</code>的配置。以下是一个简单的示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 匹配.js和.jsx文件，如果你想编译jsx文件，确保也安装了@babel/preset-react</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        exclude</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /(node_modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">bower_components)/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 排除这些目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;babel-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            presets</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用@babel/preset-env预设</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.jsx&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果你也在编译jsx文件，确保包含这里</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时你可能需要在<code>.babelrc</code>文件或项目根目录下的<code>babel.config.js</code>中进一步配置Babel，尤其是当你需要使用额外的插件或自定义预设时。例如：</p>`,6)),r(h,{id:"195",data:[{id:".babelrc"},{id:"babel.config.js"}],active:0,"tab-id":"babel"},{title0:n(({value:l,isActive:e})=>a[0]||(a[0]=[i(".babelrc")])),title1:n(({value:l,isActive:e})=>a[1]||(a[1]=[i("babel.config.js")])),tab0:n(({value:l,isActive:e})=>a[2]||(a[2]=[s("div",{class:"language-json line-numbers-mode","data-highlighter":"shiki","data-ext":"json","data-title":"json",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// .babelrc")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"{")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},'  "presets"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},": [")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    [")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'      "@babel/preset-env"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},",")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},'        "targets"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},": {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},'          "browsers"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},": ["),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"> 1%, last 2 versions, not dead"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        },")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},'        "useBuiltIns"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},": "),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"usage"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 根据目标环境按需引入polyfill")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},'        "corejs"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},": "),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"3"),s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}}," // 指定core-js版本")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  ]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:n(({value:l,isActive:e})=>a[3]||(a[3]=[s("div",{class:"language-javascript line-numbers-mode","data-highlighter":"shiki","data-ext":"javascript","data-title":"javascript",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// babel.config.js")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"module"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"exports"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"  presets"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," [")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    [")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"      '@babel/preset-env'"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},",")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"        targets"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"          browsers"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," [ "),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"'> 1%'"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"'last 2 versions'"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"'not dead'"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ],")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"        },")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"        useBuiltIns"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'usage'"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},",")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"        corejs"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 3"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},",")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"      },")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ],")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"  ],")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"};")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1})]),a[6]||(a[6]=t(`<p>完成上述步骤后，当你运行webpack构建命令（如<code>npx webpack</code>或<code>npm run build</code>，具体取决于你的项目设置）时，Babel将会自动对匹配的JavaScript文件进行转换，使其兼容目标环境。</p><p>如果要在Node.js项目中使用ES模块或新特性，可以使用<code>@babel/register</code>或<code>babel-node</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> babel-node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> script.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或在你的脚本头部使用<code>@babel/register</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@babel/register&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./your-es6-script.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Babel是前端开发中不可或缺的工具，它使得开发者能够无缝地采用最新的JavaScript特性，而不必担心浏览器兼容性问题。通过配置和使用Babel，开发者可以专注于编写现代、高效的代码。</p>`,6))])}const u=p(g,[["render",B],["__file","build.html.vue"]]),v=JSON.parse('{"path":"/web/core/tool/build.html","title":"常用构建/编译工具","lang":"en-US","frontmatter":{"order":10,"title":"常用构建/编译工具","description":"常用构建工具 (Build Tools)： Webpack - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。 Rollup - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。 Parcel - 零配置的打包工具，开箱即用，自动处理各种资源类型。 Gulp ...","head":[["meta",{"property":"og:url","content":"https://x.app/web/core/tool/build.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"常用构建/编译工具"}],["meta",{"property":"og:description","content":"常用构建工具 (Build Tools)： Webpack - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。 Rollup - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。 Parcel - 零配置的打包工具，开箱即用，自动处理各种资源类型。 Gulp ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用构建/编译工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"Webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"Rollup","slug":"rollup","link":"#rollup","children":[]},{"level":2,"title":"Parcel","slug":"parcel","link":"#parcel","children":[]},{"level":2,"title":"Gulp","slug":"gulp","link":"#gulp","children":[]},{"level":2,"title":"Grunt","slug":"grunt","link":"#grunt","children":[]},{"level":2,"title":"Babel编译器","slug":"babel编译器","link":"#babel编译器","children":[]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":8.9,"words":2670},"filePathRelative":"web/core/tool/build.md","localizedDate":"January 10, 2025","excerpt":"<p>常用构建工具 (Build Tools)：</p>\\n<ol>\\n<li>\\n<p><a href=\\"https://webpack.docschina.org/concepts/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Webpack</strong></a> - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。</p>\\n</li>\\n<li>\\n<p><a href=\\"https://cn.rollupjs.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Rollup</strong></a> - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。</p>\\n</li>\\n<li>\\n<p><a href=\\"https://parceljs.org/docs/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Parcel</strong></a> - 零配置的打包工具，开箱即用，自动处理各种资源类型。</p>\\n</li>\\n<li>\\n<p><a href=\\"http://gulpjs.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Gulp</strong></a> - 基于流的自动化任务运行器，通过可读性强的代码处理文件，如压缩、合并、编译等。</p>\\n</li>\\n<li>\\n<p><a href=\\"https://gruntjs.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Grunt</strong></a> - 另一款成熟的任务自动化工具，通过配置文件定义各种任务。</p>\\n</li>\\n</ol>","autoDesc":true}');export{u as comp,v as data};
