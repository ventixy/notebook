import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as t}from"./app-CEu6_qkY.js";const i={};function n(p,e){return t(),a("div",null,e[0]||(e[0]=[l('<h2 id="主从复制和读写分离" tabindex="-1"><a class="header-anchor" href="#主从复制和读写分离"><span>主从复制和读写分离</span></a></h2><h2 id="数据库分库分表" tabindex="-1"><a class="header-anchor" href="#数据库分库分表"><span>数据库分库分表</span></a></h2><ul><li><p>分库有两种模式</p><ul><li><p>垂直拆库：电商库 MallDB，业务拆分后就是 UserDB、OrderDB、PayDB 等。</p></li><li><p>分片拆库：用户库 UserDB，分片库后就是 UserDB_0、UserDB_1、UserDB_xx。</p></li></ul></li><li><p>分表也有两种模式</p><ul><li><p>垂直拆分：订单表 OrderTable，拆分后就是 OrderTable 以及 OrderExtTable。</p></li><li><p>水平拆分：订单表 OrderTable，拆分后就是 OrderTable_0、 OrderTable_xxx。</p></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">分库分表适用场景</p><h4 id="_1-什么场景分表" tabindex="-1"><a class="header-anchor" href="#_1-什么场景分表"><span>1. 什么场景分表？</span></a></h4><p>当出现以下三种情况的时候，我们需要考虑分表：</p><ul><li><p>单表的数据量过大。</p></li><li><p>单表存在较高的写入场景，可能引发行锁竞争。</p></li><li><p>当表中包含大量的 TEXT、LONGTEXT 或 BLOB 等大字段。</p></li></ul><h4 id="_2-什么场景分库" tabindex="-1"><a class="header-anchor" href="#_2-什么场景分库"><span>2. 什么场景分库？</span></a></h4><p>当出现以下两种情况时，我们需要考虑通过分库来将数据分散到多个数据库实例上，以提升整体系统的性能：</p><ul><li><p>当单个数据库支持的连接数已经不足以满足客户端需求。</p></li><li><p>数据量已经超过单个数据库实例的处理能力。</p></li></ul><h4 id="_3-什么场景分库分表" tabindex="-1"><a class="header-anchor" href="#_3-什么场景分库分表"><span>3. 什么场景分库分表？</span></a></h4><p>当出现以下两种场景下，需要进行分库又分表：高并发写入和海量数据：</p><ul><li><p>高并发写入场景：当应用面临高并发的写入请求时，单一数据库可能无法满足写入压力，此时可以将数据按照一定规则拆分到多个数据库中，每个数据库处理部分数据的写入请求，从而提高写入性能。</p></li><li><p>海量数据场景：随着数据量的不断增加，单一数据库的存储和查询性能可能逐渐下降。此时，可以将数据按照一定的规则拆分到多个表中，每个表存储部分数据，从而分散数据的存储压力，提高查询性能。</p></li></ul></div><p>分库分表框架:</p><p>MyCat：<a href="https://gitee.com/MycatOne/Mycat2" target="_blank" rel="noopener noreferrer">https://gitee.com/MycatOne/Mycat2</a></p><p>ShardingSphere：<a href="https://shardingsphere.apache.org" target="_blank" rel="noopener noreferrer">https://shardingsphere.apache.org</a></p><h3 id="分库分表设计" tabindex="-1"><a class="header-anchor" href="#分库分表设计"><span>分库分表设计</span></a></h3><div class="hint-container tip"><p class="hint-container-title">分片键和分库分表算法</p><h4 id="_1-如何选择分片键" tabindex="-1"><a class="header-anchor" href="#_1-如何选择分片键"><span>1. 如何选择分片键？</span></a></h4><ul><li><p>数据均匀性：分片键应该保证数据的均匀分布在各个分片上，避免出现热点数据集中在某个分片上的情况。</p></li><li><p>业务关联性：分片键应该与业务关联紧密，这样可以避免跨分片查询和跨库事务的复杂性。</p></li><li><p>数据不可变：一旦选择了分片键，它应该是不可变的，不能随着业务的变化而频繁修改。</p></li></ul><h4 id="_2-分库分表算法" tabindex="-1"><a class="header-anchor" href="#_2-分库分表算法"><span>2. 分库分表算法？</span></a></h4><p>分库分表的算法会根据业务的不同而变化，并没有固定算法。在业界里用的比较多的有两种：</p><ul><li><p>HashMod：通过对分片键进行哈希取模的分片算法。</p></li><li><p>时间范围： 基于时间范围分片算法。</p></li></ul></div><h3 id="shardingsphere" tabindex="-1"><a class="header-anchor" href="#shardingsphere"><span>ShardingSphere</span></a></h3><h2 id="分布式数据库" tabindex="-1"><a class="header-anchor" href="#分布式数据库"><span>分布式数据库</span></a></h2>',11)]))}const d=r(i,[["render",n],["__file","db.html.vue"]]),o=JSON.parse('{"path":"/java/service/mw/db.html","title":"分布式数据库","lang":"en-US","frontmatter":{"order":70,"title":"分布式数据库","description":"主从复制和读写分离 数据库分库分表 分库有两种模式 垂直拆库：电商库 MallDB，业务拆分后就是 UserDB、OrderDB、PayDB 等。 分片拆库：用户库 UserDB，分片库后就是 UserDB_0、UserDB_1、UserDB_xx。 分表也有两种模式 垂直拆分：订单表 OrderTable，拆分后就是 OrderTable 以及 Or...","head":[["meta",{"property":"og:url","content":"https://x.app/java/service/mw/db.html"}],["meta",{"property":"og:site_name","content":"Home"}],["meta",{"property":"og:title","content":"分布式数据库"}],["meta",{"property":"og:description","content":"主从复制和读写分离 数据库分库分表 分库有两种模式 垂直拆库：电商库 MallDB，业务拆分后就是 UserDB、OrderDB、PayDB 等。 分片拆库：用户库 UserDB，分片库后就是 UserDB_0、UserDB_1、UserDB_xx。 分表也有两种模式 垂直拆分：订单表 OrderTable，拆分后就是 OrderTable 以及 Or..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式数据库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"主从复制和读写分离","slug":"主从复制和读写分离","link":"#主从复制和读写分离","children":[]},{"level":2,"title":"数据库分库分表","slug":"数据库分库分表","link":"#数据库分库分表","children":[{"level":3,"title":"分库分表设计","slug":"分库分表设计","link":"#分库分表设计","children":[]},{"level":3,"title":"ShardingSphere","slug":"shardingsphere","link":"#shardingsphere","children":[]}]},{"level":2,"title":"分布式数据库","slug":"分布式数据库","link":"#分布式数据库","children":[]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":2.4,"words":721},"filePathRelative":"java/service/mw/db.md","localizedDate":"January 10, 2025","excerpt":"<h2>主从复制和读写分离</h2>\\n<h2>数据库分库分表</h2>\\n<ul>\\n<li>\\n<p>分库有两种模式</p>\\n<ul>\\n<li>\\n<p>垂直拆库：电商库 MallDB，业务拆分后就是 UserDB、OrderDB、PayDB 等。</p>\\n</li>\\n<li>\\n<p>分片拆库：用户库 UserDB，分片库后就是 UserDB_0、UserDB_1、UserDB_xx。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>分表也有两种模式</p>\\n<ul>\\n<li>\\n<p>垂直拆分：订单表 OrderTable，拆分后就是 OrderTable 以及 OrderExtTable。</p>\\n</li>\\n<li>\\n<p>水平拆分：订单表 OrderTable，拆分后就是 OrderTable_0、 OrderTable_xxx。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
