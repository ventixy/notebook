import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-BK9q_BiU.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="一、自动装配原理" tabindex="-1"><a class="header-anchor" href="#一、自动装配原理"><span>一、自动装配原理</span></a></h2><p>SpringBoot 的核心特性之一是自动装配（Auto-Configuration），它能够根据应用程序的依赖和配置自动配置 Spring 应用。</p><h3 id="_1-自动装配的实现原理" tabindex="-1"><a class="header-anchor" href="#_1-自动装配的实现原理"><span>1. 自动装配的实现原理</span></a></h3><p>自动装配的核心是通过 <code>@SpringBootApplication</code> 注解实现的，该注解是一个组合注解，包含了以下三个重要注解：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootConfiguration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ComponentScan</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration"><span>@SpringBootConfiguration</span></a></h4><p>本质上是 <code>@Configuration</code> 注解的特殊形式，标识这是一个 Spring 配置类。</p><h4 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan"><span>@ComponentScan</span></a></h4><p>扫描被 <code>@Component</code>、<code>@Service</code>、<code>@Controller</code> 等注解标记的类并注册为 Spring Bean。默认扫描启动类所在包及其子包。</p><h4 id="enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration"><span>@EnableAutoConfiguration</span></a></h4><p>这是实现自动装配的核心注解，它由以下两部分组成：</p><ul><li><strong>@AutoConfigurationPackage</strong>：将启动类所在包及其子包下的组件注册到容器中</li><li><strong>@Import(AutoConfigurationImportSelector.class)</strong>：导入自动配置类</li></ul><h3 id="_2-自动装配的执行流程" tabindex="-1"><a class="header-anchor" href="#_2-自动装配的执行流程"><span>2. 自动装配的执行流程</span></a></h3><ol><li><p><strong>获取候选配置类</strong>：<code>AutoConfigurationImportSelector</code> 通过 <code>SpringFactoriesLoader</code> 加载 <code>META-INF/spring.factories</code> 文件中的配置类</p></li><li><p><strong>过滤不符合条件的配置类</strong>：根据 <code>@ConditionalOnXXX</code> 注解判断是否需要加载特定的配置类</p></li><li><p><strong>将符合条件的配置类注册到 Spring 容器</strong></p></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> configurations </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SpringFactoriesLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadFactoryNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    EnableAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, classLoader);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-条件化装配" tabindex="-1"><a class="header-anchor" href="#_3-条件化装配"><span>3. 条件化装配</span></a></h3><p>SpringBoot 提供了多种条件注解，用于控制 Bean 的装配条件：</p><ul><li><strong>@ConditionalOnClass</strong>：当类路径下存在指定类时，配置生效</li><li><strong>@ConditionalOnMissingClass</strong>：当类路径下不存在指定类时，配置生效</li><li><strong>@ConditionalOnBean</strong>：当容器中存在指定 Bean 时，配置生效</li><li><strong>@ConditionalOnMissingBean</strong>：当容器中不存在指定 Bean 时，配置生效</li><li><strong>@ConditionalOnProperty</strong>：当配置文件中存在指定属性时，配置生效</li><li><strong>@ConditionalOnWebApplication</strong>：当应用是 Web 应用时，配置生效</li></ul><h3 id="_4-自定义自动装配" tabindex="-1"><a class="header-anchor" href="#_4-自定义自动装配"><span>4. 自定义自动装配</span></a></h3><p>创建自定义自动装配的步骤：</p><ol><li><strong>创建配置类</strong>：使用 <code>@Configuration</code> 和条件注解</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyServiceImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>创建 <code>META-INF/spring.factories</code> 文件</strong>：</li></ol><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">com.example.MyAutoConfiguration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>打包为 starter</strong>：创建一个独立的模块，包含自动配置类和必要的依赖</li></ol><h2 id="二、springboot-启动流程" tabindex="-1"><a class="header-anchor" href="#二、springboot-启动流程"><span>二、SpringBoot 启动流程</span></a></h2><h3 id="_1-启动流程概述" tabindex="-1"><a class="header-anchor" href="#_1-启动流程概述"><span>1. 启动流程概述</span></a></h3><p>SpringBoot 应用启动的入口是 <code>SpringApplication.run()</code> 方法，整个启动流程可以分为以下几个阶段：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-springapplication-的初始化" tabindex="-1"><a class="header-anchor" href="#_2-springapplication-的初始化"><span>2. SpringApplication 的初始化</span></a></h3><p>在调用 <code>run()</code> 方法之前，<code>SpringApplication</code> 的构造方法会执行以下操作：</p><ol><li><strong>推断应用类型</strong>：判断是否为 Web 应用（Servlet/Reactive）</li><li><strong>加载 ApplicationContextInitializer</strong>：从 <code>spring.factories</code> 中加载</li><li><strong>加载 ApplicationListener</strong>：从 <code>spring.factories</code> 中加载</li><li><strong>推断主类</strong>：通过分析调用栈确定主配置类</li></ol><h3 id="_3-run-方法执行流程" tabindex="-1"><a class="header-anchor" href="#_3-run-方法执行流程"><span>3. run() 方法执行流程</span></a></h3><p><code>run()</code> 方法是启动 SpringBoot 应用的核心，其执行流程如下：</p><ol><li><p><strong>创建 StopWatch</strong>：用于记录启动耗时</p></li><li><p><strong>创建 SpringApplicationRunListeners</strong>：用于在启动过程中广播事件</p></li><li><p><strong>准备环境（prepareEnvironment）</strong>：</p><ul><li>创建并配置环境对象（StandardEnvironment）</li><li>加载属性源（PropertySource）</li><li>绑定环境变量</li></ul></li><li><p><strong>打印 Banner</strong>：输出 SpringBoot 的 Banner</p></li><li><p><strong>创建 ApplicationContext</strong>：根据应用类型创建对应的 ApplicationContext</p></li><li><p><strong>准备 ApplicationContext（prepareContext）</strong>：</p><ul><li>设置环境对象</li><li>执行 ApplicationContextInitializer</li><li>加载主配置类</li></ul></li><li><p><strong>刷新 ApplicationContext（refreshContext）</strong>：</p><ul><li>注册 BeanPostProcessor</li><li>注册单例 Bean</li><li>启动内嵌 Web 服务器</li></ul></li><li><p><strong>执行 ApplicationRunner 和 CommandLineRunner</strong>：</p><ul><li>执行自定义的启动任务</li></ul></li></ol><h3 id="_4-启动生命周期事件" tabindex="-1"><a class="header-anchor" href="#_4-启动生命周期事件"><span>4. 启动生命周期事件</span></a></h3><p>SpringBoot 在启动过程中会发布一系列事件：</p><ul><li><strong>ApplicationStartingEvent</strong>：应用启动开始</li><li><strong>ApplicationEnvironmentPreparedEvent</strong>：环境准备完成</li><li><strong>ApplicationContextInitializedEvent</strong>：ApplicationContext 初始化完成</li><li><strong>ApplicationPreparedEvent</strong>：ApplicationContext 加载完成，但未刷新</li><li><strong>ApplicationStartedEvent</strong>：ApplicationContext 刷新完成</li><li><strong>ApplicationReadyEvent</strong>：应用准备就绪</li><li><strong>ApplicationFailedEvent</strong>：启动失败</li></ul><h2 id="三、嵌入式-web-容器" tabindex="-1"><a class="header-anchor" href="#三、嵌入式-web-容器"><span>三、嵌入式 Web 容器</span></a></h2><h3 id="_1-嵌入式容器的类型" tabindex="-1"><a class="header-anchor" href="#_1-嵌入式容器的类型"><span>1. 嵌入式容器的类型</span></a></h3><p>SpringBoot 支持多种嵌入式 Web 容器：</p><ul><li><strong>Servlet 容器</strong>：Tomcat、Jetty、Undertow</li><li><strong>Reactive 容器</strong>：Netty（WebFlux）</li></ul><h3 id="_2-嵌入式容器的自动配置" tabindex="-1"><a class="header-anchor" href="#_2-嵌入式容器的自动配置"><span>2. 嵌入式容器的自动配置</span></a></h3><p>SpringBoot 根据应用类型和依赖自动配置嵌入式容器：</p><ul><li><strong>ServletWebServerFactoryAutoConfiguration</strong>：配置 Servlet 容器</li><li><strong>ReactiveWebServerFactoryAutoConfiguration</strong>：配置 Reactive 容器</li></ul><h3 id="_3-嵌入式-servlet-容器的工作原理" tabindex="-1"><a class="header-anchor" href="#_3-嵌入式-servlet-容器的工作原理"><span>3. 嵌入式 Servlet 容器的工作原理</span></a></h3><ol><li><strong>容器的创建与启动</strong>：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在 ApplicationContext 刷新阶段</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> refresh</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onRefresh</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 创建并启动 Web 服务器</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>ServletWebServerFactory</strong>：</li></ol><p>根据条件自动选择合适的工厂实现：</p><ul><li>TomcatServletWebServerFactory</li><li>JettyServletWebServerFactory</li><li>UndertowServletWebServerFactory</li></ul><ol start="3"><li><strong>自定义嵌入式容器</strong>：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConfigurableServletWebServerFactory</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> webServerFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    TomcatServletWebServerFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> factory </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TomcatServletWebServerFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addConnectorCustomizers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((connector) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxPostSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-切换嵌入式容器" tabindex="-1"><a class="header-anchor" href="#_4-切换嵌入式容器"><span>4. 切换嵌入式容器</span></a></h3><p>默认情况下，SpringBoot 使用 Tomcat 作为嵌入式容器。可以通过修改依赖切换到其他容器：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- 排除 Tomcat --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 使用 Undertow --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-undertow&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、外部化配置原理" tabindex="-1"><a class="header-anchor" href="#四、外部化配置原理"><span>四、外部化配置原理</span></a></h2><h3 id="_1-配置加载顺序" tabindex="-1"><a class="header-anchor" href="#_1-配置加载顺序"><span>1. 配置加载顺序</span></a></h3><p>SpringBoot 按照优先级从高到低加载配置：</p><ol><li><strong>命令行参数</strong></li><li><strong>Java 系统属性（System.getProperties()）</strong></li><li><strong>操作系统环境变量</strong></li><li><strong>application-{profile}.properties/yml</strong></li><li><strong>application.properties/yml</strong></li><li><strong>@PropertySource 注解指定的配置</strong></li><li><strong>默认属性</strong></li></ol><h3 id="_2-配置属性绑定原理" tabindex="-1"><a class="header-anchor" href="#_2-配置属性绑定原理"><span>2. 配置属性绑定原理</span></a></h3><h4 id="configurationproperties-原理" tabindex="-1"><a class="header-anchor" href="#configurationproperties-原理"><span>@ConfigurationProperties 原理</span></a></h4><ol><li><p><strong>注册 ConfigurationPropertiesBindingPostProcessor</strong>：</p><ul><li>由 <code>@EnableConfigurationProperties</code> 触发注册</li></ul></li><li><p><strong>绑定过程</strong>：</p><ul><li>使用 <code>Binder</code> 将外部配置绑定到 Java Bean</li><li>支持松散绑定（驼峰、短横线、下划线等命名方式）</li><li>支持类型转换</li></ul></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConfigurationProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;app&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // getters and setters</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-配置文件加载机制" tabindex="-1"><a class="header-anchor" href="#_3-配置文件加载机制"><span>3. 配置文件加载机制</span></a></h3><p>SpringBoot 使用 <code>PropertySourceLoader</code> 接口的实现类加载配置文件：</p><ul><li><strong>PropertiesPropertySourceLoader</strong>：加载 <code>.properties</code> 文件</li><li><strong>YamlPropertySourceLoader</strong>：加载 <code>.yml</code> 和 <code>.yaml</code> 文件</li></ul><p>配置文件的搜索路径（按优先级排序）：</p><ol><li><strong>file:./config/</strong></li><li><strong>file:./</strong></li><li><strong>classpath:/config/</strong></li><li><strong>classpath:/</strong></li></ol><h2 id="五、spring-boot-actuator" tabindex="-1"><a class="header-anchor" href="#五、spring-boot-actuator"><span>五、Spring Boot Actuator</span></a></h2><h3 id="_1-actuator-简介" tabindex="-1"><a class="header-anchor" href="#_1-actuator-简介"><span>1. Actuator 简介</span></a></h3><p>Spring Boot Actuator 是 SpringBoot 的一个子项目，提供了对应用的监控和管理功能。</p><h3 id="_2-主要功能" tabindex="-1"><a class="header-anchor" href="#_2-主要功能"><span>2. 主要功能</span></a></h3><ul><li><strong>端点（Endpoints）</strong>：提供应用的各种信息</li><li><strong>度量（Metrics）</strong>：收集应用运行时的指标</li><li><strong>审计（Auditing）</strong>：记录安全事件</li><li><strong>HTTP 追踪</strong>：记录 HTTP 请求的信息</li></ul><h3 id="_3-常用端点" tabindex="-1"><a class="header-anchor" href="#_3-常用端点"><span>3. 常用端点</span></a></h3><ul><li><strong>/actuator/health</strong>：应用健康状况</li><li><strong>/actuator/info</strong>：应用信息</li><li><strong>/actuator/metrics</strong>：应用指标</li><li><strong>/actuator/env</strong>：环境变量</li><li><strong>/actuator/beans</strong>：Spring Bean 信息</li><li><strong>/actuator/mappings</strong>：请求映射信息</li><li><strong>/actuator/configprops</strong>：配置属性信息</li></ul><h3 id="_4-自定义端点" tabindex="-1"><a class="header-anchor" href="#_4-自定义端点"><span>4. 自定义端点</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Endpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;myEndpoint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyEndpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ReadOperation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;My Custom Endpoint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;timestamp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> info;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">WriteOperation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Selector</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 处理写操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、spring-boot-与-spring-mvc" tabindex="-1"><a class="header-anchor" href="#六、spring-boot-与-spring-mvc"><span>六、Spring Boot 与 Spring MVC</span></a></h2><h3 id="_1-自动配置原理" tabindex="-1"><a class="header-anchor" href="#_1-自动配置原理"><span>1. 自动配置原理</span></a></h3><p>SpringBoot 通过 <code>WebMvcAutoConfiguration</code> 自动配置 Spring MVC：</p><ul><li>自动配置 <code>DispatcherServlet</code></li><li>自动配置 <code>ViewResolver</code></li><li>自动配置静态资源处理</li><li>自动配置 <code>Converter</code>、<code>Formatter</code></li><li>自动配置 <code>HttpMessageConverter</code></li></ul><h3 id="_2-扩展-spring-mvc-配置" tabindex="-1"><a class="header-anchor" href="#_2-扩展-spring-mvc-配置"><span>2. 扩展 Spring MVC 配置</span></a></h3><p>两种方式扩展 Spring MVC 配置：</p><h4 id="保留自动配置-添加额外配置" tabindex="-1"><a class="header-anchor" href="#保留自动配置-添加额外配置"><span>保留自动配置，添加额外配置</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebMvcConfigurer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addInterceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterceptorRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addFormatters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FormatterRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFormatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyFormatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完全接管-spring-mvc-配置" tabindex="-1"><a class="header-anchor" href="#完全接管-spring-mvc-配置"><span>完全接管 Spring MVC 配置</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebMvc</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebMvcConfigurer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 完全自定义 MVC 配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-内容协商" tabindex="-1"><a class="header-anchor" href="#_3-内容协商"><span>3. 内容协商</span></a></h3><p>SpringBoot 自动配置了内容协商机制，支持多种媒体类型：</p><ul><li>基于请求的 Accept 头</li><li>基于 URL 的后缀（默认禁用）</li><li>基于请求参数（默认禁用）</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  mvc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    contentnegotiation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      favor-parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      parameter-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、spring-boot-与数据访问" tabindex="-1"><a class="header-anchor" href="#七、spring-boot-与数据访问"><span>七、Spring Boot 与数据访问</span></a></h2><h3 id="_1-数据源自动配置" tabindex="-1"><a class="header-anchor" href="#_1-数据源自动配置"><span>1. 数据源自动配置</span></a></h3><p>SpringBoot 通过 <code>DataSourceAutoConfiguration</code> 自动配置数据源：</p><ul><li>根据依赖自动选择数据源类型（HikariCP、Tomcat JDBC、Commons DBCP2）</li><li>根据配置文件配置数据源属性</li></ul><h3 id="_2-事务管理自动配置" tabindex="-1"><a class="header-anchor" href="#_2-事务管理自动配置"><span>2. 事务管理自动配置</span></a></h3><p><code>DataSourceTransactionManagerAutoConfiguration</code> 自动配置事务管理器：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JdbcTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> PlatformTransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSourceTransactionManagerAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnMissingBean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PlatformTransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSourceTransactionManager</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> dataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DataSourceTransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dataSource);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-jpa-自动配置" tabindex="-1"><a class="header-anchor" href="#_3-jpa-自动配置"><span>3. JPA 自动配置</span></a></h3><p><code>HibernateJpaAutoConfiguration</code> 自动配置 JPA：</p><ul><li>自动配置 <code>EntityManagerFactory</code></li><li>自动配置 <code>JpaTransactionManager</code></li><li>自动配置 <code>JpaVendorAdapter</code></li></ul><h3 id="_4-mybatis-自动配置" tabindex="-1"><a class="header-anchor" href="#_4-mybatis-自动配置"><span>4. MyBatis 自动配置</span></a></h3><p><code>MybatisAutoConfiguration</code> 自动配置 MyBatis：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SqlSessionFactoryBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnSingleCandidate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableConfigurationProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MybatisProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MybatisAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SqlSessionFactory</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> dataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SqlSessionFactoryBean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> factory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SqlSessionFactoryBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setDataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dataSource);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、spring-boot-应用打包与运行" tabindex="-1"><a class="header-anchor" href="#八、spring-boot-应用打包与运行"><span>八、Spring Boot 应用打包与运行</span></a></h2><h3 id="_1-可执行-jar-的原理" tabindex="-1"><a class="header-anchor" href="#_1-可执行-jar-的原理"><span>1. 可执行 JAR 的原理</span></a></h3><p>SpringBoot 使用 <code>spring-boot-maven-plugin</code> 或 <code>spring-boot-gradle-plugin</code> 创建可执行 JAR：</p><ul><li><strong>Fat JAR</strong>：包含应用及其所有依赖</li><li><strong>嵌套 JAR 结构</strong>：特殊的 JAR 文件格式，允许嵌套 JAR</li></ul><h3 id="_2-jar-文件结构" tabindex="-1"><a class="header-anchor" href="#_2-jar-文件结构"><span>2. JAR 文件结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>my-app.jar</span></span>
<span class="line"><span> ├── META-INF</span></span>
<span class="line"><span> │   └── MANIFEST.MF</span></span>
<span class="line"><span> ├── org/springframework/boot/loader/...</span></span>
<span class="line"><span> ├── BOOT-INF</span></span>
<span class="line"><span> │   ├── classes/  # 应用类</span></span>
<span class="line"><span> │   └── lib/      # 依赖 JAR</span></span>
<span class="line"><span> └── ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启动流程" tabindex="-1"><a class="header-anchor" href="#_3-启动流程"><span>3. 启动流程</span></a></h3><ol><li><p><strong>JarLauncher</strong>：</p><ul><li>从 <code>MANIFEST.MF</code> 中读取 <code>Main-Class</code>（默认为 <code>JarLauncher</code>）</li><li>从 <code>MANIFEST.MF</code> 中读取 <code>Start-Class</code>（应用的主类）</li></ul></li><li><p><strong>类加载</strong>：</p><ul><li>使用自定义的 <code>LaunchedURLClassLoader</code> 加载类</li><li>支持从嵌套 JAR 中加载类</li></ul></li><li><p><strong>启动应用</strong>：</p><ul><li>调用应用主类的 <code>main</code> 方法</li></ul></li></ol><h3 id="_4-部署方式" tabindex="-1"><a class="header-anchor" href="#_4-部署方式"><span>4. 部署方式</span></a></h3><ul><li><strong>独立应用</strong>：直接运行 JAR 文件</li><li><strong>云平台</strong>：部署到 Cloud Foundry、Heroku 等</li><li><strong>Docker 容器</strong>：创建 Docker 镜像运行</li><li><strong>传统 WAR</strong>：部署到外部 Servlet 容器</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletInitializer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SpringBootServletInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SpringApplicationBuilder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SpringApplicationBuilder</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116)]))}const k=s(e,[["render",t],["__file","sb-core.html.vue"]]),d=JSON.parse('{"path":"/java/frame/spring/sb-core.html","title":"SpringBoot原理深入剖析","lang":"en-US","frontmatter":{"order":61,"title":"SpringBoot原理深入剖析","shortTitle":"SpringBoot原理","description":"一、自动装配原理 SpringBoot 的核心特性之一是自动装配（Auto-Configuration），它能够根据应用程序的依赖和配置自动配置 Spring 应用。 1. 自动装配的实现原理 自动装配的核心是通过 @SpringBootApplication 注解实现的，该注解是一个组合注解，包含了以下三个重要注解： @SpringBootConfi...","head":[["meta",{"property":"og:url","content":"https://x.app/java/frame/spring/sb-core.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"SpringBoot原理深入剖析"}],["meta",{"property":"og:description","content":"一、自动装配原理 SpringBoot 的核心特性之一是自动装配（Auto-Configuration），它能够根据应用程序的依赖和配置自动配置 Spring 应用。 1. 自动装配的实现原理 自动装配的核心是通过 @SpringBootApplication 注解实现的，该注解是一个组合注解，包含了以下三个重要注解： @SpringBootConfi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-07T16:06:59.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-05-07T16:06:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot原理深入剖析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-07T16:06:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"一、自动装配原理","slug":"一、自动装配原理","link":"#一、自动装配原理","children":[{"level":3,"title":"1. 自动装配的实现原理","slug":"_1-自动装配的实现原理","link":"#_1-自动装配的实现原理","children":[]},{"level":3,"title":"2. 自动装配的执行流程","slug":"_2-自动装配的执行流程","link":"#_2-自动装配的执行流程","children":[]},{"level":3,"title":"3. 条件化装配","slug":"_3-条件化装配","link":"#_3-条件化装配","children":[]},{"level":3,"title":"4. 自定义自动装配","slug":"_4-自定义自动装配","link":"#_4-自定义自动装配","children":[]}]},{"level":2,"title":"二、SpringBoot 启动流程","slug":"二、springboot-启动流程","link":"#二、springboot-启动流程","children":[{"level":3,"title":"1. 启动流程概述","slug":"_1-启动流程概述","link":"#_1-启动流程概述","children":[]},{"level":3,"title":"2. SpringApplication 的初始化","slug":"_2-springapplication-的初始化","link":"#_2-springapplication-的初始化","children":[]},{"level":3,"title":"3. run() 方法执行流程","slug":"_3-run-方法执行流程","link":"#_3-run-方法执行流程","children":[]},{"level":3,"title":"4. 启动生命周期事件","slug":"_4-启动生命周期事件","link":"#_4-启动生命周期事件","children":[]}]},{"level":2,"title":"三、嵌入式 Web 容器","slug":"三、嵌入式-web-容器","link":"#三、嵌入式-web-容器","children":[{"level":3,"title":"1. 嵌入式容器的类型","slug":"_1-嵌入式容器的类型","link":"#_1-嵌入式容器的类型","children":[]},{"level":3,"title":"2. 嵌入式容器的自动配置","slug":"_2-嵌入式容器的自动配置","link":"#_2-嵌入式容器的自动配置","children":[]},{"level":3,"title":"3. 嵌入式 Servlet 容器的工作原理","slug":"_3-嵌入式-servlet-容器的工作原理","link":"#_3-嵌入式-servlet-容器的工作原理","children":[]},{"level":3,"title":"4. 切换嵌入式容器","slug":"_4-切换嵌入式容器","link":"#_4-切换嵌入式容器","children":[]}]},{"level":2,"title":"四、外部化配置原理","slug":"四、外部化配置原理","link":"#四、外部化配置原理","children":[{"level":3,"title":"1. 配置加载顺序","slug":"_1-配置加载顺序","link":"#_1-配置加载顺序","children":[]},{"level":3,"title":"2. 配置属性绑定原理","slug":"_2-配置属性绑定原理","link":"#_2-配置属性绑定原理","children":[]},{"level":3,"title":"3. 配置文件加载机制","slug":"_3-配置文件加载机制","link":"#_3-配置文件加载机制","children":[]}]},{"level":2,"title":"五、Spring Boot Actuator","slug":"五、spring-boot-actuator","link":"#五、spring-boot-actuator","children":[{"level":3,"title":"1. Actuator 简介","slug":"_1-actuator-简介","link":"#_1-actuator-简介","children":[]},{"level":3,"title":"2. 主要功能","slug":"_2-主要功能","link":"#_2-主要功能","children":[]},{"level":3,"title":"3. 常用端点","slug":"_3-常用端点","link":"#_3-常用端点","children":[]},{"level":3,"title":"4. 自定义端点","slug":"_4-自定义端点","link":"#_4-自定义端点","children":[]}]},{"level":2,"title":"六、Spring Boot 与 Spring MVC","slug":"六、spring-boot-与-spring-mvc","link":"#六、spring-boot-与-spring-mvc","children":[{"level":3,"title":"1. 自动配置原理","slug":"_1-自动配置原理","link":"#_1-自动配置原理","children":[]},{"level":3,"title":"2. 扩展 Spring MVC 配置","slug":"_2-扩展-spring-mvc-配置","link":"#_2-扩展-spring-mvc-配置","children":[]},{"level":3,"title":"3. 内容协商","slug":"_3-内容协商","link":"#_3-内容协商","children":[]}]},{"level":2,"title":"七、Spring Boot 与数据访问","slug":"七、spring-boot-与数据访问","link":"#七、spring-boot-与数据访问","children":[{"level":3,"title":"1. 数据源自动配置","slug":"_1-数据源自动配置","link":"#_1-数据源自动配置","children":[]},{"level":3,"title":"2. 事务管理自动配置","slug":"_2-事务管理自动配置","link":"#_2-事务管理自动配置","children":[]},{"level":3,"title":"3. JPA 自动配置","slug":"_3-jpa-自动配置","link":"#_3-jpa-自动配置","children":[]},{"level":3,"title":"4. MyBatis 自动配置","slug":"_4-mybatis-自动配置","link":"#_4-mybatis-自动配置","children":[]}]},{"level":2,"title":"八、Spring Boot 应用打包与运行","slug":"八、spring-boot-应用打包与运行","link":"#八、spring-boot-应用打包与运行","children":[{"level":3,"title":"1. 可执行 JAR 的原理","slug":"_1-可执行-jar-的原理","link":"#_1-可执行-jar-的原理","children":[]},{"level":3,"title":"2. JAR 文件结构","slug":"_2-jar-文件结构","link":"#_2-jar-文件结构","children":[]},{"level":3,"title":"3. 启动流程","slug":"_3-启动流程","link":"#_3-启动流程","children":[]},{"level":3,"title":"4. 部署方式","slug":"_4-部署方式","link":"#_4-部署方式","children":[]}]}],"git":{"createdTime":1746634019000,"updatedTime":1746634019000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":7.05,"words":2115},"filePathRelative":"java/frame/spring/sb-core.md","localizedDate":"May 7, 2025","excerpt":"<h2>一、自动装配原理</h2>\\n<p>SpringBoot 的核心特性之一是自动装配（Auto-Configuration），它能够根据应用程序的依赖和配置自动配置 Spring 应用。</p>\\n<h3>1. 自动装配的实现原理</h3>\\n<p>自动装配的核心是通过 <code>@SpringBootApplication</code> 注解实现的，该注解是一个组合注解，包含了以下三个重要注解：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">SpringBootConfiguration</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">EnableAutoConfiguration</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ComponentScan</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,d as data};
