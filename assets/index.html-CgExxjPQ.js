import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-CDk9dZVz.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="c语言及其发展史" tabindex="-1"><a class="header-anchor" href="#c语言及其发展史"><span>C语言及其发展史</span></a></h2><p>C 语言是最流行的编程语言之一，排名网站网址为：<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener noreferrer">https://www.tiobe.com/tiobe-index/</a></p><h3 id="c语言的发行版本" tabindex="-1"><a class="header-anchor" href="#c语言的发行版本"><span>C语言的发行版本</span></a></h3><p>（1）K&amp;R C（1978年）： 由柯尼汉和里奇合写的《C 程序设计语言》成为公认标准，简称为K&amp;R C<br> （2）ANSI C（C89/C90，1989年）： 第一个ISO标准，也叫ANSI C，规范了K&amp;R C，确保了可移植性<br> （3）C99（1999年）： 第一次大修订，引入许多特性如//注释、可变长度数组等，成为最流行版本<br> （4）C11（2011年）： 再次修订，增加_Generic、static_assert等功能，跟进新技术。<br> （5）C17（2018年）： C11在2017年修补，2018年发布的C17只解决了C11的缺陷，未加入新功能。<br> （6）C23： 2023年发布的C23计划增强安全性、消除实现定义行为、引入模块化语言等，提升安全和可靠性。</p><hr><h3 id="c语言的应用场景" tabindex="-1"><a class="header-anchor" href="#c语言的应用场景"><span>C语言的应用场景</span></a></h3><ol><li><p><strong>系统级开发</strong> ： 驱动/内核开发，嵌入式开发</p><ul><li>操作系统内核（Linux/Windows NT） ， 驱动程序（硬件交互层）</li><li>嵌入式固件（MCU编程如STM32）</li></ul></li><li><p><strong>高性能计算</strong>： 游戏引擎（如Unity底层模块） ，高频交易系统，科学计算库（如BLAS/LAPACK）</p></li><li><p><strong>基础软件组件</strong>：数据库（SQLite、Redis）， 编译器（GCC、LLVM） ，网络协议栈（TCP/IP实现）</p></li><li><p><strong>跨平台工具开发</strong> ：解释器（Python早期版本），命令行工具（Git、Vim）</p></li></ol><hr><h2 id="c语言的开发环境" tabindex="-1"><a class="header-anchor" href="#c语言的开发环境"><span>C语言的开发环境</span></a></h2><h3 id="gcc-gnu" tabindex="-1"><a class="header-anchor" href="#gcc-gnu"><span>GCC / GNU</span></a></h3><p>GCC，最初代表GNU C Compiler，现在代表GNU Compiler Collection，是由自由软件基金会（FSF）开发的一个编译器系统。它支持多种编程语言和硬件架构，并且是开源的，任何人都可以使用、修改和分发它。以下是GCC的一些关键特性：</p><ol><li><p><strong>多语言支持</strong>：GCC不仅限于C语言编译，还支持其他多种编程语言，如C++、Objective-C、Fortran、Ada、Go以及Java等。每种语言都有其对应的前端，GCC通过这些前端来解析不同的源代码语言。</p></li><li><p><strong>可移植性</strong>：GCC是一个高度可移植的编译器，能够运行在各种不同的硬件平台上，包括但不限于x86、ARM等。</p></li><li><p><strong>跨平台编译</strong>：除了作为本地编译器外，GCC还能进行交叉编译，即可以在一个平台上编译另一个平台上的可执行文件。例如，在x86架构的机器上编译适用于ARM架构的程序。</p></li><li><p><strong>模块化设计</strong>：GCC的设计是模块化的，这使得它可以很容易地加入对新语言和新CPU架构的支持。</p></li><li><p><strong>自由软件</strong>：作为一个自由软件项目，GCC遵循GPL许可证发布，这意味着用户有权查看、修改并重新分发该软件。</p></li></ol><div class="hint-container info"><p class="hint-container-title">GNU</p><p><strong>GNU</strong>（发音为 /ɡnuː/，递归缩写表示 <strong>&quot;GNU&#39;s Not Unix&quot;</strong>）是由 <strong>Richard Stallman</strong> 在1983年发起的自由软件操作系统项目。其目标是创建一个完全由自由软件组成的类Unix操作系统，使用户可以自由使用、修改和分发软件。</p><p><strong>GNU 与 Linux 的关系</strong>: Linux内核（由Linus Torvalds开发） + GNU工具链 = <strong>完整的操作系统</strong></p><ul><li>Linux内核（进程管理/硬件驱动）</li><li>GNU工具（编译器/Shell/基础命令）</li></ul><p><strong>GNU 在现代技术中的体现</strong></p><ul><li><strong>开发工具链</strong>： <ul><li>即使在不使用Linux的系统上（如macOS），开发者仍依赖GNU工具（<code>grep</code>/<code>sed</code>/<code>gcc</code>）</li></ul></li><li><strong>嵌入式领域</strong>： <ul><li>许多IoT设备使用GNU工具链编译固件</li></ul></li><li><strong>开源文化</strong>： <ul><li>GNU项目是Apache/MIT等许可证的思想源头</li></ul></li></ul><p>GNU不仅是技术项目，更是软件自由的象征。其工具链构成了现代开源开发的基石，从嵌入式设备到超级计算机无处不在。</p></div><p>GCC的工作流程通常分为四个阶段：</p><ul><li><strong>预处理（Pre-processing）</strong>：处理源代码中的预处理器指令，比如宏定义和头文件包含。</li><li><strong>编译（Compiling）</strong>：将预处理后的代码翻译成汇编语言代码。</li><li><strong>汇编（Assembling）</strong>：将汇编语言代码转换为目标机器码，生成目标文件。</li><li><strong>链接（Linking）</strong>：将一个或多个目标文件与所需的库链接起来，生成最终的可执行文件。</li></ul><p>GCC还提供了一系列命令行选项，允许用户控制编译过程的各个方面，比如指定标准版本（如C99）、优化级别、调试信息等。由于其强大的功能和灵活性，GCC成为了类Unix系统下最常用的编译工具之一，并且也被广泛应用于许多嵌入式系统开发中。</p><h3 id="开发工具选择" tabindex="-1"><a class="header-anchor" href="#开发工具选择"><span>开发工具选择</span></a></h3><p>1）Visual Studio 工具<br> Visual Studio（简称 VS）是由微软公司发布的集成开发环境，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境（IDE）等。<br> 官网地址：<a href="https://visualstudio.microsoft.com" target="_blank" rel="noopener noreferrer">https://visualstudio.microsoft.com</a></p><p>2）Code::Block工具<br> Code::Block是一个免费的跨平台IDE，它支持C、C++和Fortan程序的开发，Code::Block的最大特点是它支持通过插件的方式对IDE自身功能进行扩展，这使得Code::Block具有很强的灵活性，方便用户使用。<br> 官网地址：<a href="https://www.codeblocks.org" target="_blank" rel="noopener noreferrer">https://www.codeblocks.org</a></p><p>3）Clion工具<br> CLion是一款由JetBrains推出的跨平台C/C++集成开发环境（IDE），它具有智能编辑器、CMake构建支持、调试器、单元测试、代码分析等功能,可以极大提高C/C++开发效率。<br> 官网地址：<a href="https://www.jetbrains.com/clion" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/clion</a></p><p>4）VS Code<br> Visual Studio Code（简称VS Code）是一款由Microsoft开发的免费、开源的代码编辑器，它是一种轻量级但功能强大的集成开发环境（IDE），VS Code旨在提供一种优秀的编码体验，适用于各种编程语言和应用程序开发任务。<br> 官网地址：<a href="https://code.visualstudio.com" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com</a></p><p>5）在线编辑工具<br> CodingGround: <a href="https://tutorialspoint.com/compile_c_online.php" target="_blank" rel="noopener noreferrer">https://tutorialspoint.com/compile_c_online.php</a><br> OnlineGDB:<a href="https://onlinegdb.com/online_c_compiler" target="_blank" rel="noopener noreferrer">https://onlinegdb.com/online_c_compiler</a><br> Lightly：<a href="https://cde2f3ce.lightly.teamcode.com/" target="_blank" rel="noopener noreferrer">https://cde2f3ce.lightly.teamcode.com/</a></p><hr><h3 id="mingw-w64" tabindex="-1"><a class="header-anchor" href="#mingw-w64"><span>MinGW-w64</span></a></h3><p>MinGW (Minimalist GNU for Windows)</p><p>MinGW-w64 是一个用于Windows操作系统的开发工具集，其包含了C语言编译器 GCC（GNU Compiler Collection）。</p><ul><li>官网地址：<a href="https://www.mingw-w64.org" target="_blank" rel="noopener noreferrer">https://www.mingw-w64.org</a></li><li>下载地址：<a href="https://github.com/niXman/mingw-builds-binaries/releases/tag/13.2.0-rt_v11-rev1" target="_blank" rel="noopener noreferrer">Github</a>，下载后解压设置环境变量即可, 如<code>C:\\App\\mingw64\\bin</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 检查版本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="vs-code-配置" tabindex="-1"><a class="header-anchor" href="#vs-code-配置"><span>VS code 配置</span></a></h3><p>安装 C 语言扩展 ：<code>C/C++ Extension Pack</code> （包含了开发 C/C++ 所需要的多个扩展）, 安装后重启 VS code 即可。</p><p>新版VScode第一次运行时选择第一项即可自动生成相关的 <code>tasks.json</code> 配置文件:</p><figure><img src="https://image.ventix.top/img02/20250420182213187.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>后续可直接运行或 debug 调试:</p><figure><img src="https://image.ventix.top/img02/20250420182359299.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://image.ventix.top/img02/20250420182556669.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="c语言程序代码示例" tabindex="-1"><a class="header-anchor" href="#c语言程序代码示例"><span>C语言程序代码示例</span></a></h2><h3 id="第一个c程序" tabindex="-1"><a class="header-anchor" href="#第一个c程序"><span>第一个C程序</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>#include &lt;stdio.h&gt;</code>：引入标准输入输出库。</li><li><code>int main()</code>：主函数，程序入口点。</li><li><code>printf(&quot;Hello World&quot;);</code>：输出字符串“Hello World”到终端。</li><li><code>return 0;</code>：返回整型值0表示程序正常结束。</li></ul><h3 id="注释与代码风格" tabindex="-1"><a class="header-anchor" href="#注释与代码风格"><span>注释与代码风格</span></a></h3><p>C语言提供两种注释方式，用于提高代码可读性和文档化：</p><hr><ul><li>单行注释: 从 <code>//</code> 开始到行尾结束,适用于简短说明或代码行尾备注, C99标准引入（早期C89不支持）</li><li>多行注释（块注释）: 可跨越多行, 不能嵌套使用, 兼容所有C标准（C89/C99/C11）</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 函数声明 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用加法函数并打印结果 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5 + 3 = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 函数：add</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 参数：x - 第一个加数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *       y - 第二个加数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 返回：两数之和</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>类型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td>单行注释 <code>//</code></td><td>简洁，不影响代码缩进</td><td>不支持多行</td><td>行尾简短说明</td></tr><tr><td>块注释 <code>/* */</code></td><td>可跨行，兼容性高</td><td>不能嵌套</td><td>函数说明/代码段禁用</td></tr></tbody></table><hr><div class="hint-container tip"><p class="hint-container-title">主流大括号风格</p><ul><li><p>K&amp;R 风格（Kernighan &amp; Ritchie）</p><ul><li><strong>特点</strong>：左括号 <code>{</code> 放在行尾，右括号 <code>}</code> 独占一行</li><li><strong>优点</strong>：节省垂直空间，经典C语言书籍《The C Programming Language》使用</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Positive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Non-positive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Allman 风格（BSD 风格）</p><ul><li><strong>特点</strong>：左括号 <code>{</code> 和右括号 <code>}</code> 均独占一行</li><li><strong>优点</strong>：代码块视觉隔离清晰，便于调试</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Positive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Non-positive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><table><thead><tr><th><strong>风格</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>K&amp;R</strong></td><td>紧凑，节省行数</td><td>嵌套多时易混淆</td><td>Linux/嵌入式开发</td></tr><tr><td><strong>Allman</strong></td><td>块分隔清晰</td><td>占用更多垂直空间</td><td>教学/团队协作项目</td></tr></tbody></table><p><strong>最终建议</strong>：</p><ol><li>新项目优先选择 <strong>K&amp;R</strong> 风格（行业主流）</li><li>在代码评审中强制要求括号规范</li></ol></div><hr><h3 id="进制及进制转换" tabindex="-1"><a class="header-anchor" href="#进制及进制转换"><span>进制及进制转换</span></a></h3><p>C语言支持以下几种常见进制的表示：</p><ol><li><p><strong>十进制 (Decimal)</strong>： 默认的整数表示方式， 直接书写数字即可</p></li><li><p><strong>八进制 (Octal)</strong>：以数字 <code>0</code> 开头，后面跟八进制数字（0-7）</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 八进制12，等价于十进制的10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>十六进制 (Hexadecimal)</strong>：以 <code>0x</code> 或 <code>0X</code> 开头，后面跟十六进制数字（0-9 和 A-F/a-f）</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 十六进制1A，等价于十进制的26</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>二进制 (Binary)</strong>：C语言标准本身并不直接支持二进制字面量（如<code>0b1010</code>），但在某些编译器（如GCC和Clang）中可以通过扩展支持。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1010</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 二进制1010，等价于十进制的10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果需要跨平台兼容性，可以手动使用其他方法（如字符串或位运算）来表示二进制。</p></li></ol><hr><div class="hint-container info"><p class="hint-container-title">进制的输出样式</p><p>C语言通过<code>printf()</code>函数可以以不同的进制格式输出整数值。以下是常用的格式说明符及其作用：</p><ol><li><strong>十进制输出</strong>: 使用 <code>%d</code> 或 <code>%i</code> 格式说明符。<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Decimal: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Decimal: 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>八进制输出</strong>: 使用 <code>%o</code> 格式说明符。<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Octal: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%o</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Octal: 12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>十六进制输出</strong>: 使用 <code>%x</code> 或 <code>%X</code> 格式说明符。 <ul><li><code>%x</code> 输出小写字母（a-f）。</li><li><code>%X</code> 输出大写字母（A-F）。</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hexadecimal (lowercase): </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Hexadecimal (lowercase): 1a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hexadecimal (uppercase): </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%X</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Hexadecimal (uppercase): 1A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>带前缀的十六进制输出</strong>: 使用 <code>#</code> 标志可以在输出中添加前缀 <code>0x</code> 或 <code>0X</code>。<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hexadecimal with prefix: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%#x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Hexadecimal with prefix: 0x1a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hexadecimal with prefix: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%#X</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Hexadecimal with prefix: 0X1A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>二进制输出</strong>: C语言标准库没有直接支持二进制输出，但可以通过自定义函数实现。<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print_binary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> binary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">33</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        binary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;1&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, binary </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Binary: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print_binary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：Binary: 1010</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></div><hr><h2 id="c-核心特性简介" tabindex="-1"><a class="header-anchor" href="#c-核心特性简介"><span>C++核心特性简介</span></a></h2><p>C++ 是一种通用编程语言，由 Bjarne Stroustrup 于 1985 年在贝尔实验室开发，作为 C 语言的扩展。它在 C 语言的基础上增加了面向对象编程（OOP）和泛型编程的特性，同时保持了 C 语言的高效性和底层控制能力。</p><table><thead><tr><th><strong>特性</strong></th><th><strong>C 语言</strong></th><th><strong>C++</strong></th></tr></thead><tbody><tr><td><strong>编程范式</strong></td><td>过程式编程</td><td>多范式（过程式、面向对象、泛型）</td></tr><tr><td><strong>标准库</strong></td><td>小型标准库（stdio.h, stdlib.h等）</td><td>庞大的标准模板库（STL）</td></tr><tr><td><strong>内存管理</strong></td><td>手动（malloc/free）</td><td>手动+智能指针（auto_ptr, shared_ptr）</td></tr><tr><td><strong>字符串处理</strong></td><td>字符数组（char[]）</td><td>string类</td></tr><tr><td><strong>异常处理</strong></td><td>无</td><td>try/catch机制</td></tr><tr><td><strong>函数特性</strong></td><td>简单函数</td><td>函数重载、默认参数、内联函数</td></tr><tr><td><strong>兼容性</strong></td><td>C++可编译大多数C代码</td><td>C不能编译C++特有语法</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">C++ 的核心扩展特性</p><ol><li><p><strong>面向对象编程</strong></p><ul><li>类（class）和对象</li><li>继承（单继承/多继承）</li><li>多态（虚函数）</li><li>封装（public/private/protected）</li></ul></li><li><p><strong>标准模板库（STL）</strong></p><ul><li>容器（vector, list, map等）</li><li>算法（sort, find等）</li><li>迭代器</li></ul></li><li><p><strong>现代C++特性（C++11/14/17/20）</strong></p><ul><li>自动类型推导（auto）</li><li>范围for循环</li><li>Lambda表达式</li><li>移动语义（右值引用）</li></ul></li></ol></div><hr><p>简单C++代码示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用命名空间避免std::前缀</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 类定义</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string name;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n), </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a) {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 成员函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> introduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">             &lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;, &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; years old.&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用STL容器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> languages </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C++&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 范围for循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lang : languages) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lang </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Person </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">introduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++ 在游戏开发、高频交易、图形处理、浏览器/数据库引擎等性能敏感领域占据主导地位，而 C 语言则更多用于操作系统内核、嵌入式系统等需要极致精简的场景。</p>`,64)]))}const r=s(t,[["render",e],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/cpp/base/","title":"C/C++基础语法入门","lang":"en-US","frontmatter":{"dir":{"collapsible":false},"index":false,"title":"C/C++基础语法入门","description":"C语言及其发展史 C 语言是最流行的编程语言之一，排名网站网址为：https://www.tiobe.com/tiobe-index/ C语言的发行版本 （1）K&R C（1978年）： 由柯尼汉和里奇合写的《C 程序设计语言》成为公认标准，简称为K&R C （2）ANSI C（C89/C90，1989年）： 第一个ISO标准，也叫ANSI C，规范了...","head":[["meta",{"property":"og:url","content":"https://x.app/cpp/base/"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"C/C++基础语法入门"}],["meta",{"property":"og:description","content":"C语言及其发展史 C 语言是最流行的编程语言之一，排名网站网址为：https://www.tiobe.com/tiobe-index/ C语言的发行版本 （1）K&R C（1978年）： 由柯尼汉和里奇合写的《C 程序设计语言》成为公认标准，简称为K&R C （2）ANSI C（C89/C90，1989年）： 第一个ISO标准，也叫ANSI C，规范了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.ventix.top/img02/20250420182213187.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-21T16:34:14.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-04-21T16:34:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C/C++基础语法入门\\",\\"image\\":[\\"https://image.ventix.top/img02/20250420182213187.png\\",\\"https://image.ventix.top/img02/20250420182359299.png\\",\\"https://image.ventix.top/img02/20250420182556669.png\\"],\\"dateModified\\":\\"2025-04-21T16:34:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"C语言及其发展史","slug":"c语言及其发展史","link":"#c语言及其发展史","children":[{"level":3,"title":"C语言的发行版本","slug":"c语言的发行版本","link":"#c语言的发行版本","children":[]},{"level":3,"title":"C语言的应用场景","slug":"c语言的应用场景","link":"#c语言的应用场景","children":[]}]},{"level":2,"title":"C语言的开发环境","slug":"c语言的开发环境","link":"#c语言的开发环境","children":[{"level":3,"title":"GCC / GNU","slug":"gcc-gnu","link":"#gcc-gnu","children":[]},{"level":3,"title":"开发工具选择","slug":"开发工具选择","link":"#开发工具选择","children":[]},{"level":3,"title":"MinGW-w64","slug":"mingw-w64","link":"#mingw-w64","children":[]},{"level":3,"title":"VS code 配置","slug":"vs-code-配置","link":"#vs-code-配置","children":[]}]},{"level":2,"title":"C语言程序代码示例","slug":"c语言程序代码示例","link":"#c语言程序代码示例","children":[{"level":3,"title":"第一个C程序","slug":"第一个c程序","link":"#第一个c程序","children":[]},{"level":3,"title":"注释与代码风格","slug":"注释与代码风格","link":"#注释与代码风格","children":[]},{"level":3,"title":"进制及进制转换","slug":"进制及进制转换","link":"#进制及进制转换","children":[]}]},{"level":2,"title":"C++核心特性简介","slug":"c-核心特性简介","link":"#c-核心特性简介","children":[]}],"git":{"createdTime":1745203800000,"updatedTime":1745253254000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":2}]},"readingTime":{"minutes":10.7,"words":3210},"filePathRelative":"cpp/base/README.md","localizedDate":"April 21, 2025","excerpt":"<h2>C语言及其发展史</h2>\\n<p>C 语言是最流行的编程语言之一，排名网站网址为：<a href=\\"https://www.tiobe.com/tiobe-index/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.tiobe.com/tiobe-index/</a></p>\\n<h3>C语言的发行版本</h3>\\n<p>（1）K&amp;R C（1978年）： 由柯尼汉和里奇合写的《C 程序设计语言》成为公认标准，简称为K&amp;R C<br>\\n（2）ANSI C（C89/C90，1989年）： 第一个ISO标准，也叫ANSI C，规范了K&amp;R C，确保了可移植性<br>\\n（3）C99（1999年）： 第一次大修订，引入许多特性如//注释、可变长度数组等，成为最流行版本<br>\\n（4）C11（2011年）： 再次修订，增加_Generic、static_assert等功能，跟进新技术。<br>\\n（5）C17（2018年）： C11在2017年修补，2018年发布的C17只解决了C11的缺陷，未加入新功能。<br>\\n（6）C23： 2023年发布的C23计划增强安全性、消除实现定义行为、引入模块化语言等，提升安全和可靠性。</p>","autoDesc":true}');export{r as comp,d as data};
