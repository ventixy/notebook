import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as e}from"./app-D2UzjgoV.js";const t={};function l(h,i){return e(),n("div",null,i[0]||(i[0]=[a(`<h2 id="一-pywin32相关介绍" tabindex="-1"><a class="header-anchor" href="#一-pywin32相关介绍"><span>一 Pywin32相关介绍</span></a></h2><p>Pywin32 是Python编程中针对 Windows 的扩展库，提供了对大部分 Win32 API 的访问、创建、和使用COM对象的能力以及Pythonwin环境。</p><h3 id="windows消息机制" tabindex="-1"><a class="header-anchor" href="#windows消息机制"><span>Windows消息机制</span></a></h3><p>Windows消息机制是指Windows系统和应用程序之间通过发送和接收消息来进行通信的一种方式。</p><p>Windows是一个 <mark>消息驱动</mark> 的系统，应用程序想要实现某个功能需由消息来触发，对消息的响应和处理表示其要实现的功能。</p><p>Windows消息有 <mark>队列消息</mark> 和 <mark>非队列消息</mark> 之分，队列消息会先保存在消息队列中，等待应用程序从中取出并分发到各窗口处理；非队列消息会绕过消息队列直接发送到窗口过程被处理。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Windows消息由一个结构体（MSG）表示，包含了接收该消息的窗口句柄（hwnd）、消息常量标识符（message）、32位消息特定附加信息（wParam和lParam）、消息创建时的时间（time）和鼠标创建时的光标位置（pt）等信息。</p><p>在Windows中MSG结构体定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> tagMsg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       HWND    hwnd;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       //接受该消息的窗口句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       UINT    message;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //消息常量标识符，也就是我们通常所说的消息号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       WPARAM  wParam;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //32位消息的特定附加信息，确切含义依赖于消息值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       LPARAM  lParam;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //32位消息的特定附加信息，确切含义依赖于消息值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       DWORD   time;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       //消息创建时的时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       POINT   pt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         //消息创建时的鼠标/光标在屏幕坐标系中的位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MSG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="windows窗口句柄" tabindex="-1"><a class="header-anchor" href="#windows窗口句柄"><span>Windows窗口句柄</span></a></h3><p>Windows的窗口句柄，是指在Windows系统中用来标识和操作窗口的一个值。窗口句柄的类型是 HWND ，它是一个32位无符号整数，全系统唯一。窗口句柄是一个指向系统内部数据结构的引用，这个数据结构包含了窗口的属性和状态，如位置、大小、样式、文本、子窗口等。</p><div class="hint-container tip"><p class="hint-container-title">HWND的具体含义</p><ul><li>H 是类型描述，表示句柄 (handle) ，是一个系统分配和管理的值，应用程序不能修改或创建句柄。</li><li>WND 是变量对象描述，表示窗口 (window) ，是一个在屏幕上显示的矩形区域。</li><li>HWND 是一个基本类型，和 char 、 int 等同级别的，可以把它当做 long 型去看待，和身份证号一样。</li></ul></div><p>Windows的窗口句柄有以下几个特点：</p><ul><li>窗口句柄是由系统分配和管理的，应用程序不能修改或创建窗口句柄。</li><li>窗口句柄在窗口的生命周期内是固定不变的，但是在不同的进程或会话中，同一个窗口的句柄可能不同。</li><li>窗口句柄可以通过一些函数来获取，如 FindWindow 、 GetWindow 、 GetDlgItem 等。</li><li>窗口句柄可以通过一些函数来使用，如 SendMessage 、 SetWindowPos 、 ShowWindow 等。</li><li>窗口句柄可以用来与其他框架或语言进行互操作，如 WinUI 、 WPF 、 WinForms 、 Python 等。</li></ul><h2 id="二-pywin32的使用" tabindex="-1"><a class="header-anchor" href="#二-pywin32的使用"><span>二 Pywin32的使用</span></a></h2><h3 id="安装-pywin32" tabindex="-1"><a class="header-anchor" href="#安装-pywin32"><span>安装 pywin32</span></a></h3><p>在当前Python环境下安装 pywin32 的命令如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Pywin32</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>win32api ：模块内定义了常用的一些 API函数，例如：MessageBox</li><li>win32gui ：模块内定义了一些有关 图形操作的API，例如：FindWindow</li><li>win32con ：模块内定义了 windows API 内的宏，即 宏常量。</li></ul><p>下面将介绍几个常用API的使用:</p><h3 id="findwindow" tabindex="-1"><a class="header-anchor" href="#findwindow"><span>FindWindow</span></a></h3><p>win32gui.FindWindow用于检索顶级窗口的句柄，其类名和窗口名与指定的字符串匹配。这个函数不搜索子窗口，也不区分大小写。要搜索子窗口，可以使用win32gui.FindWindowEx函数。</p><div class="hint-container info"><p class="hint-container-title">win32gui.FindWindow()语法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hwnd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">FindWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lpClassName, lpWindowName)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># hwnd = win32gui.FindWindow(none, &quot;Notepad&quot;)  # 获取记事本窗口的句柄</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>lpClassName是窗口类名或由之前调用win32gui.RegisterClass或win32gui.RegisterClassEx函数创建的类原子。如果lpClassName指向一个字符串，它指定窗口类名。窗口类名可以是任何使用win32gui.RegisterClass或win32gui.RegisterClassEx注册的名称，或者任何预定义的控件类名称。如果lpClassName是None，它找到任何标题与lpWindowName参数匹配的窗口。</li><li>lpWindowName是窗口名（窗口的标题）。如果这个参数是None，所有窗口名都匹配。</li></ul><p>如果函数成功，返回值是具有指定类名和窗口名的窗口的句柄。如果函数失败，返回值是None。</p></div><p>win32gui.FindWindow可以用来获取指定窗口的句柄，然后对其进行一些操作，如移动、调整、激活、发送消息等。 也可以用来过滤出符合一定条件的窗口，如类名、标题、控件ID等。</p><h3 id="getdesktopwindow" tabindex="-1"><a class="header-anchor" href="#getdesktopwindow"><span>GetDesktopWindow</span></a></h3><p>win32gui.GetDesktopWindow() 是一个 Python 函数，用来调用 Windows API 中的 GetDesktopWindow 函数，检索桌面窗口的句柄。桌面窗口覆盖整个屏幕，是绘制其他窗口顶部的区域。桌面窗口的句柄可以用来进行一些操作，如截屏、设置壁纸、查找子窗口等。</p><div class="hint-container info"><p class="hint-container-title">win32gui.GetDesktopWindow()语法如下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hwin </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetDesktopWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>win32gui.GetDesktopWindow() 的返回值是一个 HWND 类型的值，表示桌面窗口的句柄。如果要使用这个句柄，可以调用一些其他的 win32gui 函数，如 win32gui.GetWindowRect 、 win32gui.SetWindowPos 、 win32gui.EnumChildWindows 等。</p></div><h3 id="enumchildwindows" tabindex="-1"><a class="header-anchor" href="#enumchildwindows"><span>EnumChildWindows</span></a></h3><p>win32gui.EnumChildWindows() 用来调用 Windows API 中的 EnumChildWindows 函数，枚举属于指定父窗口的子窗口。子窗口是指在父窗口的工作区内创建的窗口，它们与父窗口共享相同的消息队列和输入状态。</p><div class="hint-container info"><p class="hint-container-title">win32gui.EnumChildWindows()语法如下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">EnumChildWindows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hWndParent, lpEnumFunc, lParam)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数和返回值详解：</p><ul><li>hWndParent 是要枚举其子窗口的父窗口的句柄。如果此参数为 None ，则此函数等效于 win32gui.EnumWindows() ，枚举所有顶级窗口。</li><li>lpEnumFunc 是一个应用程序定义的回调函数，它将在每个子窗口上调用。回调函数的签名为 def callback(hWnd, lParam) ，其中 hWnd 是子窗口的句柄，lParam 是传递给 win32gui.EnumChildWindows() 的应用程序定义值。回调函数必须返回一个布尔值，如果返回 True ，则继续枚举，如果返回 False ，则停止枚举。</li><li>lParam 是一个应用程序定义值，它将传递给回调函数。</li><li>result 是一个布尔值，表示函数是否成功。如果成功，则返回 True ，如果失败，则返回 False 。可以调用 win32api.GetLastError() 来获取更多的错误信息。</li></ul></div><h3 id="getwindowtext" tabindex="-1"><a class="header-anchor" href="#getwindowtext"><span>GetWindowText</span></a></h3><p>win32gui.GetWindowText() 用来调用 Windows API 中的 GetWindowTextW 函数，获取指定窗口句柄的标题栏文本。</p><div class="hint-container info"><p class="hint-container-title">win32gui.GetWindowText()语法如下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetWindowText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数和返回值详解：</p><ul><li>hwnd 是要获取文本的窗口或控件的句柄，可以是任何有效的 HWND 值，如 <code>win32gui.GetDesktopWindow()</code> 返回的桌面窗口句柄。</li><li>text 是一个字符串。如果窗口没有标题栏或文本，如果标题栏为空，或者如果窗口或控件句柄无效，则返回值是一个空字符串。</li></ul></div><p>win32gui.GetWindowText(hwnd) 可以用来获取窗口或控件的标题、标签、内容等信息，然后对它们进行一些操作，如显示、比较、修改等。 也可以用来过滤出符合一定条件的窗口或控件，如类名、标题、控件ID等。</p><h3 id="getwindowrect" tabindex="-1"><a class="header-anchor" href="#getwindowrect"><span>GetWindowRect</span></a></h3><p>win32gui.GetWindowRect(hWnd) 用来调用 Windows API 中的 GetWindowRect 函数，检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标提供。</p><div class="hint-container info"><p class="hint-container-title">win32gui.GetWindowRect()语法如下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">left, top, right, bottom </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetWindowRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hWnd)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数和返回值详解：</p><ul><li>hWnd 是要获取边界矩形的窗口的句柄，可以是任何有效的 HWND 值。</li><li>left, top, right, bottom 是四个整数，表示窗口的左上角和右下角的屏幕坐标。符合 RECT 结构的约定，返回的矩形的右下角坐标是独占的。换句话说，位于 (right, bottom) 的像素紧邻矩形外。</li></ul></div><p>win32gui.GetWindowRect(hWnd) 可以用来获取窗口的位置、大小、形状等信息，然后对它们进行一些操作，如移动、调整、截图等。 也可以用来过滤出符合一定条件的窗口，如在某个区域内、超出屏幕范围等。</p><div class="hint-container tip"><p class="hint-container-title">RECT结构</p><p>RECT结构是一个定义矩形的左上角和右下角的坐标的数据结构。它在Windows API和C++中经常使用，有以下形式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> tagRECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LONG left;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LONG top;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LONG right;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LONG bottom;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RECT结构的成员如下：</p><ul><li>left：指定矩形左上角的X坐标。</li><li>top：指定矩形左上角的Y坐标。</li><li>right：指定矩形右下角的X坐标。</li><li>bottom：指定矩形右下角的Y坐标。</li></ul><p>RECT结构可以用来表示窗口、区域、位图等的位置、大小、形状等信息，可以与一些函数和类进行互操作，如：</p><ul><li>GetWindowRect、SetWindowPos等函数，用于获取或设置窗口的RECT。</li><li>CRect类，是对RECT的封装，提供了一些方便的操作和转换方法。</li><li>CDC类，提供了一些绘图函数，如FillRect、Draw3dRect等，可以使用RECT作为参数。</li></ul></div><h3 id="getwindowdc" tabindex="-1"><a class="header-anchor" href="#getwindowdc"><span>GetWindowDC</span></a></h3><p>win32gui.GetWindowDC()获取了窗口设备上下文句柄</p><p>设备上下文（Device Context）是一个用于绘图的数据结构，它封装了与显示设备相关的信息。</p><div class="hint-container info"><p class="hint-container-title">win32gui.GetWindowDC的语法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wDC </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetWindowDC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取窗口设备上下文句柄</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>hwnd是一个窗口句柄。如果此值为None，win32gui.GetWindowDC将获取整个屏幕的设备上下文。如果函数成功，则返回值是指定窗口的设备上下文的句柄。如果函数失败，则返回值为None。</p></div><p>win32gui.GetWindowDC适用于窗口的非客户区域中的特殊绘图效果。非客户区域是指窗口中不包括工作区的部分，如标题栏、菜单和滚动条。绘图完成后，必须调用win32gui.ReleaseDC函数才能释放设备上下文。</p><h3 id="createdcfromhandle" tabindex="-1"><a class="header-anchor" href="#createdcfromhandle"><span>CreateDCFromHandle</span></a></h3><p>win32ui.CreateDCFromHandle将窗口设备上下文句柄转换为设备上下文对象。</p><div class="hint-container info"><p class="hint-container-title">win32ui.CreateDCFromHandle的语法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wDC </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetWindowDC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd)             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取窗口设备上下文句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mfcDC </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">CreateDCFromHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(wDC)     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将窗口设备上下文句柄转换为设备上下文对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">saveDC </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mfcDC.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">CreateCompatibleDC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个兼容的设备上下文对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>win32ui.CreateDCFromHandle的用途有以下几点：</p><ul><li>可以用来创建一个内存设备上下文，用于在内存中绘制位图，然后将其复制到屏幕或打印机上。</li><li>可以用来创建一个打印机设备上下文，用于在打印机上绘制图形或文本。</li><li>可以用来创建一个显示设备上下文，用于在屏幕上绘制窗口或控件。</li></ul><h3 id="createbitmap" tabindex="-1"><a class="header-anchor" href="#createbitmap"><span>CreateBitmap</span></a></h3><p>win32ui.CreateBitmap()可以创建一个位图对象，该对象表示一个未分配内存的位图。</p><div class="hint-container info"><p class="hint-container-title">win32ui.CreateBitmap的语法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">saveBitMap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32ui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">CreateBitmap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 返回一个未分配内存的位图</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 为位图对象分配内存，并创建一个与原始设备上下文对象mfcDC兼容的位图。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">saveBitMap.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">CreateCompatibleBitmap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mfcDC, width, height) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">saveDC.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">SelectObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(saveBitMap)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将位图对象选入到设备上下文对象、以便进行绘图操作</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将原始设备上下文(mfcDC)中的内容复制到位图对象中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">saveDC.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">BitBlt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (width, height), mfcDC, (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), win32con.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">SRCCOPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BitBlt函数用于在设备上下文之间进行位块传输（Bit Block Transfer）。</li><li>使用 BitBlt 函数将 mfcDC 设备上下文的 (0, 0) 到 (width, height) 区域的图像复制到位图对象中，</li><li>使用 win32con.SRCCOPY 常量作为光栅操作码，表示直接复制源区域的像素值。</li></ul><p>此时，位图对象saveBitMap中存储了从窗口截取的图像</p></div><h2 id="三-pywin32应用总结" tabindex="-1"><a class="header-anchor" href="#三-pywin32应用总结"><span>三 Pywin32应用总结</span></a></h2><h3 id="获取窗口句柄" tabindex="-1"><a class="header-anchor" href="#获取窗口句柄"><span>获取窗口句柄</span></a></h3><p>获取指定窗口标题应用的窗口句柄：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hwnd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">FindWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;地下城与勇士：创新世纪&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;窗口句柄：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, hwnd)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取桌面窗口的句柄：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hdesktop </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetDesktopWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;桌面窗口句柄：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, hdesktop)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据某个窗口句柄、获取其全部子窗口的句柄（下面以获取桌面窗口的子窗口句柄为例）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hdesktop </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetDesktopWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;桌面窗口句柄：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, hdesktop)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取桌面窗口的所有子窗口句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hwndChildList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">EnumChildWindows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hd, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> hwnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">param</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: param.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd), hwndChildList)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hwnd </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hwndChildList:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> win32gui.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">GetWindowText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hwnd, text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58)]))}const k=s(t,[["render",l],["__file","pywin32.html.vue"]]),r=JSON.parse('{"path":"/python/Framework/pywin32.html","title":"Pywin32","lang":"en-US","frontmatter":{"title":"Pywin32","icon":"windows","description":"一 Pywin32相关介绍 Pywin32 是Python编程中针对 Windows 的扩展库，提供了对大部分 Win32 API 的访问、创建、和使用COM对象的能力以及Pythonwin环境。 Windows消息机制 Windows消息机制是指Windows系统和应用程序之间通过发送和接收消息来进行通信的一种方式。 Windows是一个 消息驱动 ...","head":[["meta",{"property":"og:url","content":"https://x.app/python/Framework/pywin32.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"Pywin32"}],["meta",{"property":"og:description","content":"一 Pywin32相关介绍 Pywin32 是Python编程中针对 Windows 的扩展库，提供了对大部分 Win32 API 的访问、创建、和使用COM对象的能力以及Pythonwin环境。 Windows消息机制 Windows消息机制是指Windows系统和应用程序之间通过发送和接收消息来进行通信的一种方式。 Windows是一个 消息驱动 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-10T15:19:41.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-01-10T15:19:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pywin32\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T15:19:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"一 Pywin32相关介绍","slug":"一-pywin32相关介绍","link":"#一-pywin32相关介绍","children":[{"level":3,"title":"Windows消息机制","slug":"windows消息机制","link":"#windows消息机制","children":[]},{"level":3,"title":"Windows窗口句柄","slug":"windows窗口句柄","link":"#windows窗口句柄","children":[]}]},{"level":2,"title":"二 Pywin32的使用","slug":"二-pywin32的使用","link":"#二-pywin32的使用","children":[{"level":3,"title":"安装 pywin32","slug":"安装-pywin32","link":"#安装-pywin32","children":[]},{"level":3,"title":"FindWindow","slug":"findwindow","link":"#findwindow","children":[]},{"level":3,"title":"GetDesktopWindow","slug":"getdesktopwindow","link":"#getdesktopwindow","children":[]},{"level":3,"title":"EnumChildWindows","slug":"enumchildwindows","link":"#enumchildwindows","children":[]},{"level":3,"title":"GetWindowText","slug":"getwindowtext","link":"#getwindowtext","children":[]},{"level":3,"title":"GetWindowRect","slug":"getwindowrect","link":"#getwindowrect","children":[]},{"level":3,"title":"GetWindowDC","slug":"getwindowdc","link":"#getwindowdc","children":[]},{"level":3,"title":"CreateDCFromHandle","slug":"createdcfromhandle","link":"#createdcfromhandle","children":[]},{"level":3,"title":"CreateBitmap","slug":"createbitmap","link":"#createbitmap","children":[]}]},{"level":2,"title":"三 Pywin32应用总结","slug":"三-pywin32应用总结","link":"#三-pywin32应用总结","children":[{"level":3,"title":"获取窗口句柄","slug":"获取窗口句柄","link":"#获取窗口句柄","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1736522381000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":10.13,"words":3040},"filePathRelative":"python/Framework/pywin32.md","localizedDate":"January 10, 2025","excerpt":"<h2>一 Pywin32相关介绍</h2>\\n<p>Pywin32 是Python编程中针对 Windows 的扩展库，提供了对大部分 Win32 API 的访问、创建、和使用COM对象的能力以及Pythonwin环境。</p>\\n<h3>Windows消息机制</h3>\\n<p>Windows消息机制是指Windows系统和应用程序之间通过发送和接收消息来进行通信的一种方式。</p>\\n<p>Windows是一个 <mark>消息驱动</mark> 的系统，应用程序想要实现某个功能需由消息来触发，对消息的响应和处理表示其要实现的功能。</p>\\n<p>Windows消息有 <mark>队列消息</mark> 和 <mark>非队列消息</mark> 之分，队列消息会先保存在消息队列中，等待应用程序从中取出并分发到各窗口处理；非队列消息会绕过消息队列直接发送到窗口过程被处理。</p>","autoDesc":true}');export{k as comp,r as data};
