import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as t,a as i,d as h,e as a,w as n,r as d,o as c}from"./app-BOCBbRDf.js";const g={};function A(y,s){const p=d("RouteLink"),k=d("Tabs");return c(),o("div",null,[s[9]||(s[9]=t('<h2 id="node-js基础" tabindex="-1"><a class="header-anchor" href="#node-js基础"><span>Node.js基础</span></a></h2><h3 id="node-js简介" tabindex="-1"><a class="header-anchor" href="#node-js简介"><span>Node.js简介</span></a></h3><p>Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的实时应用、API 服务器、微服务、工具脚本等。</p><p><strong>特点与优势</strong>：</p><ol><li><strong>异步非阻塞I/O</strong>：Node.js采用事件循环和回调函数，能高效处理并发请求，特别适合I/O密集型应用。</li><li><strong>单线程模型</strong>：尽管JavaScript是单线程，但Node.js通过事件循环和异步处理，能够有效利用系统资源。</li><li><strong>庞大的生态系统</strong>：npm（Node Package Manager）是世界上最大的软件注册表，提供了海量的开源库和工具。</li><li><strong>跨平台</strong>：Node.js可在多种操作系统上运行，包括Windows、Linux和macOS。</li><li><strong>轻量级</strong>：相比传统的Java、PHP等服务器端技术，Node.js启动速度快，资源消耗少。</li></ol><h3 id="node环境搭建" tabindex="-1"><a class="header-anchor" href="#node环境搭建"><span>Node环境搭建</span></a></h3><h4 id="在-windows-或-macos-上安装" tabindex="-1"><a class="header-anchor" href="#在-windows-或-macos-上安装"><span>在 Windows 或 macOS 上安装</span></a></h4><ol><li><strong>下载安装程序</strong>：访问 Node.js 官方网站 <a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer">https://nodejs.org/</a>，根据你的操作系统下载对应的安装包。</li><li><strong>安装</strong>：双击下载的安装程序，跟随向导完成安装过程。通常情况下，安装程序会自动添加 Node.js 到系统的 PATH 环境变量中，使你能在命令行直接使用 <code>node</code> 和 <code>npm</code> 命令。</li></ol>',8)),i("p",null,[s[1]||(s[1]=a("除了基本的直接下载安装外，还可以借助 Nvm 管理多个 node 版本，参照：")),h(p,{to:"/posts/blog/mac.html#node-js%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86"},{default:n(()=>s[0]||(s[0]=[a("NVM的安装和使用")])),_:1})]),s[10]||(s[10]=i("h4",{id:"在-linux-上安装",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#在-linux-上安装"},[i("span",null,"在 Linux 上安装")])],-1)),s[11]||(s[11]=i("p",null,"对于 Ubuntu 或 Debian 系统，可以使用 apt 包管理器安装，对于 CentOS 或 RHEL，则使用 yum 或 dnf：",-1)),h(k,{id:"66",data:[{id:"Ubuntu 或 Debian"},{id:"CentOS 或 RHEL"}],active:0,"tab-id":"Linux"},{title0:n(({value:e,isActive:l})=>s[2]||(s[2]=[a("Ubuntu 或 Debian")])),title1:n(({value:e,isActive:l})=>s[3]||(s[3]=[a("CentOS 或 RHEL")])),tab0:n(({value:e,isActive:l})=>s[4]||(s[4]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," apt"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," update")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," apt"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," install"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nodejs"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," npm")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:n(({value:e,isActive:l})=>s[5]||(s[5]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," yum"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," install"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nodejs"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," npm")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 或者对于较新的 CentOS/RHEL 使用 dnf")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," dnf"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," install"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nodejs"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," npm")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[12]||(s[12]=t(`<h4 id="使用-node-js运行-javascript-文件" tabindex="-1"><a class="header-anchor" href="#使用-node-js运行-javascript-文件"><span>使用 Node.js运行 JavaScript 文件</span></a></h4><ol><li><strong>创建文件</strong>：用文本编辑器创建一个名为 <code>app.js</code> 的文件。</li><li><strong>编写代码</strong>：在 <code>app.js</code> 中输入简单的 JavaScript 代码，例如：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, Node.js!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>运行代码</strong>：打开终端，进入该文件所在的目录，然后运行：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>你会在终端看到输出 “Hello, Node.js!”。</li></ol><h3 id="repl环境" tabindex="-1"><a class="header-anchor" href="#repl环境"><span>REPL环境</span></a></h3><p>REPL（Read-Eval-Print Loop，读取-求值-打印-循环）是一种简单的交互式编程环境，允许用户输入代码片段，立即执行并查看结果，从而快速测试和探索编程语言的功能。</p><p>Node.js的REPL使用：</p><ol><li><p><strong>启动REPL</strong>：打开命令行工具，输入<code>node</code>然后回车，即可进入Node.js的REPL环境。命令行会显示一个提示符，通常是<code>&gt; </code>或者<code>&gt;</code>，等待你输入JavaScript代码。</p></li><li><p><strong>输入代码</strong>：在提示符后，你可以直接输入JavaScript表达式、声明、函数定义等，并回车执行。REPL会立刻执行你的代码并显示结果。</p><ul><li>例如，输入<code>2 + 2</code>并回车，REPL会输出<code>4</code>。</li></ul></li><li><p><strong>变量与状态保持</strong>：REPL会维持一个上下文环境，意味着你在其中定义的变量和函数可以在后续的输入中继续使用。</p></li><li><p><strong>多行输入</strong>：如果需要输入多行代码（如函数定义），可以使用分号<code>;</code>或直接按回车进入下一行继续输入，直到输入结束符（如<code>}</code>）再回车执行。</p></li><li><p><strong>历史记录</strong>：大多数REPL支持向上箭头浏览之前的输入历史，方便重复或修改之前的操作。</p></li><li><p><strong>退出REPL</strong>：在Node.js的REPL中，输入<code>.exit</code>并回车，或者按下组合键<code>Ctrl+C</code>两次（在某些系统中），可以退出REPL环境。</p></li></ol><h3 id="事件驱动和非阻塞i-o" tabindex="-1"><a class="header-anchor" href="#事件驱动和非阻塞i-o"><span>事件驱动和非阻塞I/O</span></a></h3><p><strong>Node.js 的事件驱动模型</strong></p><p>Node.js 的核心特性之一是其事件驱动的架构，这一模型主要依赖于事件循环（Event Loop）和回调函数（Callback）。事件驱动编程允许程序响应外部事件，而不是仅仅按照预定的顺序执行代码。在 Node.js 中，这一机制使得它能够高效地处理大量的并发请求，特别适合构建高吞吐量的网络应用。</p><ol><li><p><strong>事件循环</strong>：Node.js 的事件循环不断地检查是否有待处理的事件（比如网络请求、文件读写完成等），如果有，它就会取出对应的事件及其回调函数并执行。这种机制让 Node.js 能够在单个线程中处理多个并发任务，无需为每个请求创建新的线程或进程。</p></li><li><p><strong>回调函数</strong>：当某个事件发生时，与之关联的回调函数会被放入事件队列等待执行。一旦当前正在执行的代码（包括之前的回调）完成，事件循环就会从队列中取出下一个回调执行。</p></li><li><p><strong>异步I/O</strong>：Node.js 中的大多数I/O操作（如文件读写、网络通信）都是异步的，意味着它们不会阻塞主线程，而是在操作完成后通过回调通知事件循环。</p></li></ol><p><strong>非阻塞I/O</strong></p><p>非阻塞I/O是事件驱动模型的基础。在传统的阻塞I/O模型中，当一个请求发出后，程序会暂停当前执行，直到请求完成并返回结果，这期间不能处理其他任务。而Node.js采用的非阻塞I/O则允许程序在等待I/O操作完成的同时继续执行其他任务。</p><ol><li><p><strong>如何提高性能</strong>：非阻塞I/O避免了线程在等待I/O操作时的空闲，充分利用CPU时间。在高并发场景下，由于Node.js使用单线程处理请求，没有线程上下文切换的开销，可以处理更多的并发连接，减少了内存消耗，提升了整体性能。</p></li><li><p><strong>libuv</strong>：Node.js 的底层依赖于 libuv 库来实现跨平台的异步I/O和事件循环机制。libuv负责管理一个线程池来处理实际的I/O操作，而主线程（事件循环所在的线程）则专注于执行JavaScript代码和调度事件。</p></li></ol><p><strong>事件循环处理并发请求</strong></p><p>当Node.js接收到多个请求时，它并不会为每个请求分配一个单独的线程，而是将请求的处理逻辑（主要是I/O操作）注册为事件监听器，并立即返回，继续处理下一个请求。当某个I/O操作完成时，事件循环会触发相应的事件，执行与之关联的回调函数，完成请求处理。因此，即使在处理大量并发请求时，Node.js也能保持低延迟和高吞吐量，因为它总是准备好去处理下一个事件，而不是等待某个操作完成。</p><p>总结来说，尽管Node.js在处理I/O时可能会在LibUV层使用线程池，但这与为每个请求或任务创建新线程的概念不同。Node.js通过异步I/O和事件循环机制，在单个主线程中实现了对多个并发任务的高效处理，减少了线程创建和切换的开销，提高了应用的整体性能。</p><h2 id="node包管理器" tabindex="-1"><a class="header-anchor" href="#node包管理器"><span>Node包管理器</span></a></h2><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span>npm</span></a></h3><p>npm（Node Package Manager） 是随 Node.js 一起安装的包管理器，它让开发者能够轻松地安装、管理和共享 Node.js 应用程序及其依赖关系。npm 提供了一个巨大的公开注册表，其中包含数百万个开源软件包，这些软件包可以通过简单的命令行操作进行安装和管理。</p><p><strong>npm 的特点</strong>：</p><ol><li><strong>包生态丰富</strong>：npm 是目前世界上最大的软件包生态系统，覆盖了从Web框架、数据库驱动到实用工具等各类库。</li><li><strong>依赖管理</strong>：自动处理依赖关系，确保安装的包及其依赖版本兼容，通过 <code>package.json</code> 和 <code>package-lock.json</code> 文件管理项目的依赖。</li><li><strong>脚本执行</strong>：支持定义和执行自定义脚本，便于自动化构建、测试和部署任务。</li><li><strong>版本控制</strong>：支持语义化版本控制，方便管理包的不同版本以及升级。</li><li><strong>全球镜像</strong>：除了官方源，还有众多地区性镜像源可用，比如淘宝 NPM 镜像，可提高下载速度。</li></ol><div class="hint-container tip"><p class="hint-container-title">NVM</p><p>nvm-windows的下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener noreferrer">https://github.com/coreybutler/nvm-windows/releases</a></p><p>在 nvm 的安装路径下(使用<code>nvm root</code>查看)，找到 <code>settings.txt</code>，在后面加上这两行，设置国内淘宝镜像源：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">node_mirror:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://npmmirror.com/mirrors/node/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm_mirror:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://npmmirror.com/mirrors/npm/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>nvm-windows的相关命令参照：<a href="https://nvm.uihtm.com/" target="_blank" rel="noopener noreferrer">https://nvm.uihtm.com/</a><br> 更详细的安装和使用介绍：<a href="https://www.cnblogs.com/rnny/p/17839190.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/rnny/p/17839190.html</a></p></div><p>由于 Node.js 安装时会自动包含 npm，所以安装 Node.js 即安装了 npm。不过，有时候你可能需要更新 npm 到最新版本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为了加快下载速度，特别是对于中国用户，可以配置使用淘宝 NPM 镜像：</p><ol><li><p><strong>临时使用</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --registry=https://registry.npmmirror.com</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>永久配置</strong>：</p><ul><li>在命令行设置（仅限当前用户）：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.npmmirror.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>修改全局配置文件（所有用户）：<br> 找到 npm 的配置文件（通常是 <code>~/.npmrc</code> 或 <code>/etc/npmrc</code>），添加或修改 <code>registry=https://registry.npmmirror.com</code>。<br> 即便使用nvm安装了多个版本的node，所有的版本都适用于此配置文件</li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">安装和使用 npm 包</p><ol><li><strong>初始化项目</strong>：在项目根目录下运行 <code>npm init</code>，按照提示填写信息，生成 <code>package.json</code> 文件。</li><li><strong>安装包</strong>：例如安装 Express，运行：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> express</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>在代码中使用</strong>：在 <code>app.js</code> 中引入并使用 Express：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> express</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;express&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> express</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello World!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Example app listening on port 3000!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>运行服务器</strong>：再次通过 <code>node app.js</code> 启动服务器，然后在浏览器访问 <code>http://localhost:3000</code>，可以看到 &quot;Hello World!&quot;。</li></ol></div><br><h3 id="npm常用命令" tabindex="-1"><a class="header-anchor" href="#npm常用命令"><span>npm常用命令</span></a></h3><h4 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h4><ul><li><p><code>npm init</code>: 创建一个新的 <code>package.json</code> 文件，引导你填写项目信息。使用 <code>-y</code> 跳过提示并接受默认值，快速创建：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h4><ul><li><p><code>npm install &lt;package&gt;</code>: 安装指定的包到当前项目的 <code>node_modules</code> 目录，并添加到 <code>package.json</code> 的 <code>dependencies</code> 或 <code>devDependencies</code>（使用 <code>--save-dev</code>）。</p></li><li><p><code>npm i</code> 或 <code>npm install</code>: 无参数时，安装 <code>package.json</code> 中列出的所有依赖。</p></li><li><p><code>npm install --save</code>: 安装的同时将包添加到 <code>dependencies</code>。</p></li><li><p><code>npm install --save-dev</code>: 安装开发依赖，添加到 <code>devDependencies</code>。</p></li></ul><h4 id="更新依赖" tabindex="-1"><a class="header-anchor" href="#更新依赖"><span>更新依赖</span></a></h4><ul><li><p><code>npm update</code>: 更新所有依赖到最新版本（不改变大版本号）。</p></li><li><p><code>npm update &lt;package&gt;</code>: 更新指定包到最新版本。</p></li></ul><h4 id="卸载依赖" tabindex="-1"><a class="header-anchor" href="#卸载依赖"><span>卸载依赖</span></a></h4><ul><li><code>npm uninstall &lt;package&gt;</code>: 卸载指定包，并从 <code>package.json</code> 中移除记录。</li></ul><h4 id="查看依赖" tabindex="-1"><a class="header-anchor" href="#查看依赖"><span>查看依赖</span></a></h4><ul><li><p><code>npm list</code>: 列出当前项目安装的所有依赖包。</p></li><li><p><code>npm list --global</code>: 查看全局安装的包。</p></li></ul><h4 id="脚本执行" tabindex="-1"><a class="header-anchor" href="#脚本执行"><span>脚本执行</span></a></h4><ul><li><code>npm run &lt;script&gt;</code>: 执行 <code>package.json</code> 中 <code>scripts</code> 部分定义的脚本。</li></ul><h4 id="发布包" tabindex="-1"><a class="header-anchor" href="#发布包"><span>发布包</span></a></h4><ul><li><p><code>npm login</code>: 登录 npm 账户。</p></li><li><p><code>npm publish</code>: 发布当前目录下的包到 npm 仓库。</p></li></ul><h4 id="其他常用命令" tabindex="-1"><a class="header-anchor" href="#其他常用命令"><span>其他常用命令</span></a></h4><ul><li><p><code>npm cache clean --force</code>: 清理 npm 缓存。</p></li><li><p><code>npm view &lt;package&gt; versions</code>: 查看包的所有版本。</p></li><li><p><code>npm view &lt;package&gt; dependencies</code>: 查看包的依赖。</p></li><li><p><code>npm outdated</code>: 检查哪些依赖包有新版本可用。</p></li><li><p><code>npm help &lt;command&gt;</code>: 获取特定命令的帮助信息。</p></li><li><p><code>npm search &lt;keyword&gt;</code>: 搜索 npm 仓库中的包。</p></li></ul><h3 id="npm-create" tabindex="-1"><a class="header-anchor" href="#npm-create"><span>npm create</span></a></h3><p><code>npm create</code> 是一个便捷的命令，它允许用户快速初始化一个新的项目，基于已存在的模板或包。这个命令是在npm的一个较新版本中引入的，旨在简化项目创建流程，特别是对于那些频繁使用特定模板或框架的开发者。</p><p><code>npm create</code> 命令的基本形式是：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [package-name] [project-name]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>[package-name]</code> 是你想要用来创建项目的模板或包的名称。这些模板通常包含项目初始化所需的所有文件和配置，比如 <code>create-react-app</code>、<code>create-vite</code> 等。</li><li><code>[project-name]</code> 是你为新项目指定的名称，这个名称将作为新项目目录的名称。</li></ul><p>如果省略了<code>[project-name]</code>，npm将会在当前目录下创建项目，使用默认的或你选择的包名作为目录名。</p><p>当你运行<code>npm create</code>时，npm会自动执行以下操作：</p><ol><li><strong>安装模板包</strong>：如果本地没有所需的模板包，npm会先将其安装到一个临时位置。</li><li><strong>执行模板脚本</strong>：npm随后会调用模板包中的脚本或API来创建项目结构。这通常涉及文件的复制、配置文件的生成等。</li><li><strong>项目初始化</strong>：最终，你得到一个包含所有必要文件和初步配置的新项目，可以直接开始开发。</li></ol><ul><li>创建一个React应用示例：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-app</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-react-app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>npm create react-app my-app</code> 会寻找 <code>create-react-app</code> 包 并使用它来创建一个新的 React 应用</p><h3 id="npx" tabindex="-1"><a class="header-anchor" href="#npx"><span>npx</span></a></h3><p>npx 是 npm 5.2.0 版本之后引入的一个命令行工具，它是 npm 包执行器。npx 的主要目的是为了简化执行 Node.js 包中的命令行工具的过程，特别是在不希望或不必全局安装这些工具的情况下。npx 的引入改善了开发者在使用 CLI 工具和其他托管在 npm 注册表上的可执行文件时的体验。</p><p>npx 与 npm 的关系紧密，可以视作 npm 的一部分或扩展功能。它们之间的主要区别包括：</p><ol><li><p><strong>临时性与局部性</strong>：npx 会在每次执行时临时下载（如果尚未存在）并执行所需的包，执行完毕后通常不会在系统中留下全局安装的痕迹。这有助于减少全局安装的包之间的冲突，并保持项目的环境纯净。</p></li><li><p><strong>自动安装依赖</strong>：npx 会自动处理包的依赖关系，确保执行的命令或脚本可以在当前环境中正确运行，而不需要手动处理依赖安装。</p></li><li><p><strong>命令查找与执行</strong>：npx 会智能地在本地 <code>node_modules/.bin</code> 目录、环境变量 <code>$PATH</code> 中查找命令，如果找不到，则直接从 npm 注册表下载并执行，使得执行命令变得简单直接。</p></li><li><p><strong>版本控制</strong>：npx 支持指定执行命令的版本，这对于需要特定版本的工具来兼容项目的情况非常有用，避免了因全局安装版本不同而引发的问题。</p></li></ol><p>总结来说，npx 是 npm 生态系统中的一个实用工具，它在不牺牲易用性的同时，增强了对包中命令行工具的管理和执行能力，特别适合于一次性任务或需要灵活版本控制的场景。</p><h3 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm"><span>pnpm</span></a></h3><p>pnpm 是一种快速且高效的 Node.js 包管理器，它通过利用硬链接和归档文件来显著减少磁盘空间占用和提高安装速度。</p><p><strong>安装</strong>: pnpm 可以通过 npm 安装为全局包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pnpm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 .pnpm-store 目录的位置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> store-dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;D:\\Develop\\.pnpm-store&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PNPM_STORE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;D:\\Develop\\.pnpm-store&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pnpm 使用 npm 配置文件（<code>.npmrc</code>）来指定下载源，格式与 npm 相同。</p><p>查看<code>pnpm</code>的配置项：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>pnpm 除了使用 <code>.npmrc</code> 外，还可以使用 <code>.pnpmfile.cjs</code> 进行更高级的配置，比如自定义生命周期脚本。</p><br><p><strong>pnpm常见命令的使用</strong>：</p><ul><li><strong>清理缓存</strong>：<code>pnpm cache clean</code> 或 <code>pnpm cache clear</code></li><li><strong>查看版本</strong>：<code>pnpm -v</code> 或 <code>pnpm version</code></li></ul><h4 id="初始化项目-1" tabindex="-1"><a class="header-anchor" href="#初始化项目-1"><span>初始化项目</span></a></h4><p>进入你的项目目录，使用 <code>pnpm init</code> 来创建一个新的 <code>package.json</code> 文件，这个命令与 npm 的 <code>npm init</code> 类似：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在交互式提示中填写项目信息，或者使用 <code>-y</code> 参数跳过提示，接受默认设置：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="安装依赖-1" tabindex="-1"><a class="header-anchor" href="#安装依赖-1"><span>安装依赖</span></a></h4><p>安装项目所需的依赖。<code>pnpm install</code> 会安装 <code>package.json</code> 文件中列出的所有依赖，同时也会读取 <code>package-lock.json</code> 或 <code>pnpm-lock.yaml</code> 文件来保证依赖的精确版本安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装单个依赖包，并将其添加到 <code>dependencies</code> 或 <code>devDependencies</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装依赖到开发环境（即添加到 <code>devDependencies</code>）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="更新依赖-1" tabindex="-1"><a class="header-anchor" href="#更新依赖-1"><span>更新依赖</span></a></h4><p>更新所有依赖到最新兼容版本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更新特定包到最新版本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="卸载依赖-1" tabindex="-1"><a class="header-anchor" href="#卸载依赖-1"><span>卸载依赖</span></a></h4><p>从项目中移除依赖包，并从 <code>package.json</code> 中删除相应的条目：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="查看依赖-1" tabindex="-1"><a class="header-anchor" href="#查看依赖-1"><span>查看依赖</span></a></h4><p>查看已安装的依赖：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看具体包的依赖树：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="执行脚本" tabindex="-1"><a class="header-anchor" href="#执行脚本"><span>执行脚本</span></a></h4><p>运行 <code>package.json</code> 中定义的脚本，类似于 npm：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">script-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>pnpm 使用 <code>pnpm-lock.yaml</code> 文件来锁定依赖版本和描述依赖关系图，这与 npm 使用的 <code>package-lock.json</code> 类似，但格式和机制有所不同。</p><div class="hint-container tip"><p class="hint-container-title">在 nvm 多版本 Node.js 环境下的配置设置影响</p><ul><li><strong>pnpm依赖于npm</strong>: 在使用nvm切换版本后，如果对应版本下没有安装过pnpm，需要重新安装，每个node版本都对应一个独立的pnpm</li><li><strong>共享全局 .npmrc</strong>：所有通过 nvm 管理的 Node.js 版本共享一个全局的 <code>.npmrc</code> 文件，因此在此文件中设置的下载源适用于所有版本的 pnpm。</li><li><strong>局部 .npmrc</strong>：每个项目可以有自己独立的 <code>.npmrc</code> 文件，覆盖全局设置，这种配置是隔离的，不随 Node.js 版本变化。</li><li><strong>环境变量</strong>：通过环境变量（如 <code>NPM_CONFIG_REGISTRY</code>）设置的下载源也会影响所有 Node.js 版本下的 pnpm。</li></ul></div><div class="hint-container info"><p class="hint-container-title">npm与pnpm</p><p><strong>npm与pnpm 的共同点</strong></p><ul><li><strong>包管理目的相同</strong>：两者都用于管理 Node.js 项目的依赖，支持安装、更新、卸载包等操作。</li><li><strong>使用 .npmrc 配置文件</strong>：都使用 <code>.npmrc</code> 文件来配置包源和其他设置。</li></ul><p><strong>npm与pnpm的区别</strong></p><ul><li><strong>依赖管理方式</strong>：pnpm 采用“内容可寻址的文件系统”，避免了重复的依赖包，通过硬链接和快照机制节省磁盘空间和提高安装速度，而 npm 通常会为每个依赖包的每个版本复制所有文件到项目目录。</li><li><strong>下载源配置</strong>：虽然两者都可以通过 <code>.npmrc</code> 配置下载源，但 pnpm 在处理依赖时的优化机制使得它在某些场景下能更高效地使用这些源。</li><li><strong>配置文件扩展</strong>：pnpm 支持 <code>.pnpmfile.cjs</code>，提供比 npm 更多的自定义选项。</li></ul><p><strong>npm和pnpm命令混用问题</strong><br> 虽然从技术上讲，一个项目中可以同时安装了 <code>npm</code> 和 <code>pnpm</code> 并且在不同情境下分别使用它们来安装或管理依赖，但这并不是推荐的做法。主要原因是这样做可能会导致一些潜在问题和混乱：</p><ol><li><p><strong>依赖管理混乱</strong>：<code>npm</code> 和 <code>pnpm</code> 在处理依赖的方式上有所不同，尤其是 <code>pnpm</code> 使用了独特的依赖共享机制来优化磁盘使用和加快安装速度。混用可能导致依赖版本不一致，因为两个工具可能解析和安装依赖的逻辑有细微差别。</p></li><li><p><strong>Lockfile 不兼容</strong>：<mark><code>npm</code> 使用 <code>package-lock.json</code> 文件锁定依赖版本，而 <code>pnpm</code> 使用 <code>pnpm-lock.yaml</code></mark>。这两个锁文件格式不同，各自反映了使用对应工具安装时的依赖状态。混用可能导致锁文件不一致，影响团队间的一致性和可复现性。</p></li><li><p><strong>脚本和配置差异</strong>：尽管很多 <code>npm</code> 的命令在 <code>pnpm</code> 中有类似的实现，但两个工具的配置文件和一些高级特性可能有所不同。混合使用可能导致某些配置或脚本行为不符合预期。</p></li><li><p><strong>社区和维护问题</strong>：当遇到问题时，混用两种包管理器可能使问题定位更加困难，因为社区和文档通常都是围绕单一工具的最佳实践来构建的。</p></li></ol><p>因此，最佳实践是为一个项目选择一个包管理工具并坚持使用它，以避免上述潜在问题。如果决定从 <code>npm</code> 迁移到 <code>pnpm</code>，应该彻底地进行迁移，并且团队成员应统一使用 <code>pnpm</code> 来进行依赖管理。如果项目中已经存在 <code>pnpm-lock.yaml</code>，那么应完全使用 <code>pnpm</code> 进行依赖安装和管理，避免同时使用 <code>npm</code> 安装或更新依赖。如果需要回退到 <code>npm</code>，则应清理 <code>pnpm</code> 特有的文件（如删除 <code>pnpm-lock.yaml</code> 和 <code>node_modules</code>），然后使用 <code>npm</code> 重新安装依赖。</p></div><h3 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn"><span>yarn</span></a></h3><p>Yarn 是 Facebook 推出的一个快速、可靠、安全的依赖管理工具，与 npm 类似，用于 Node.js 项目中管理依赖包。下面是 Yarn 的一些基本使用方法和常用命令：</p><h4 id="安装-yarn" tabindex="-1"><a class="header-anchor" href="#安装-yarn"><span>安装 Yarn</span></a></h4><ul><li><p><strong>通过 npm 安装</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yarn</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>官方推荐安装方法</strong>（因地区网络环境差异，请访问 <a href="https://yarnpkg.com" target="_blank" rel="noopener noreferrer">Yarn官网</a> 获取最新安装指令）:</p><p>通常包括使用 curl 或者 wget 下载安装脚本直接安装。</p></li></ul><h4 id="初始化项目-2" tabindex="-1"><a class="header-anchor" href="#初始化项目-2"><span>初始化项目</span></a></h4><ul><li><code>yarn init</code>: 生成一个新的 <code>package.json</code> 文件，与 <code>npm init</code> 类似，通过交互式提问收集项目信息。</li></ul><h4 id="安装依赖-2" tabindex="-1"><a class="header-anchor" href="#安装依赖-2"><span>安装依赖</span></a></h4><ul><li><code>yarn add &lt;package&gt;</code>: 安装并添加依赖到 <code>dependencies</code>。</li><li><code>yarn add &lt;package&gt; --dev</code>: 添加到 <code>devDependencies</code>。</li><li><code>yarn add &lt;package&gt;@&lt;version&gt;</code>: 安装特定版本的包。</li><li><code>yarn</code>: 或 <code>yarn install</code>, 安装 <code>package.json</code> 中列出的所有依赖。</li></ul><h4 id="更新依赖-2" tabindex="-1"><a class="header-anchor" href="#更新依赖-2"><span>更新依赖</span></a></h4><ul><li><code>yarn upgrade &lt;package&gt;</code>: 更新指定包。</li><li><code>yarn upgrade &lt;package&gt;@&lt;version&gt;</code>: 更新到指定版本。</li><li><code>yarn upgrade-interactive</code>: 交互式地升级依赖。</li></ul><h4 id="移除依赖" tabindex="-1"><a class="header-anchor" href="#移除依赖"><span>移除依赖</span></a></h4><ul><li><code>yarn remove &lt;package&gt;</code>: 从项目中移除依赖并更新 <code>package.json</code>。</li></ul><h4 id="查看依赖-2" tabindex="-1"><a class="header-anchor" href="#查看依赖-2"><span>查看依赖</span></a></h4><ul><li><code>yarn list</code>: 列出所有已安装的依赖。</li><li><code>yarn info &lt;package&gt;</code>: 显示包的详细信息。</li></ul><h4 id="运行脚本" tabindex="-1"><a class="header-anchor" href="#运行脚本"><span>运行脚本</span></a></h4><ul><li><code>yarn run &lt;script&gt;</code>: 执行 <code>package.json</code> 中定义的脚本。</li></ul><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h4><ul><li>Yarn 使用 <code>yarn.lock</code> 文件来锁定依赖版本，确保每次安装时获得相同的依赖树。</li></ul><div class="hint-container info"><p class="hint-container-title">Yarn 与 npm 和 pnpm 的异同</p><p><strong>相同点</strong>:</p><ul><li>都是 Node.js 的包管理工具，用于解决项目依赖管理问题。</li><li>支持 <code>package.json</code> 文件来管理依赖信息。</li><li>都可以通过命令行安装、更新和管理依赖。</li></ul><p><strong>不同点</strong>:</p><ul><li><p><strong>性能与安装速度</strong>:</p><ul><li>Yarn 使用并行下载和缓存机制，提高安装速度；npm 在较新版本中也有所改进，但Yarn在并发下载上仍有一定的优势。</li><li>pnpm 通过共享依赖和快照机制进一步优化了速度和磁盘使用。</li></ul></li><li><p><strong>依赖管理</strong>:</p><ul><li>Yarn 使用 <code>yarn.lock</code> 文件来锁定依赖，保证一致性；</li><li>npm 使用 <code>package-lock.json</code> 达到类似效果。</li><li>pnpm 使用 <code>pnpm-lock.yaml</code>，并实现了一种更高效的依赖管理策略，避免了重复的包副本。</li></ul></li><li><p><strong>安全性</strong>:</p><ul><li>Yarn 和 npm 都有检查依赖安全性的功能，如 Yarn 的 <code>yarn audit</code> 类似于 npm 的 <code>npm audit</code>。</li><li>pnpm 同样关注安全性，但具体实现和报告可能有所不同。</li></ul></li><li><p><strong>配置与兼容性</strong>:</p><ul><li>Yarn 和 npm 都支持 <code>.npmrc</code> 配置文件，具有较高的兼容性。</li><li>pnpm 除了支持 <code>.npmrc</code>，还提供了额外的 <code>.pnpmfile.cjs</code> 自定义配置。</li></ul></li></ul></div><p>总的来说，Yarn、npm 和 pnpm 都是强大的包管理工具，各有侧重。Yarn 强调速度和一致性，npm 是 Node.js 官方默认工具，生态丰富，而 pnpm 在空间效率和一致性方面表现出色。选择哪一个取决于个人或团队的具体需求和偏好。</p><h2 id="项目依赖管理" tabindex="-1"><a class="header-anchor" href="#项目依赖管理"><span>项目依赖管理</span></a></h2><h3 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json"><span>package.json</span></a></h3><p>在前端开发中，<code>package.json</code>文件是项目的核心配置文件，它不仅记录了项目的元数据，还管理着项目的依赖关系。下面是一个<code>package.json</code>示例：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目名称，应为唯一标识符</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-front-end-project&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目版本，遵循语义化版本控制(SemVer)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目描述，简短介绍项目功能</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个前端项目示例，展示依赖管理和配置&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目主入口文件，通常是服务器端或构建后的入口</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 脚本命令，简化日常开发任务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 启动开发服务器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webpack serve --config webpack.dev.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 构建生产环境代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webpack --config webpack.prod.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 运行单元测试</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;jest&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 生产环境依赖，项目运行时所需</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;dependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // React 库，用于构建用户界面</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;react&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^17.0.2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // React-DOM，React 的 DOM 版本，用于浏览器环境</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;react-dom&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^17.0.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 开发环境依赖，仅用于开发和构建过程</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Webpack，模块打包工具</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;webpack&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^5.52.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Webpack 的 CLI 工具，用于命令行操作</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;webpack-cli&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^4.8.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Jest，JavaScript 测试框架</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;jest&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^27.3.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ESLint，代码质量检查工具</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;eslint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.32.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Babel，转译 ES6+ 代码为向后兼容版本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;@babel/core&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.12.9&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.12.7&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;@babel/preset-react&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^7.12.7&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 关键字，用于提高包的可搜索性</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;keywords&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;frontend&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;webpack&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;react&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;javascript&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目作者信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;author&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Your Name &lt;your.email@example.com&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 许可证声明</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;license&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MIT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目仓库地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;repository&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;git&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://github.com/your-username/my-front-end-project.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 项目引擎要求，确保正确版本的 Node.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;engines&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&gt;=12.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此<code>package.json</code>示例展示了如何定义项目的基本信息、配置脚本命令、管理生产与开发环境依赖，以及指定项目的一些附加元数据。完整的配置项参考官方文档：<a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json" target="_blank" rel="noopener noreferrer">package.json</a></p><h3 id="依赖包及版本号" tabindex="-1"><a class="header-anchor" href="#依赖包及版本号"><span>依赖包及版本号</span></a></h3><p>在npm中，版本号遵循语义化版本控制（Semantic Versioning，简称semver）<br> 格式为：<code>主版本号.次版本号.补丁版本号（MAJOR.MINOR.PATCH)</code>。</p><div class="hint-container info"><p class="hint-container-title">控制版本范围</p><ol><li><strong>精确版本</strong>：直接指定版本号，如<code>1.2.3</code>，表示安装特定版本。</li><li><strong>插入符（^）</strong>：兼容/允许<mark>次要版本</mark>升级，如<code>^1.2.3</code>会安装<code>1.x.x</code>系列的最新版本，但不会跨过<code>1.x</code>升级到<code>2.x</code>。在希望获得新功能和改进时使用</li><li><strong>波浪线（~）</strong>：兼容/允许<mark>补丁版本</mark>升级，如<code>~1.2.3</code>会安装<code>1.2.x</code>系列的最新版本，但不会跨过<code>1.2.x</code>升级到<code>1.3.x</code>。在追求稳定性时使用</li><li><strong>星号（*）</strong>：匹配任何版本，但通常不推荐在生产环境中使用，因为可能导致不可预测的升级。</li><li><strong>大于号（&gt;）、小于号（&lt;）、大于等于号（&gt;=）、小于等于号（&lt;=）</strong>：这些符号用于指定版本范围，如<code>&gt;=1.2.0 &lt;2.0.0</code>，表示任何<code>1.x</code>版本，但不包括<code>2.0.0</code>及更高版本。</li><li><strong>双连字符（-）</strong>：指定版本范围，如<code>1.2.0 - 2.0.0</code>，与上面的<code>&gt;=1.2.0 &lt;2.0.0</code>效果相同。</li></ol><p>使用这些符号时，npm会根据提供的条件选择符合条件的最新版本进行安装</p></div><br><p><strong><code>dependencies</code>和<code>devDependencies</code></strong></p><ul><li><p><strong>dependencies</strong>: 这里列出的依赖项是在项目运行时所必需的。当应用部署到生产环境时，这些依赖会被安装。例如，像<code>express</code>这样的web框架或者<code>axios</code>用于发起HTTP请求的库，都是生产环境中需要的。</p></li><li><p><strong>devDependencies</strong>: 这里列出的是开发和构建过程中需要的依赖，但在你的应用程序实际运行时并不需要。这包括诸如代码检查工具<code>eslint</code>、测试框架<code>jest</code>或打包工具<code>webpack</code>等。</p></li></ul><p><mark>如果一个依赖仅在开发或构建过程中使用，则应放在<code>devDependencies</code>；如果应用在运行时也需要它，则应放入<code>dependencies</code></mark>。正确地分类依赖有助于保持项目的清晰度和可维护性，同时也优化了生产环境的依赖安装过程。</p><ul><li><p><strong>添加到dependencies</strong>：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--save</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>添加到devDependencies</strong>：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--save-dev</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="hint-container info"><p class="hint-container-title">关于 \`--save\`</p><p><code>--save</code>是一个npm（Node.js包管理器）命令行选项，它告诉npm在安装一个包时，不仅要将其添加到项目的<code>node_modules</code>目录中，还要将其名称和版本号记录到项目的<code>package.json</code>文件的<code>dependencies</code>部分。这样做的好处是，当其他人克隆你的项目或者在新环境中设置项目时，他们只需要运行<code>npm install</code>就能自动安装所有生产环境中必需的依赖。</p><p>随着时间的发展，<mark>从npm 5开始（发布于2017年），<code>--save</code>选项的行为成为了默认行为</mark>。这意味着当你直接运行<code>npm install &lt;package&gt;</code>而没有指定<code>--save</code>或<code>--save-dev</code>时，npm会自动将包添加到<code>dependencies</code>或<code>devDependencies</code>中，具体取决于上下文。这一改变是为了简化开发者的工作流，减少命令行中的输入。</p><p>所以，<code>--save</code>可以省略的原因是因为npm版本5及以上默认就具备了保存依赖到<code>package.json</code>的功能。不过，为了明确意图和兼容旧版npm或某些特定场景，你仍然可以选择显式使用<code>--save</code>。对于开发依赖（devDependencies），则依然需要使用<code>--save-dev</code>（或简写为<code>-D</code>）来指定。</p></div><h3 id="npm执行脚本" tabindex="-1"><a class="header-anchor" href="#npm执行脚本"><span>npm执行脚本</span></a></h3><p>在npm中，可以通过<code>scripts</code>字段在<code>package.json</code>文件中定义自定义脚本，这些脚本极大地便利了前端开发过程中的自动化任务，比如启动开发服务器、编译代码、运行测试等。</p><p><strong>如何自定义脚本</strong>：</p><ol><li><p><strong>打开<code>package.json</code>文件</strong>：找到或创建<code>scripts</code>对象，它是一个键值对集合，键是脚本名，值是执行的命令。</p></li><li><p><strong>定义脚本</strong>：在<code>scripts</code>对象内添加新的键值对。值可以是shell命令或本地可执行文件的路径，也可以调用其他npm脚本。实际开发中通常是由框架或者脚手架生成的。</p></li></ol><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-app&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;react-scripts start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 启动开发服务器（假设使用Create React App）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;react-scripts build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编译生产环境代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;react-scripts test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 运行测试</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;lint&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;eslint &#39;./src/**/*.{js,jsx,ts,tsx}&#39; --quiet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 静默模式运行ESLint代码检查</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;precommit&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;npm run lint &amp;&amp; npm run test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在git commit前执行的脚本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;deploy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;npm run build &amp;&amp; gh-pages -d build&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 部署到GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如何使用自定义脚本</strong>：</p><ul><li><strong>命令行执行</strong>：在项目根目录下，使用<code>npm run &lt;script-name&gt;</code>, <code>pnpm &lt;script-name&gt;</code>或<code>yarn &lt;script-name&gt;</code>来执行脚本。例如，<code>npm run start</code>会启动开发服务器。</li><li><strong>省略run</strong>：pnpm和yarn均可以不添加 run , npm则建议使用 <code>npm run xx</code>命令（虽然部分情况下，如脚本名是start等时也可以省略run）</li></ul><div class="hint-container info"><p class="hint-container-title">常用脚本命令及其解释</p><ul><li><p><strong>start</strong>: 通常用于启动开发服务器，监听文件更改并自动刷新浏览器，适合开发环境。例如，使用Create React App时，它会启动一个内置的WebPack开发服务器。</p></li><li><p><strong>build</strong>: 用于编译项目代码，进行压缩、优化等操作，生成准备部署到生产环境的静态文件。</p></li><li><p><strong>test</strong>: 运行项目的测试套件，确保代码质量和功能正确性。配合测试框架（如Jest）使用。</p></li><li><p><strong>lint</strong>: 代码质量检查，使用ESLint或其他工具自动检测代码中的潜在错误和风格问题。</p></li><li><p><strong>precommit/prepush</strong>: Git钩子脚本，可以在提交或推送代码前自动执行某些任务，如代码检查或运行测试，保证代码库的质量。</p></li><li><p><strong>deploy</strong>: 自动部署脚本，可以配置为将构建好的应用部署到特定平台，如GitHub Pages、Heroku或其他云服务。</p></li></ul></div><p>自定义脚本极大地提高了开发效率，减少了重复劳动，让开发者能更专注于编写业务逻辑。通过组合不同的命令和工具，你可以根据项目需求灵活定制适合的脚本。</p><h2 id="模块系统与核心模块" tabindex="-1"><a class="header-anchor" href="#模块系统与核心模块"><span>模块系统与核心模块</span></a></h2><h3 id="node模块系统" tabindex="-1"><a class="header-anchor" href="#node模块系统"><span>Node模块系统</span></a></h3>`,148)),i("p",null,[s[7]||(s[7]=a("Node.js的模块系统是其强大功能之一，它允许开发者将代码组织成独立的、可重用的单元。Node.js支持两种主要的模块规范：")),h(p,{to:"/web/base/js/es6.html#module-id"},{default:n(()=>s[6]||(s[6]=[a("CommonJS 和 ES模块（ESM）")])),_:1}),s[8]||(s[8]=a("。"))]),s[13]||(s[13]=t(`<div class="hint-container tip"><p class="hint-container-title">Node.js中模块的导入导出注意事项</p><p>Node.js开始实验性支持ESM（ECMAScript Modules）是从Node.js 8.x版本开始的，但那时需要特定的标志来启用这一特性。到了Node.js 12.x版本，ESM的支持变得更加稳定，并且开始鼓励开发者使用，但仍需通过配置（如使用<code>.mjs</code>扩展名或<code>--experimental-modules</code>命令行标志）来启用, Node.js13及以上版本支持通过<code>package.json</code>配置开启ESM</p><p><strong>package.json设置</strong>：在你的<code>package.json</code>文件中添加<code>&quot;type&quot;: &quot;module&quot;</code>，这样Node.js就知道使用ES6 模块语法。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从Node.js 14.x版本开始，ESM的支持更加成熟，并且在后续版本中不断得到改进。特别是Node.js 14引入了对Top-level await的支持（在模块顶层使用await关键字）作为实验性功能。</p><p>最终，<mark>在Node.js 16及以后的长期支持（LTS）版本中，ESM已经成为默认支持且稳定的功能，不再需要标志来启用</mark>，并且在Node.js 22版本中，对ESM的支持进一步增强，包括增加了对JavaScript模块图同步require的支持等特性，表明Node.js对ESM的支持已经非常全面和成熟。</p><p>注意，当你在Node.js中使用ES6模块时，你需要注意依赖包的兼容性。并非所有NPM包都支持ES6模块，你可能需要查看特定包的文档来了解如何正确地导入它们。</p></div><h4 id="commonjs模块规范" tabindex="-1"><a class="header-anchor" href="#commonjs模块规范"><span>CommonJS模块规范</span></a></h4><p><strong>定义</strong>：CommonJS是一种用于服务器端JavaScript的模块规范，它在Node.js中被广泛采用。在CommonJS中，每个<code>.js</code>文件都被视为一个独立的模块，有自己的作用域。</p><p><strong>导入模块</strong>：使用<code>require()</code>函数来导入模块。<code>require()</code>接收模块路径作为参数，并返回模块导出的对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;fs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导入Node.js的文件系统模块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>导出模块</strong>：模块可以通过<code>module.exports</code>或<code>exports</code>对象来导出功能或数据给外部使用。<code>module.exports</code>是模块的默认导出对象，而<code>exports</code>是<code>module.exports</code>的一个引用，通常用于简化导出操作。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导出一个函数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sayHello</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者直接修改module.exports</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Hello, </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">!\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>require()</code>是同步操作，且模块在首次加载时只执行一次，之后的<code>require()</code>调用将直接从缓存中获取模块。</p><h4 id="es模块-esm-支持" tabindex="-1"><a class="header-anchor" href="#es模块-esm-支持"><span>ES模块（ESM）支持</span></a></h4><p><strong>定义</strong>：ES模块是ECMAScript标准的一部分，从ES6开始引入，它提供了原生的模块导入和导出语法，支持动态导入、顶级<code>await</code>等特性。</p><p><strong>导入模块</strong>：使用<code>import</code>关键字导入模块。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./hello.mjs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导入指定的导出项</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./hello.mjs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导入所有导出项作为一个对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./hello.mjs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认导出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>导出模块</strong>：使用<code>export</code>关键字导出模块的成员。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导出一个函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认导出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Hello, </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">!\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件扩展名</strong>：ES模块通常使用<code>.mjs</code>作为文件扩展名，而CommonJS模块使用<code>.js</code>。不过，Node.js也允许通过配置使用<code>.js</code>作为ES模块的扩展名。</p><p><strong>异步加载</strong>：与CommonJS不同，ES模块的导入是异步的，这有助于避免加载时的阻塞。</p><h3 id="node核心模块" tabindex="-1"><a class="header-anchor" href="#node核心模块"><span>Node核心模块</span></a></h3><p>Node.js 的模块系统是其设计的核心特性之一，它允许开发者将代码组织成独立的模块，便于复用和维护。Node.js 的模块系统遵循“CommonJS”规范，这使得每个模块都有自己的作用域，避免了全局变量的污染。</p><h4 id="node-js-模块的分类" tabindex="-1"><a class="header-anchor" href="#node-js-模块的分类"><span>Node.js 模块的分类</span></a></h4><ol><li><p><strong>核心模块</strong>：这些模块是Node.js的一部分，直接由Node.js提供，无需安装即可使用。例如<code>fs</code>（文件系统）、<code>http</code>（HTTP服务器）、<code>path</code>（路径处理）、<code>os</code>（操作系统相关的实用功能）等。</p></li><li><p><strong>文件模块</strong>：当导入一个以<code>.js</code>、<code>.json</code>或编译后的<code>.node</code>（C++扩展）结尾的本地文件时，Node.js会将其视为文件模块。文件模块的路径可以是相对的或绝对的。</p></li><li><p><strong>第三方模块</strong>：这些是通过npm（Node.js包管理器）安装的外部库。使用前需要先通过<code>npm install</code>命令安装。</p></li></ol><h4 id="示例1-使用fs模块读取文件" tabindex="-1"><a class="header-anchor" href="#示例1-使用fs模块读取文件"><span>示例1：使用<code>fs</code>模块读取文件</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 引入fs模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;fs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 异步读取文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;example.txt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-使用http模块创建一个简单的http服务器" tabindex="-1"><a class="header-anchor" href="#示例2-使用http模块创建一个简单的http服务器"><span>示例2：使用<code>http</code>模块创建一个简单的HTTP服务器</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根据req.url判断客户端请求的路径，返回不同的响应内容</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> server</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 可以使用 req.method 判断请求方式，进行不同的处理</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // if (req.method === &#39;POST&#39; &amp;&amp; req.url === &#39;/submit&#39;) { ... }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Content-Type&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;text/plain; charset=utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">statusCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;欢迎来到首页</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/about&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">statusCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;关于我们的信息...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">statusCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 404</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;页面未找到</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Server running on port 3000&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24))])}const B=r(g,[["render",A],["__file","node.html.vue"]]),v=JSON.parse('{"path":"/web/core/tool/node.html","title":"Node和包管理","lang":"en-US","frontmatter":{"order":1,"title":"Node和包管理","description":"Node.js基础 Node.js简介 Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的实时应用...","head":[["meta",{"property":"og:url","content":"https://x.app/web/core/tool/node.html"}],["meta",{"property":"og:site_name","content":"doc"}],["meta",{"property":"og:title","content":"Node和包管理"}],["meta",{"property":"og:description","content":"Node.js基础 Node.js简介 Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的实时应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-06T14:43:25.000Z"}],["meta",{"property":"article:author","content":"ventixy"}],["meta",{"property":"article:modified_time","content":"2025-02-06T14:43:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node和包管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-06T14:43:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ventixy\\",\\"url\\":\\"https://www.ventix.top\\"}]}"]]},"headers":[{"level":2,"title":"Node.js基础","slug":"node-js基础","link":"#node-js基础","children":[{"level":3,"title":"Node.js简介","slug":"node-js简介","link":"#node-js简介","children":[]},{"level":3,"title":"Node环境搭建","slug":"node环境搭建","link":"#node环境搭建","children":[]},{"level":3,"title":"REPL环境","slug":"repl环境","link":"#repl环境","children":[]},{"level":3,"title":"事件驱动和非阻塞I/O","slug":"事件驱动和非阻塞i-o","link":"#事件驱动和非阻塞i-o","children":[]}]},{"level":2,"title":"Node包管理器","slug":"node包管理器","link":"#node包管理器","children":[{"level":3,"title":"npm","slug":"npm","link":"#npm","children":[]},{"level":3,"title":"npm常用命令","slug":"npm常用命令","link":"#npm常用命令","children":[]},{"level":3,"title":"npm create","slug":"npm-create","link":"#npm-create","children":[]},{"level":3,"title":"npx","slug":"npx","link":"#npx","children":[]},{"level":3,"title":"pnpm","slug":"pnpm","link":"#pnpm","children":[]},{"level":3,"title":"yarn","slug":"yarn","link":"#yarn","children":[]}]},{"level":2,"title":"项目依赖管理","slug":"项目依赖管理","link":"#项目依赖管理","children":[{"level":3,"title":"package.json","slug":"package-json","link":"#package-json","children":[]},{"level":3,"title":"依赖包及版本号","slug":"依赖包及版本号","link":"#依赖包及版本号","children":[]},{"level":3,"title":"npm执行脚本","slug":"npm执行脚本","link":"#npm执行脚本","children":[]}]},{"level":2,"title":"模块系统与核心模块","slug":"模块系统与核心模块","link":"#模块系统与核心模块","children":[{"level":3,"title":"Node模块系统","slug":"node模块系统","link":"#node模块系统","children":[]},{"level":3,"title":"Node核心模块","slug":"node核心模块","link":"#node核心模块","children":[]}]}],"git":{"createdTime":1736522381000,"updatedTime":1738853005000,"contributors":[{"name":"drizzle","email":"msdrizzle@outlook.com","commits":2}]},"readingTime":{"minutes":30.81,"words":9244},"filePathRelative":"web/core/tool/node.md","localizedDate":"January 10, 2025","excerpt":"<h2>Node.js基础</h2>\\n<h3>Node.js简介</h3>\\n<p>Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的实时应用、API 服务器、微服务、工具脚本等。</p>\\n<p><strong>特点与优势</strong>：</p>\\n<ol>\\n<li><strong>异步非阻塞I/O</strong>：Node.js采用事件循环和回调函数，能高效处理并发请求，特别适合I/O密集型应用。</li>\\n<li><strong>单线程模型</strong>：尽管JavaScript是单线程，但Node.js通过事件循环和异步处理，能够有效利用系统资源。</li>\\n<li><strong>庞大的生态系统</strong>：npm（Node Package Manager）是世界上最大的软件注册表，提供了海量的开源库和工具。</li>\\n<li><strong>跨平台</strong>：Node.js可在多种操作系统上运行，包括Windows、Linux和macOS。</li>\\n<li><strong>轻量级</strong>：相比传统的Java、PHP等服务器端技术，Node.js启动速度快，资源消耗少。</li>\\n</ol>","autoDesc":true}');export{B as comp,v as data};
